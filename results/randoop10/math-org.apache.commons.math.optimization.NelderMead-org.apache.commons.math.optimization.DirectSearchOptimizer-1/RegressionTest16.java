import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10L, (double) '4', (double) (byte) 0, (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (-1.0f), 1.0f };
        double[] doubleArray13 = new double[] { (-1.0f), 1.0f };
        double[] doubleArray16 = new double[] { (-1.0f), 1.0f };
        double[] doubleArray19 = new double[] { (-1.0f), 1.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray15);
        java.lang.Object[] objArray18 = costException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray21 = convergenceException19.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        java.lang.Object[] objArray24 = convergenceException22.getArguments();
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException22);
        java.lang.String str27 = convergenceException26.toString();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException" + "'", str27, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) (byte) 100, (double) (-1.0f), (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) (byte) 10, (-1.0d), (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { ' ', 100.0d };
        double[] doubleArray13 = new double[] { ' ', 100.0d };
        double[] doubleArray16 = new double[] { ' ', 100.0d };
        double[] doubleArray19 = new double[] { ' ', 100.0d };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray20, 0, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 32.0d, 100.0d, 100.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 52.0d);
        double[] doubleArray23 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 35.0d);
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 10.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray23, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, 0.0d, (double) (byte) -1, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) '4');
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 0.0f);
        double double31 = pointCostPair30.getCost();
        double[] doubleArray32 = pointCostPair30.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray23, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, 0.0d, (double) '#', (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11, doubleArray12, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray14, (-1), (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        java.lang.String str7 = notPositiveDefiniteMatrixException3.getPattern();
        java.lang.Throwable[] throwableArray8 = notPositiveDefiniteMatrixException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray12 = convergenceException10.getArguments();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "not positive definite matrix" + "'", str7, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray12 = notPositiveDefiniteMatrixException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: Convergence failed", (java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray7, (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException16.getSuppressed();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        java.lang.Object[] objArray31 = costException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray33 = costException30.getArguments();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException37 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException38 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException37.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        java.lang.String str42 = notPositiveDefiniteMatrixException38.getPattern();
        java.lang.Throwable[] throwableArray43 = notPositiveDefiniteMatrixException38.getSuppressed();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) costException52);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray33, (java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException58);
        java.lang.String str60 = convergenceException59.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "not positive definite matrix" + "'", str42, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str60, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException7);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException17, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("", objArray21);
        java.lang.Class<?> wildcardClass24 = costException23.getClass();
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { wildcardClass24, 'a', (-1.0f), "not positive definite matrix", costException36 };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray42 = convergenceException40.getArguments();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = costException50.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray42, (java.lang.Throwable) convergenceException52);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        java.lang.Object[] objArray61 = costException60.getArguments();
        java.lang.Throwable[] throwableArray62 = costException60.getSuppressed();
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException60);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException60);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray42, (java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException65);
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException66);
        java.lang.Throwable[] throwableArray68 = convergenceException66.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException66);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException(throwable24);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException25, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray29);
        java.lang.Class<?> wildcardClass32 = costException31.getClass();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException44);
        java.lang.Object[] objArray46 = new java.lang.Object[] { wildcardClass32, 'a', (-1.0f), "not positive definite matrix", costException44 };
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray13, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException52 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException53 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException52.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray66);
        java.lang.Object[] objArray69 = costException68.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("hi!", objArray69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException70);
        java.lang.Throwable[] throwableArray72 = convergenceException70.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException70);
        java.lang.Throwable[] throwableArray74 = convergenceException73.getSuppressed();
        java.lang.Object[] objArray75 = convergenceException73.getArguments();
        convergenceException56.addSuppressed((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException73);
        java.lang.Object[] objArray78 = convergenceException77.getArguments();
        java.lang.Throwable[] throwableArray79 = convergenceException77.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray13);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) (-1.0f), (double) (short) 0, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { 1.0f };
        double[][] doubleArray10 = new double[][] { doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100, (double) (short) 1, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (byte) 1, (double) (short) 1, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (short) 0, (double) '#', (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10L, 0 };
        double[][] doubleArray11 = new double[][] { doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray11, 10, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, 52.0d, 0.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10L, (double) 1, (double) '#', (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (-1L));
        double[] doubleArray21 = pointCostPair20.getPoint();
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 100);
        double[] doubleArray27 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 52.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray21, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = notPositiveDefiniteMatrixException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.String str15 = notPositiveDefiniteMatrixException11.getPattern();
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.String str28 = convergenceException27.getPattern();
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        java.lang.Throwable[] throwableArray10 = notPositiveDefiniteMatrixException5.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) costException19);
        java.lang.String str22 = convergenceException21.getPattern();
        java.lang.Throwable[] throwableArray23 = convergenceException21.getSuppressed();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray23);
        java.lang.String str27 = costException26.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str22, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str27, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) (byte) 1, (double) (short) 0, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 97.0d);
        double[] doubleArray30 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double double34 = pointCostPair32.getCost();
        double double35 = pointCostPair32.getCost();
        double[] doubleArray36 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) 100L);
        double[] doubleArray41 = pointCostPair40.getPoint();
        double[] doubleArray42 = pointCostPair40.getPoint();
        double[] doubleArray43 = pointCostPair40.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray43, (double) (byte) 1);
        double double46 = pointCostPair45.getCost();
        double[] doubleArray47 = pointCostPair45.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair50 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray18, doubleArray47, 100, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, 0.0d, (double) (-1L), (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair13 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        java.lang.Object[] objArray26 = costException24.getArguments();
        java.lang.Object[] objArray27 = costException24.getArguments();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = costException38.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray40);
        java.lang.Throwable[] throwableArray42 = convergenceException41.getSuppressed();
        java.lang.String str43 = convergenceException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray27, (java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray45 = convergenceException44.getArguments();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray57);
        java.lang.Object[] objArray60 = costException59.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray60);
        java.lang.Object[] objArray69 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("hi!", objArray69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray69);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException71);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException71);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray60, (java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException74);
        org.apache.commons.math.optimization.CostException costException79 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray45, (java.lang.Throwable) costException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray45);
        java.lang.Throwable[] throwableArray82 = convergenceException81.getSuppressed();
        java.lang.String str83 = convergenceException81.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str43, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str83, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, 0.0d, (double) 'a', (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (short) -1);
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 1);
        double[] doubleArray31 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 97.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray17, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException7 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        java.lang.Object[] objArray41 = convergenceException40.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) (byte) -1, (double) 100, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, randomVectorGenerator8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.String str26 = convergenceException25.getPattern();
        java.lang.String str27 = convergenceException25.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException28);
        java.lang.String str30 = costException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException31);
        costException13.addSuppressed((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) costException13);
        java.lang.Object[] objArray35 = costException13.getArguments();
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException(throwable37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException39);
        java.lang.String str41 = costException40.getPattern();
        java.lang.Throwable[] throwableArray42 = costException40.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException40);
        java.lang.Throwable[] throwableArray44 = costException40.getSuppressed();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray44);
        costException13.addSuppressed((java.lang.Throwable) costException45);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException(throwable0);
        org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException(throwable0);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException(throwable0);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        costException3.addSuppressed((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray14 = costException3.getSuppressed();
        java.lang.Class<?> wildcardClass15 = costException3.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException9);
        java.lang.String str11 = convergenceException10.getPattern();
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        java.lang.String str13 = convergenceException10.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str11, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str13, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) '#', (double) (-1), (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43, throwable45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException46);
        java.lang.Throwable[] throwableArray48 = convergenceException46.getSuppressed();
        java.lang.Object[] objArray49 = convergenceException46.getArguments();
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        convergenceException58.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        java.lang.String str65 = notPositiveDefiniteMatrixException60.getPattern();
        java.lang.Object[] objArray66 = notPositiveDefiniteMatrixException60.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray49, (java.lang.Throwable) notPositiveDefiniteMatrixException60);
        java.lang.String str69 = notPositiveDefiniteMatrixException60.toString();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "not positive definite matrix" + "'", str65, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str69, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        java.lang.Throwable[] throwableArray16 = costException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException15);
        java.lang.Throwable[] throwableArray18 = costException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray18);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        double double5 = pointCostPair4.getCost();
        double[] doubleArray6 = pointCostPair4.getPoint();
        double[] doubleArray7 = pointCostPair4.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray7, (double) (short) 1);
        double double10 = pointCostPair9.getCost();
        double[] doubleArray11 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        java.lang.Class<?> wildcardClass14 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.apache.commons.math.optimization.NelderMead nelderMead0 = new org.apache.commons.math.optimization.NelderMead();
        org.apache.commons.math.optimization.CostFunction costFunction1 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker3 = null;
        double[] doubleArray9 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 10.0d);
        double[] doubleArray12 = pointCostPair11.getPoint();
        double[] doubleArray13 = pointCostPair11.getPoint();
        double[] doubleArray14 = pointCostPair11.getPoint();
        double[] doubleArray15 = pointCostPair11.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, 0.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) 'a');
        double[] doubleArray30 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (byte) 100);
        double[] doubleArray35 = pointCostPair34.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair38 = nelderMead0.minimize(costFunction1, 0, convergenceChecker3, doubleArray20, doubleArray35, 0, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException4);
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (byte) -1, (double) 'a', 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double[] doubleArray23 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 10.0f);
        double[] doubleArray26 = pointCostPair25.getPoint();
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        double double35 = pointCostPair34.getCost();
        double[] doubleArray36 = pointCostPair34.getPoint();
        double[] doubleArray37 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray26, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", throwable4);
        java.lang.Object[] objArray6 = convergenceException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("Convergence failed", objArray6);
        java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray8);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        java.lang.Object[] objArray21 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray12);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 32.0d, 35.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        double double21 = pointCostPair19.getCost();
        double[] doubleArray22 = pointCostPair19.getPoint();
        double[] doubleArray23 = pointCostPair19.getPoint();
        double double24 = pointCostPair19.getCost();
        double[] doubleArray25 = pointCostPair19.getPoint();
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        double[] doubleArray34 = pointCostPair33.getPoint();
        double[] doubleArray35 = pointCostPair33.getPoint();
        double[] doubleArray36 = pointCostPair33.getPoint();
        double[] doubleArray37 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (short) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray25, doubleArray37, 0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) (byte) 100, (double) (-1L), 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 0, 0, 1, ' ' };
        double[] doubleArray17 = new double[] { 0, 0, 1, ' ' };
        double[][] doubleArray18 = new double[][] { doubleArray12, doubleArray17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair19 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray7 = notPositiveDefiniteMatrixException6.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        java.lang.String str13 = notPositiveDefiniteMatrixException9.getPattern();
        java.lang.Throwable[] throwableArray14 = notPositiveDefiniteMatrixException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray7, (java.lang.Throwable) notPositiveDefiniteMatrixException9);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.String str26 = convergenceException25.getPattern();
        java.lang.String str27 = convergenceException25.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray30 = convergenceException28.getArguments();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Class<?> wildcardClass34 = convergenceException32.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "not positive definite matrix" + "'", str13, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 0, (double) 100.0f, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 1.0d);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray25 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (byte) -1);
        double[] doubleArray35 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 0);
        double double40 = pointCostPair39.getCost();
        double double41 = pointCostPair39.getCost();
        double[] doubleArray42 = pointCostPair39.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) '4');
        double[] doubleArray45 = pointCostPair44.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray25, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(throwable53);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException54, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException(throwable68);
        java.lang.String str70 = convergenceException69.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray66, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray58, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException72);
        java.lang.Object[] objArray74 = convergenceException72.getArguments();
        java.lang.Throwable[] throwableArray75 = convergenceException72.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException72);
        java.lang.Object[] objArray77 = convergenceException72.getArguments();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException(throwable0);
        org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException(throwable0);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray24);
        java.lang.String str26 = costException25.getPattern();
        costException11.addSuppressed((java.lang.Throwable) costException25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException11);
        costException2.addSuppressed((java.lang.Throwable) costException11);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException2);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException2);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException2);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException(throwable38);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException39, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        java.lang.String str46 = convergenceException45.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException47);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        java.lang.Throwable[] throwableArray55 = convergenceException54.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException57 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray58 = notPositiveDefiniteMatrixException57.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        java.lang.String str64 = notPositiveDefiniteMatrixException60.getPattern();
        java.lang.Throwable[] throwableArray65 = notPositiveDefiniteMatrixException60.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray58, (java.lang.Throwable) notPositiveDefiniteMatrixException60);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException(throwable70);
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException71, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray75);
        java.lang.String str77 = convergenceException76.getPattern();
        java.lang.String str78 = convergenceException76.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException76);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException79);
        java.lang.Object[] objArray81 = convergenceException79.getArguments();
        notPositiveDefiniteMatrixException60.addSuppressed((java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray55, (java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) notPositiveDefiniteMatrixException60);
        convergenceException47.addSuppressed((java.lang.Throwable) convergenceException85);
        costException2.addSuppressed((java.lang.Throwable) convergenceException85);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str26, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "not positive definite matrix" + "'", str64, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray14);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray14, (java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        java.lang.String str33 = costException28.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str33, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException14);
        java.lang.Object[] objArray17 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray26 = convergenceException24.getArguments();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: Convergence failed", objArray26);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException5);
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            convergenceException5.addSuppressed(throwable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) '4', (double) 0, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 1);
        double double29 = pointCostPair28.getCost();
        double[] doubleArray30 = pointCostPair28.getPoint();
        double[] doubleArray31 = pointCostPair28.getPoint();
        double[] doubleArray32 = pointCostPair28.getPoint();
        double[] doubleArray38 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) (byte) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) (byte) 0);
        double[] doubleArray47 = pointCostPair46.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray47, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray32, doubleArray47, (int) (byte) 0, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("hi!", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray24 = convergenceException22.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray26 = convergenceException25.getSuppressed();
        java.lang.Object[] objArray27 = convergenceException25.getArguments();
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException25);
        java.lang.Object[] objArray30 = convergenceException29.getArguments();
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException32);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException(throwable14);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray12, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException21);
        java.lang.Object[] objArray24 = convergenceException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException26);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100L, (double) (byte) 0, (double) '4', (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 1.0d);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        double[] doubleArray43 = pointCostPair38.getPoint();
        double[] doubleArray44 = pointCostPair38.getPoint();
        double double45 = pointCostPair38.getCost();
        double[] doubleArray46 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray20, doubleArray46, (int) (byte) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        double[] doubleArray6 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, (double) 10.0f);
        double[] doubleArray15 = pointCostPair14.getPoint();
        double double16 = pointCostPair14.getCost();
        double double17 = pointCostPair14.getCost();
        double double18 = pointCostPair14.getCost();
        double double19 = pointCostPair14.getCost();
        double double20 = pointCostPair14.getCost();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) 10, 100.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, 0.0d, 0.0d, (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { (byte) 1, 52.0d, (byte) 0 };
        double[] doubleArray15 = new double[] { (byte) 1, 52.0d, (byte) 0 };
        double[] doubleArray19 = new double[] { (byte) 1, 52.0d, (byte) 0 };
        double[] doubleArray23 = new double[] { (byte) 1, 52.0d, (byte) 0 };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray24, (int) ' ', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (-1.0d), (double) (short) 0, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (-1));
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 0.0d);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair28 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray20, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException16);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray22 = convergenceException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray22);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        convergenceException7.addSuppressed((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = costException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray15, (java.lang.Throwable) costException28);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException42 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException43 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException42.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException43);
        java.lang.Throwable[] throwableArray47 = notPositiveDefiniteMatrixException43.getSuppressed();
        convergenceException41.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException43);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray15, (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray15);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray15);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 0L, (double) '#', (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray8 = convergenceException6.getSuppressed();
        java.lang.String str9 = convergenceException6.getPattern();
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException6);
        java.lang.String str12 = convergenceException11.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str9, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str12, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1L), (double) 10, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 100.0f, ' ', 10.0f };
        double[] doubleArray15 = new double[] { 100.0f, ' ', 10.0f };
        double[][] doubleArray16 = new double[][] { doubleArray11, doubleArray15 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.String str11 = convergenceException10.getPattern();
        java.lang.String str12 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray15 = convergenceException13.getArguments();
        java.lang.String str16 = convergenceException13.getPattern();
        java.lang.Throwable[] throwableArray17 = convergenceException13.getSuppressed();
        java.lang.Object[] objArray18 = convergenceException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        java.lang.Class<?> wildcardClass21 = objArray20.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray14 = notPositiveDefiniteMatrixException13.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) convergenceException16);
        java.lang.String str18 = convergenceException17.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str18, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException11.getSuppressed();
        convergenceException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) 0, (double) (short) 100, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (-1L));
        double[] doubleArray33 = new double[] { 1, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray24, doubleArray33, (int) '#', (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException(throwable0);
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        java.lang.Object[] objArray4 = convergenceException2.getArguments();
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray7 = costException6.getSuppressed();
        java.lang.Class<?> wildcardClass8 = costException6.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) (-1), (double) 0, (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) (-1.0f));
        double[] doubleArray20 = pointCostPair19.getPoint();
        double double21 = pointCostPair19.getCost();
        double[] doubleArray22 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (-1.0d));
        double[] doubleArray25 = pointCostPair24.getPoint();
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 0.0f);
        double[] doubleArray40 = pointCostPair39.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair53 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray25, doubleArray40, 0, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        double[] doubleArray3 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (-1L));
        double[] doubleArray10 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) (byte) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) (byte) 10, (double) 1, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, randomVectorGenerator8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27);
        notPositiveDefiniteMatrixException20.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray19, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray19);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Throwable[] throwableArray34 = convergenceException32.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray34);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (double) (-1), (double) 0L, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 1.0f, 10.0d };
        double[][] doubleArray11 = new double[][] { doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair12 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        java.lang.Throwable[] throwableArray9 = costException7.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Object[] objArray13 = notPositiveDefiniteMatrixException11.getArguments();
        costException7.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException7);
        java.lang.Throwable[] throwableArray17 = costException7.getSuppressed();
        java.lang.String str18 = costException7.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str18, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray12);
        java.lang.Object[] objArray16 = costException15.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) 1, 32.0d, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 97.0d, 32.0d, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (short) 100);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 0);
        double[] doubleArray27 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        double[] doubleArray30 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (-1.0f));
        double[] doubleArray33 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair38 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray19, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray2 = notPositiveDefiniteMatrixException1.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray2, (java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.Class<?> wildcardClass11 = notPositiveDefiniteMatrixException4.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) 0.0f, 100.0d, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException(throwable10);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException11, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("", objArray15);
        java.lang.Class<?> wildcardClass18 = costException17.getClass();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray32 = new java.lang.Object[] { wildcardClass18, 'a', (-1.0f), "not positive definite matrix", costException30 };
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException34);
        java.lang.Object[] objArray36 = convergenceException34.getArguments();
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = costException44.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) convergenceException46);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        java.lang.Object[] objArray55 = costException54.getArguments();
        java.lang.Throwable[] throwableArray56 = costException54.getSuppressed();
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException54);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException54);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray36, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray36);
        java.lang.Object[] objArray61 = costException60.getArguments();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray61, throwable62);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray61);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException9);
        java.lang.String str12 = convergenceException11.getPattern();
        java.lang.Throwable[] throwableArray13 = convergenceException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = costException25.getArguments();
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("", objArray38);
        java.lang.Class<?> wildcardClass41 = costException40.getClass();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException53);
        java.lang.Object[] objArray55 = new java.lang.Object[] { wildcardClass41, 'a', (-1.0f), "not positive definite matrix", costException53 };
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException56);
        costException25.addSuppressed((java.lang.Throwable) convergenceException57);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException61 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException60.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException("hi!", objArray74);
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray74);
        java.lang.Object[] objArray77 = costException76.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("hi!", objArray77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException78);
        java.lang.Throwable[] throwableArray80 = convergenceException78.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException78);
        java.lang.Throwable[] throwableArray82 = convergenceException81.getSuppressed();
        java.lang.Object[] objArray83 = convergenceException81.getArguments();
        convergenceException64.addSuppressed((java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException81);
        java.lang.Object[] objArray86 = convergenceException85.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException85);
        convergenceException57.addSuppressed((java.lang.Throwable) convergenceException87);
        convergenceException16.addSuppressed((java.lang.Throwable) convergenceException87);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str12, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) 10, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 'a', 1 };
        double[][] doubleArray11 = new double[][] { doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair12 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, 0.0d, 0.0d, (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        double[] doubleArray20 = pointCostPair15.getPoint();
        double[] doubleArray26 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 10.0d);
        double double29 = pointCostPair28.getCost();
        double[] doubleArray30 = pointCostPair28.getPoint();
        double double31 = pointCostPair28.getCost();
        double[] doubleArray32 = pointCostPair28.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 97.0d);
        double double22 = pointCostPair21.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 97.0d + "'", double22 == 97.0d);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray7 = convergenceException5.getArguments();
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray9 = convergenceException5.getArguments();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (byte) -1, (double) (-1.0f), (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 'a');
        double double27 = pointCostPair26.getCost();
        double[] doubleArray28 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 10.0f);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) 0.0f);
        double[] doubleArray45 = pointCostPair44.getPoint();
        double[] doubleArray46 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) 10.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) (byte) 0);
        double[] doubleArray51 = pointCostPair50.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair53 = new org.apache.commons.math.optimization.PointCostPair(doubleArray51, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair55 = new org.apache.commons.math.optimization.PointCostPair(doubleArray51, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair56 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray28, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 97.0d + "'", double27 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException0.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException0);
        java.lang.Throwable[] throwableArray4 = costException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray9);
        costException3.addSuppressed((java.lang.Throwable) costException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        java.lang.Class<?> wildcardClass14 = costException11.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        java.lang.Throwable[] throwableArray15 = convergenceException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray15);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        java.lang.Object[] objArray24 = costException23.getArguments();
        java.lang.Throwable[] throwableArray25 = costException23.getSuppressed();
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException23);
        convergenceException16.addSuppressed((java.lang.Throwable) costException26);
        java.lang.String str28 = convergenceException16.getPattern();
        java.lang.Object[] objArray29 = convergenceException16.getArguments();
        java.lang.Throwable[] throwableArray30 = convergenceException16.getSuppressed();
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray30);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str28, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray19);
        java.lang.Object[] objArray22 = costException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException23);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException24);
        java.lang.String str27 = convergenceException24.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str27, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1L), (double) 100L, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double[] doubleArray23 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 10.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (byte) 1);
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair37 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray23, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, 32.0d, (double) (byte) 1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray1 = notPositiveDefiniteMatrixException0.getArguments();
        java.lang.String str2 = notPositiveDefiniteMatrixException0.getPattern();
        java.lang.Object[] objArray3 = notPositiveDefiniteMatrixException0.getArguments();
        java.lang.Throwable[] throwableArray4 = notPositiveDefiniteMatrixException0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = notPositiveDefiniteMatrixException0.getSuppressed();
        java.lang.Object[] objArray6 = notPositiveDefiniteMatrixException0.getArguments();
        java.lang.String str7 = notPositiveDefiniteMatrixException0.toString();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "not positive definite matrix" + "'", str2, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str7, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        java.lang.Throwable[] throwableArray15 = convergenceException14.getSuppressed();
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException28);
        java.lang.String str31 = convergenceException28.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str31, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) (-1.0f), (double) (byte) 10, (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 0.0d, (double) 100L, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 100.0f, (byte) -1, 1.0d, 52.0d, 0L };
        double[][] doubleArray14 = new double[][] { doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, 1.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = notPositiveDefiniteMatrixException10.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray11, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str20 = convergenceException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray8, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str20, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException14);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        java.lang.String str21 = convergenceException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException22);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str21, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray15);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException24, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("", objArray28);
        java.lang.Class<?> wildcardClass31 = costException30.getClass();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException43);
        java.lang.Object[] objArray45 = new java.lang.Object[] { wildcardClass31, 'a', (-1.0f), "not positive definite matrix", costException43 };
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Object[] objArray47 = convergenceException46.getArguments();
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray56);
        java.lang.Object[] objArray59 = costException58.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("hi!", objArray59);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray59, throwable61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray47, (java.lang.Throwable) convergenceException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray15, (java.lang.Throwable) convergenceException62);
        java.lang.String str65 = convergenceException64.getPattern();
        java.lang.Throwable[] throwableArray66 = convergenceException64.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException67);
        java.lang.Throwable[] throwableArray69 = convergenceException68.getSuppressed();
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray69);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str65, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray14 = notPositiveDefiniteMatrixException12.getArguments();
        costException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray16 = costException8.getArguments();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray28);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray16, (java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.String str40 = costException38.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str40, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray19);
        java.lang.Object[] objArray22 = costException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException23);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = costException38.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray40);
        java.lang.Throwable[] throwableArray42 = convergenceException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = convergenceException41.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException48 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException48.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException49);
        java.lang.String str53 = notPositiveDefiniteMatrixException49.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException54 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray55 = new java.lang.Object[] { notPositiveDefiniteMatrixException49, notPositiveDefiniteMatrixException54 };
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray55, throwable56);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException58 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException58.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray55, (java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) convergenceException65);
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException65);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "not positive definite matrix" + "'", str53, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray12 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException27);
        java.lang.Throwable[] throwableArray29 = costException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        costException16.addSuppressed((java.lang.Throwable) convergenceException30);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException30);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 0.0d, 35.0d, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[][] doubleArray11 = new double[][] { doubleArray8, doubleArray9, doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair12 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) 0.0f, (double) (short) -1, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10.0f, 1.0f };
        double[] doubleArray13 = new double[] { 10.0f, 1.0f };
        double[] doubleArray16 = new double[] { 10.0f, 1.0f };
        double[] doubleArray19 = new double[] { 10.0f, 1.0f };
        double[] doubleArray22 = new double[] { 10.0f, 1.0f };
        double[][] doubleArray23 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair26 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray23, (int) (short) -1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, 32.0d, (double) 100, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = convergenceException42.getArguments();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray44, throwable46);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException50 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException49.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException50);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException50);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        convergenceException48.addSuppressed((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray57 = convergenceException53.getArguments();
        java.lang.Throwable throwable58 = null;
        // The following exception was thrown during execution in test generation
        try {
            convergenceException53.addSuppressed(throwable58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray13);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = costException25.getArguments();
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("", objArray38);
        java.lang.Class<?> wildcardClass41 = costException40.getClass();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException53);
        java.lang.Object[] objArray55 = new java.lang.Object[] { wildcardClass41, 'a', (-1.0f), "not positive definite matrix", costException53 };
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException56);
        costException25.addSuppressed((java.lang.Throwable) convergenceException57);
        java.lang.Object[] objArray59 = costException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray59);
        java.lang.String str62 = convergenceException61.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) convergenceException61);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException(throwable67);
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException68, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray72);
        java.lang.String str74 = convergenceException73.getPattern();
        java.lang.String str75 = convergenceException73.getPattern();
        java.lang.Object[] objArray76 = convergenceException73.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray13, (java.lang.Throwable) convergenceException73);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException(throwable78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException79);
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException80);
        convergenceException73.addSuppressed((java.lang.Throwable) costException81);
        java.lang.Class<?> wildcardClass83 = costException81.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str62, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.String str11 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray7, (java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray13 = convergenceException10.getSuppressed();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray13);
        java.lang.String str15 = costException14.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str15, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        java.lang.String str17 = costException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray20);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        java.lang.Object[] objArray35 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException34);
        java.lang.Object[] objArray37 = costException34.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray37, (java.lang.Throwable) convergenceException42);
        costException21.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Throwable[] throwableArray46 = convergenceException42.getSuppressed();
        java.lang.Class<?> wildcardClass47 = throwableArray46.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = costException27.getArguments();
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException36, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("", objArray40);
        java.lang.Class<?> wildcardClass43 = costException42.getClass();
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { wildcardClass43, 'a', (-1.0f), "not positive definite matrix", costException55 };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("hi!", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        costException27.addSuppressed((java.lang.Throwable) convergenceException59);
        java.lang.Object[] objArray61 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray61);
        java.lang.String str64 = convergenceException63.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) convergenceException63);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException70, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray74);
        java.lang.String str76 = convergenceException75.getPattern();
        java.lang.String str77 = convergenceException75.getPattern();
        java.lang.Object[] objArray78 = convergenceException75.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15, (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray15);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str64, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray17);
        java.lang.String str31 = costException30.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str31, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.String str11 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray7, (java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        java.lang.Object[] objArray26 = costException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray26);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray35);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray26, (java.lang.Throwable) costException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException40);
        convergenceException12.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Throwable[] throwableArray44 = convergenceException42.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException46 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException46.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Object[] objArray49 = notPositiveDefiniteMatrixException47.getArguments();
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray49, (java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray72 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("hi!", objArray72);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray72);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException74);
        convergenceException65.addSuppressed((java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray44, (java.lang.Throwable) convergenceException65);
        java.lang.String str78 = convergenceException65.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str78, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray10);
        java.lang.String str12 = costException11.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException16 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException15.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException18);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        java.lang.Object[] objArray30 = costException29.getArguments();
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray30);
        convergenceException19.addSuppressed((java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException31);
        costException11.addSuppressed((java.lang.Throwable) convergenceException33);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray44);
        java.lang.Object[] objArray47 = costException46.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray50 = convergenceException48.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException51);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException(throwable59);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException60, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        java.lang.String str66 = convergenceException65.getPattern();
        java.lang.String str67 = convergenceException65.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException65);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException68);
        java.lang.String str70 = costException69.getPattern();
        java.lang.Throwable[] throwableArray71 = costException69.getSuppressed();
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray71);
        java.lang.Object[] objArray81 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("hi!", objArray81);
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray81);
        java.lang.Object[] objArray84 = costException83.getArguments();
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray84);
        java.lang.String str86 = costException85.getPattern();
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException85);
        org.apache.commons.math.optimization.CostException costException88 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray71, (java.lang.Throwable) convergenceException89);
        convergenceException51.addSuppressed((java.lang.Throwable) convergenceException90);
        convergenceException33.addSuppressed((java.lang.Throwable) convergenceException90);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str12, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str86, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) (short) 100, 0.0d, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) 'a', 0.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 100L);
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 'a');
        double[] doubleArray28 = pointCostPair27.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray16, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Object[] objArray9 = costException8.getArguments();
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException8);
        java.lang.Object[] objArray12 = costException8.getArguments();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        java.lang.Throwable[] throwableArray23 = costException22.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray12, (java.lang.Throwable) convergenceException25);
        java.lang.Object[] objArray28 = convergenceException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray28);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 1.0f);
        java.lang.Class<?> wildcardClass11 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, 32.0d, (double) (short) 10, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray8, (int) (byte) 10, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, 35.0d, (-1.0d), (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        double double9 = pointCostPair8.getCost();
        double[] doubleArray10 = pointCostPair8.getPoint();
        double[] doubleArray11 = pointCostPair8.getPoint();
        double double12 = pointCostPair8.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 97.0d + "'", double9 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 97.0d + "'", double12 == 97.0d);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        convergenceException14.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray11, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        java.lang.Object[] objArray35 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException36);
        java.lang.Throwable[] throwableArray38 = convergenceException36.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        java.lang.Throwable[] throwableArray40 = convergenceException39.getSuppressed();
        java.lang.Object[] objArray41 = convergenceException39.getArguments();
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException42);
        convergenceException20.addSuppressed((java.lang.Throwable) convergenceException44);
        java.lang.Throwable[] throwableArray46 = convergenceException44.getSuppressed();
        java.lang.Throwable[] throwableArray47 = convergenceException44.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray6 = notPositiveDefiniteMatrixException5.getArguments();
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException(throwable10);
        java.lang.Throwable[] throwableArray12 = convergenceException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray12);
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) convergenceException15);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        java.lang.Class<?> wildcardClass22 = convergenceException20.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray18, throwable19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray18);
        java.lang.String str22 = costException21.getPattern();
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException21);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException(throwable31);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException32, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("", objArray36);
        java.lang.Class<?> wildcardClass39 = costException38.getClass();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("hi!", objArray49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException51);
        java.lang.Object[] objArray53 = new java.lang.Object[] { wildcardClass39, 'a', (-1.0f), "not positive definite matrix", costException51 };
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = convergenceException54.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("hi!", objArray65);
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray65);
        java.lang.Object[] objArray68 = costException67.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("hi!", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException69);
        java.lang.Throwable[] throwableArray71 = convergenceException69.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray55, (java.lang.Throwable) convergenceException69);
        java.lang.Object[] objArray83 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("hi!", objArray83);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray83);
        java.lang.Object[] objArray86 = costException85.getArguments();
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray86);
        java.lang.String str88 = costException87.getPattern();
        org.apache.commons.math.optimization.CostException costException89 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException87);
        org.apache.commons.math.optimization.CostException costException90 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException87);
        java.lang.Object[] objArray91 = costException90.getArguments();
        org.apache.commons.math.optimization.CostException costException92 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: ", objArray91);
        convergenceException69.addSuppressed((java.lang.Throwable) costException92);
        java.lang.Object[] objArray94 = costException92.getArguments();
        costException21.addSuppressed((java.lang.Throwable) costException92);
        java.lang.String str96 = costException21.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!" + "'", str22, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str88, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!" + "'", str96, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray7 = convergenceException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray7);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException(throwable12);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException23);
        java.lang.Object[] objArray25 = costException23.getArguments();
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray33);
        java.lang.Object[] objArray36 = costException35.getArguments();
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray36);
        java.lang.String str38 = costException37.getPattern();
        costException23.addSuppressed((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException23);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException23);
        costException14.addSuppressed((java.lang.Throwable) costException23);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        java.lang.String str44 = costException43.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) costException43);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException45);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str38, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14);
        java.lang.Object[] objArray16 = costException15.getArguments();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) (byte) 100, (double) (short) -1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1), (short) -1, '#', (-1L), '4' };
        double[] doubleArray19 = new double[] { (-1), (short) -1, '#', (-1L), '4' };
        double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) 10L);
        double double13 = pointCostPair12.getCost();
        double double14 = pointCostPair12.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        java.lang.String str25 = convergenceException24.getPattern();
        java.lang.String str26 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray29 = convergenceException27.getArguments();
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("", objArray29);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException45);
        java.lang.Throwable[] throwableArray47 = convergenceException45.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException45);
        java.lang.Throwable[] throwableArray50 = convergenceException45.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        java.lang.String str54 = convergenceException53.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray29, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException55);
        java.lang.Object[] objArray59 = convergenceException55.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str54, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, 0.0d, (double) 100.0f, (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray29, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException47);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray58);
        java.lang.Object[] objArray61 = costException60.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException60);
        java.lang.Throwable[] throwableArray63 = costException60.getSuppressed();
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray63);
        convergenceException47.addSuppressed((java.lang.Throwable) costException64);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException47);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray13);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException14);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException(throwable24);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException25, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray29);
        java.lang.Class<?> wildcardClass32 = costException31.getClass();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException44);
        java.lang.Object[] objArray46 = new java.lang.Object[] { wildcardClass32, 'a', (-1.0f), "not positive definite matrix", costException44 };
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", objArray46);
        java.lang.Object[] objArray48 = convergenceException47.getArguments();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray57);
        java.lang.Object[] objArray60 = costException59.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", objArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray60, throwable62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray48, (java.lang.Throwable) convergenceException63);
        java.lang.Throwable[] throwableArray65 = convergenceException63.getSuppressed();
        java.lang.String str66 = convergenceException63.getPattern();
        costException14.addSuppressed((java.lang.Throwable) convergenceException63);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str66, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        double[] doubleArray3 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) 10.0f);
        double double10 = pointCostPair9.getCost();
        double[] doubleArray11 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 100.0, -1.0]");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) (byte) 0, (double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray15);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray15, (java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException29);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray32);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray38);
        java.lang.Object[] objArray41 = costException40.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray41);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException(throwable48);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException49, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray53);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException(throwable57);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException(throwable59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException60);
        convergenceException58.addSuppressed((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray53, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", objArray41, (java.lang.Throwable) convergenceException64);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException65);
        java.lang.Throwable[] throwableArray67 = convergenceException65.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException68);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, 0.0d, (double) (short) 0, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 100.0d, (double) (byte) 100, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), 0.0d, (-1.0d), (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException4);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = costException17.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = costException27.getArguments();
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException36, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("", objArray40);
        java.lang.Class<?> wildcardClass43 = costException42.getClass();
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { wildcardClass43, 'a', (-1.0f), "not positive definite matrix", costException55 };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("hi!", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        costException27.addSuppressed((java.lang.Throwable) convergenceException59);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException(throwable61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException63);
        convergenceException59.addSuppressed((java.lang.Throwable) costException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException66);
        costException8.addSuppressed((java.lang.Throwable) convergenceException66);
        java.lang.Throwable[] throwableArray70 = costException8.getSuppressed();
        java.lang.String str71 = costException8.getPattern();
        java.lang.String str72 = costException8.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.optimization.CostException" + "'", str71, "org.apache.commons.math.optimization.CostException");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException" + "'", str72, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, 32.0d, 32.0d, (double) (short) 100);
        java.lang.Class<?> wildcardClass5 = nelderMead4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (short) 10, (double) 100L, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, randomVectorGenerator8, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) (byte) 1, (double) (short) 10, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 100.0f, 0L, ' ', (short) 100, (-1), 97.0d };
        double[] doubleArray21 = new double[] { 100.0f, 0L, ' ', (short) 100, (-1), 97.0d };
        double[][] doubleArray22 = new double[][] { doubleArray14, doubleArray21 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 32.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 32.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 0L, (double) '#', (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1L), (double) 100L, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double double19 = pointCostPair18.getCost();
        double[] doubleArray20 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 100);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        double[] doubleArray32 = pointCostPair31.getPoint();
        double[] doubleArray33 = pointCostPair31.getPoint();
        double[] doubleArray34 = pointCostPair31.getPoint();
        double[] doubleArray35 = pointCostPair31.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 100.0f);
        double double38 = pointCostPair37.getCost();
        double double39 = pointCostPair37.getCost();
        double[] doubleArray40 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair47 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray23, doubleArray40, (int) (byte) 10, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) (byte) 100, 1.0d, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        java.lang.Object[] objArray5 = notPositiveDefiniteMatrixException3.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray5);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException7);
        java.lang.Throwable[] throwableArray9 = costException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) 1.0f, (double) 1.0f, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 97.0d);
        double double28 = pointCostPair27.getCost();
        double[] doubleArray29 = pointCostPair27.getPoint();
        double[] doubleArray35 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 10.0d);
        double[] doubleArray42 = pointCostPair41.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 10);
        double[] doubleArray45 = pointCostPair44.getPoint();
        double[] doubleArray46 = pointCostPair44.getPoint();
        double[] doubleArray47 = pointCostPair44.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair50 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray29, doubleArray47, (int) '4', (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 97.0d + "'", double28 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, 0.0d, 100.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) -1);
        double[] doubleArray30 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray24, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        java.lang.Object[] objArray16 = costException15.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray16, (java.lang.Throwable) costException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException(throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        convergenceException37.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException44 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException45 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException44.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException45);
        java.lang.Throwable[] throwableArray49 = notPositiveDefiniteMatrixException45.getSuppressed();
        convergenceException43.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException45);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException43);
        java.lang.Throwable[] throwableArray52 = convergenceException51.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray33, (java.lang.Throwable) convergenceException51);
        java.lang.Throwable[] throwableArray54 = convergenceException53.getSuppressed();
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray54);
        java.lang.String str57 = convergenceException56.toString();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException" + "'", str57, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable[] throwableArray9 = costException8.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        java.lang.Object[] objArray20 = costException18.getArguments();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException(throwable26);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException27, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("", objArray31);
        java.lang.Class<?> wildcardClass34 = costException33.getClass();
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException46);
        java.lang.Object[] objArray48 = new java.lang.Object[] { wildcardClass34, 'a', (-1.0f), "not positive definite matrix", costException46 };
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException49);
        costException18.addSuppressed((java.lang.Throwable) convergenceException50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException54);
        convergenceException50.addSuppressed((java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException57);
        java.lang.Class<?> wildcardClass59 = convergenceException58.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) 0, (double) 0.0f, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException0.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.Throwable[] throwableArray4 = costException3.getSuppressed();
        java.lang.Object[] objArray5 = costException3.getArguments();
        java.lang.Object[] objArray6 = costException3.getArguments();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.String str21 = convergenceException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray9, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        java.lang.String str25 = convergenceException23.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) 1.0f, (double) 10, (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double double13 = pointCostPair12.getCost();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray22 = new double[] { 1, (byte) 10, 1L, (short) -1, (-1L), 0.0d };
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (short) 100);
        double[] doubleArray25 = pointCostPair24.getPoint();
        double[] doubleArray26 = pointCostPair24.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray15, doubleArray26, 100, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0, 1.0, -1.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0, 1.0, -1.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 1.0, -1.0, -1.0, 0.0]");
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) 0, (double) (byte) 100, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) (short) 0, (double) 0.0f, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) ' ');
        double double20 = pointCostPair19.getCost();
        double[] doubleArray21 = pointCostPair19.getPoint();
        double[] doubleArray27 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        double[] doubleArray30 = pointCostPair29.getPoint();
        double[] doubleArray31 = pointCostPair29.getPoint();
        double[] doubleArray32 = pointCostPair29.getPoint();
        double[] doubleArray33 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) 100.0f);
        double double36 = pointCostPair35.getCost();
        double double37 = pointCostPair35.getCost();
        double[] doubleArray38 = pointCostPair35.getPoint();
        double[] doubleArray39 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray21, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException6);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException24);
        java.lang.String str26 = convergenceException24.getPattern();
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException24);
        java.lang.Throwable[] throwableArray28 = convergenceException24.getSuppressed();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException35, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        java.lang.String str42 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException43);
        java.lang.String str45 = costException44.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        java.lang.String str49 = convergenceException48.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray28, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException52 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException53 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException52.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException52);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException55);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException("hi!", objArray64);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray64);
        java.lang.Object[] objArray67 = costException66.getArguments();
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray67);
        convergenceException56.addSuppressed((java.lang.Throwable) costException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Object[]) throwableArray28, (java.lang.Throwable) costException68);
        java.lang.String str72 = convergenceException71.toString();
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str49, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str72, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) 'a', (double) 100.0f, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11, doubleArray12, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray14, (int) (byte) 1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) '4', (double) '4', (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 0.0d, (double) (byte) 1, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray8, (int) (byte) 10, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, 0.0d, (double) (-1.0f), (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 1.0d);
        double[] doubleArray25 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 52.0d);
        double[] doubleArray35 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 10.0d);
        double[] doubleArray38 = pointCostPair37.getPoint();
        double[] doubleArray39 = pointCostPair37.getPoint();
        double[] doubleArray40 = pointCostPair37.getPoint();
        double[] doubleArray41 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100.0f);
        double double44 = pointCostPair43.getCost();
        double double45 = pointCostPair43.getCost();
        double[] doubleArray46 = pointCostPair43.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) 'a');
        double[] doubleArray49 = pointCostPair48.getPoint();
        double double50 = pointCostPair48.getCost();
        double[] doubleArray51 = pointCostPair48.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray25, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 97.0d + "'", double50 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException16);
        java.lang.Throwable[] throwableArray18 = costException16.getSuppressed();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.String str21 = convergenceException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray23 = convergenceException20.getSuppressed();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) convergenceException20);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray15);
        java.lang.Object[] objArray21 = convergenceException20.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException22 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29);
        notPositiveDefiniteMatrixException22.addSuppressed((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray21, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray21, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray21);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException45, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        java.lang.String str51 = convergenceException50.getPattern();
        java.lang.String str52 = convergenceException50.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        java.lang.String str55 = costException54.getPattern();
        java.lang.Throwable[] throwableArray56 = costException54.getSuppressed();
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray56);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray56, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray21, (java.lang.Throwable) convergenceException60);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException(throwable65);
        java.lang.Throwable[] throwableArray67 = convergenceException66.getSuppressed();
        java.lang.Object[] objArray74 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException("hi!", objArray74);
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException76);
        java.lang.Object[] objArray78 = costException76.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray67, (java.lang.Throwable) costException76);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray21, (java.lang.Throwable) costException76);
        java.lang.String str81 = costException76.toString();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str81, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.String str15 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException14);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        java.lang.String str32 = convergenceException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray44);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray44);
        java.lang.Object[] objArray50 = convergenceException49.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException51 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray58);
        notPositiveDefiniteMatrixException51.addSuppressed((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray50, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException60);
        java.lang.Throwable[] throwableArray64 = convergenceException63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = convergenceException63.getSuppressed();
        java.lang.Object[] objArray66 = convergenceException63.getArguments();
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException(throwable71);
        java.lang.Throwable[] throwableArray73 = convergenceException72.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray73, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("hi!", objArray83);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray73, (java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray73);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray66, (java.lang.Throwable) convergenceException88);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) 100, (double) 'a', (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) '#');
        double double20 = pointCostPair19.getCost();
        double[] doubleArray21 = pointCostPair19.getPoint();
        double[] doubleArray27 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) (short) 0);
        double double32 = pointCostPair31.getCost();
        double double33 = pointCostPair31.getCost();
        double[] doubleArray34 = pointCostPair31.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (-1));
        double double43 = pointCostPair42.getCost();
        double[] doubleArray44 = pointCostPair42.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray21, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        java.lang.Throwable[] throwableArray14 = costException12.getSuppressed();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.String str17 = convergenceException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray14);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray26);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = costException28.getArguments();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException37, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("", objArray41);
        java.lang.Class<?> wildcardClass44 = costException43.getClass();
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException56);
        java.lang.Object[] objArray58 = new java.lang.Object[] { wildcardClass44, 'a', (-1.0f), "not positive definite matrix", costException56 };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        costException28.addSuppressed((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) convergenceException62);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException64 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) notPositiveDefiniteMatrixException64);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray14);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray14, throwable68);
        java.lang.Throwable[] throwableArray70 = convergenceException69.getSuppressed();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, (double) (-1L), (double) 0L, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("", objArray10);
        java.lang.Class<?> wildcardClass13 = costException12.getClass();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = new java.lang.Object[] { wildcardClass13, 'a', (-1.0f), "not positive definite matrix", costException25 };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        java.lang.String str34 = convergenceException32.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        java.lang.String str36 = convergenceException32.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str36, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) 1, (double) 0, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double double25 = pointCostPair24.getCost();
        double[] doubleArray26 = pointCostPair24.getPoint();
        double[] doubleArray27 = pointCostPair24.getPoint();
        double[] doubleArray28 = pointCostPair24.getPoint();
        double[] doubleArray35 = new double[] { 1, (byte) 10, 1L, (short) -1, (-1L), 0.0d };
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 100);
        double double38 = pointCostPair37.getCost();
        double double39 = pointCostPair37.getCost();
        double[] doubleArray40 = pointCostPair37.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray28, doubleArray40, (int) (short) 0, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0, 1.0, -1.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0, 1.0, -1.0, -1.0, 0.0]");
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) ' ', (double) 'a', (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double double13 = pointCostPair12.getCost();
        double[] doubleArray14 = pointCostPair12.getPoint();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        double double17 = pointCostPair12.getCost();
        double[] doubleArray18 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) '4');
        double[] doubleArray24 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 10.0f);
        double double31 = pointCostPair30.getCost();
        double[] doubleArray32 = pointCostPair30.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray18, doubleArray32, (int) (byte) 1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[97.0, 100.0, -1.0]");
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) 'a', (double) 100L, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { '4', 0.0d, (short) 1, 52.0d };
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) 10);
        double[] doubleArray15 = pointCostPair14.getPoint();
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, 0.0d);
        double[] doubleArray21 = pointCostPair20.getPoint();
        double double22 = pointCostPair20.getCost();
        double[] doubleArray23 = pointCostPair20.getPoint();
        double[] doubleArray24 = pointCostPair20.getPoint();
        double[] doubleArray25 = pointCostPair20.getPoint();
        double[] doubleArray26 = pointCostPair20.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray15, doubleArray26, 10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, 0.0, 1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray7 = convergenceException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) costException27);
        java.lang.String str30 = convergenceException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray9, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray35 = convergenceException31.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str30, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        java.lang.String str12 = costException10.getPattern();
        java.lang.Throwable[] throwableArray13 = costException10.getSuppressed();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("Convergence failed", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException16);
        java.lang.String str18 = convergenceException17.toString();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str18, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        convergenceException4.addSuppressed((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException12.getSuppressed();
        convergenceException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException18);
        java.lang.Throwable[] throwableArray21 = convergenceException18.getSuppressed();
        java.lang.Class<?> wildcardClass22 = convergenceException18.getClass();
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, 0.0d, (double) (byte) 100, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) 100, 52.0d, 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 10.0f);
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 100);
        double double40 = pointCostPair39.getCost();
        double[] doubleArray41 = pointCostPair39.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray42);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray48 = convergenceException47.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray56);
        notPositiveDefiniteMatrixException49.addSuppressed((java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray48, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray31, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray31);
        java.lang.String str63 = convergenceException62.getPattern();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str63, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(throwable53);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException54, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException(throwable68);
        java.lang.String str70 = convergenceException69.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray66, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray58, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException72);
        java.lang.Object[] objArray74 = convergenceException72.getArguments();
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException72);
        java.lang.Throwable[] throwableArray76 = costException75.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray76);
        java.lang.Throwable[] throwableArray78 = convergenceException77.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        java.lang.String str23 = convergenceException21.getPattern();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        java.lang.String str25 = convergenceException21.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException21);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str23, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str25, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray29);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) ' ', (double) '4', (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 0.0d);
        double[] doubleArray21 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 10.0d);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray25 = pointCostPair23.getPoint();
        double[] doubleArray26 = pointCostPair23.getPoint();
        double[] doubleArray27 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) 100.0f);
        double double30 = pointCostPair29.getCost();
        double double31 = pointCostPair29.getCost();
        double[] doubleArray32 = pointCostPair29.getPoint();
        double[] doubleArray33 = pointCostPair29.getPoint();
        double[] doubleArray34 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) -1);
        double[] doubleArray37 = pointCostPair36.getPoint();
        double[] doubleArray38 = pointCostPair36.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray13, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException12);
        java.lang.String str16 = costException12.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str16, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 0.0d, (double) 100.0f, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', (byte) -1, 1.0d, (byte) 100, 0, (byte) 1 };
        double[] doubleArray21 = new double[] { '#', (byte) -1, 1.0d, (byte) 100, 0, (byte) 1 };
        double[] doubleArray28 = new double[] { '#', (byte) -1, 1.0d, (byte) 100, 0, (byte) 1 };
        double[][] doubleArray29 = new double[][] { doubleArray14, doubleArray21, doubleArray28 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair30 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, -1.0, 1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, -1.0, 1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, -1.0, 1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) (byte) 100, 1.0d, (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 97.0d, 100, 1.0f, 0.0f };
        double[] doubleArray17 = new double[] { 97.0d, 100, 1.0f, 0.0f };
        double[] doubleArray22 = new double[] { 97.0d, 100, 1.0f, 0.0f };
        double[] doubleArray27 = new double[] { 97.0d, 100, 1.0f, 0.0f };
        double[][] doubleArray28 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray28, (int) '#', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException7 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray5);
        java.lang.Throwable[] throwableArray35 = convergenceException34.getSuppressed();
        java.lang.Class<?> wildcardClass36 = throwableArray35.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) '4', 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 'a');
        double[] doubleArray33 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) (short) 0);
        double double38 = pointCostPair37.getCost();
        double double39 = pointCostPair37.getCost();
        double[] doubleArray40 = pointCostPair37.getPoint();
        double[] doubleArray41 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (-1.0d));
        double double44 = pointCostPair43.getCost();
        double[] doubleArray45 = pointCostPair43.getPoint();
        double[] doubleArray46 = pointCostPair43.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair49 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray19, doubleArray46, (int) (byte) 0, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray14 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        java.lang.Throwable[] throwableArray17 = costException16.getSuppressed();
        java.lang.String str18 = costException16.toString();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str18, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0.0f, (double) 1, 0.0d, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 97.0d, 1L };
        double[][] doubleArray11 = new double[][] { doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray11, 0, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray14);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        java.lang.Object[] objArray31 = costException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray33 = costException30.getArguments();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Object[] objArray40 = convergenceException38.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray40);
        java.lang.String str42 = convergenceException41.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.optimization.CostException" + "'", str42, "org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), 1.0d, (double) (short) 10, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (short) 1, 100.0d };
        double[] doubleArray13 = new double[] { (short) 1, 100.0d };
        double[] doubleArray16 = new double[] { (short) 1, 100.0d };
        double[] doubleArray19 = new double[] { (short) 1, 100.0d };
        double[] doubleArray22 = new double[] { (short) 1, 100.0d };
        double[] doubleArray25 = new double[] { (short) 1, 100.0d };
        double[][] doubleArray26 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        convergenceException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Throwable[] throwableArray17 = convergenceException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray17);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(throwable28);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException29, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("", objArray33);
        java.lang.Class<?> wildcardClass36 = costException35.getClass();
        java.lang.Object[] objArray46 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("hi!", objArray46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException48);
        java.lang.Object[] objArray50 = new java.lang.Object[] { wildcardClass36, 'a', (-1.0f), "not positive definite matrix", costException48 };
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("hi!", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        java.lang.Object[] objArray54 = convergenceException52.getArguments();
        java.lang.Object[] objArray61 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = costException62.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("hi!", objArray71);
        java.lang.Object[] objArray73 = costException72.getArguments();
        java.lang.Throwable[] throwableArray74 = costException72.getSuppressed();
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray54, (java.lang.Throwable) convergenceException76);
        java.lang.Throwable[] throwableArray78 = convergenceException76.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException76);
        costException19.addSuppressed((java.lang.Throwable) convergenceException76);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        java.lang.Throwable[] throwableArray16 = costException14.getSuppressed();
        java.lang.Object[] objArray17 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray17);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str13, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, 1.0d, 52.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 0);
        double[] doubleArray26 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 10.0d);
        double[] doubleArray29 = pointCostPair28.getPoint();
        double[] doubleArray30 = pointCostPair28.getPoint();
        double[] doubleArray31 = pointCostPair28.getPoint();
        double[] doubleArray32 = pointCostPair28.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 100.0f);
        double double35 = pointCostPair34.getCost();
        double double36 = pointCostPair34.getCost();
        double[] doubleArray37 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 'a');
        double double40 = pointCostPair39.getCost();
        double[] doubleArray41 = pointCostPair39.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 0L);
        double[] doubleArray44 = pointCostPair43.getPoint();
        double double45 = pointCostPair43.getCost();
        double[] doubleArray46 = pointCostPair43.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair49 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray8, doubleArray46, 1, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 97.0d + "'", double40 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (short) 0, (double) '#', (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 35.0d);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double[] doubleArray28 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (short) 0);
        double double33 = pointCostPair32.getCost();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        double[] doubleArray36 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (-1.0d));
        double[] doubleArray39 = pointCostPair38.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray22, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.Object[] objArray7 = notPositiveDefiniteMatrixException5.getArguments();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray7, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException36);
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray7, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray7);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray53);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray53);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray53);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException(throwable64);
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException65, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("", objArray69);
        java.lang.Class<?> wildcardClass72 = costException71.getClass();
        java.lang.Object[] objArray82 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException("hi!", objArray82);
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException84);
        java.lang.Object[] objArray86 = new java.lang.Object[] { wildcardClass72, 'a', (-1.0f), "not positive definite matrix", costException84 };
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("hi!", objArray86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException87);
        org.apache.commons.math.optimization.CostException costException89 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray53, (java.lang.Throwable) convergenceException88);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray7, (java.lang.Throwable) convergenceException90);
        java.lang.String str92 = convergenceException91.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str92, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, 0.0d, 10.0d, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 10);
        double[] doubleArray23 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 100.0f);
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 100);
        double[] doubleArray31 = pointCostPair30.getPoint();
        double[] doubleArray32 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair37 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray23, doubleArray32, (int) (byte) 10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (byte) 0, (double) 0.0f, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray38);
        java.lang.Object[] objArray41 = costException40.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray41);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException(throwable48);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException49, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray53);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException(throwable57);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException(throwable59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException60);
        convergenceException58.addSuppressed((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray53, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", objArray41, (java.lang.Throwable) convergenceException64);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException65);
        java.lang.Throwable[] throwableArray67 = convergenceException65.getSuppressed();
        java.lang.String str68 = convergenceException65.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException65);
        java.lang.String str70 = convergenceException69.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str70, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        double[] doubleArray10 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, 10.0d);
        double double13 = pointCostPair12.getCost();
        java.lang.Object[] objArray15 = new java.lang.Object[] { pointCostPair12, (-1) };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray15);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        java.lang.Object[] objArray30 = costException29.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException32);
        java.lang.Throwable[] throwableArray34 = convergenceException33.getSuppressed();
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        java.lang.String str38 = convergenceException36.getPattern();
        java.lang.Object[] objArray39 = convergenceException36.getArguments();
        java.lang.Throwable[] throwableArray40 = convergenceException36.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray34, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray15, (java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray48 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("hi!", objArray48);
        java.lang.Object[] objArray50 = costException49.getArguments();
        java.lang.Throwable[] throwableArray51 = costException49.getSuppressed();
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException49);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException("hi!", objArray64);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray64);
        java.lang.Object[] objArray67 = costException66.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("hi!", objArray67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException68);
        java.lang.Throwable[] throwableArray70 = convergenceException68.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException68);
        java.lang.Throwable[] throwableArray73 = convergenceException68.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException75);
        java.lang.String str77 = convergenceException76.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray73, (java.lang.Throwable) convergenceException76);
        costException49.addSuppressed((java.lang.Throwable) convergenceException78);
        java.lang.String str80 = convergenceException78.getPattern();
        java.lang.String str81 = convergenceException78.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str77, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        double double21 = pointCostPair20.getCost();
        double[] doubleArray22 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 100.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 100);
        double[] doubleArray27 = pointCostPair26.getPoint();
        java.lang.Class<?> wildcardClass28 = pointCostPair26.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        convergenceException4.addSuppressed((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray11 = convergenceException9.getArguments();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException23);
        java.lang.Object[] objArray26 = costException23.getArguments();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray26);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray11, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        java.lang.Object[] objArray12 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("hi!", objArray20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        java.lang.Object[] objArray24 = costException22.getArguments();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException(throwable30);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException31, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("", objArray35);
        java.lang.Class<?> wildcardClass38 = costException37.getClass();
        java.lang.Object[] objArray48 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("hi!", objArray48);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException50);
        java.lang.Object[] objArray52 = new java.lang.Object[] { wildcardClass38, 'a', (-1.0f), "not positive definite matrix", costException50 };
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        costException22.addSuppressed((java.lang.Throwable) convergenceException54);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException(throwable56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException58);
        convergenceException54.addSuppressed((java.lang.Throwable) costException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException59);
        java.lang.Object[] objArray62 = convergenceException61.getArguments();
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException61);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) (short) 0, (double) '#', (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 1.0f, 10L };
        double[] doubleArray13 = new double[] { 1.0f, 10L };
        double[] doubleArray16 = new double[] { 1.0f, 10L };
        double[] doubleArray19 = new double[] { 1.0f, 10L };
        double[] doubleArray22 = new double[] { 1.0f, 10L };
        double[][] doubleArray23 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair26 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray23, (int) (byte) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 10, 0.0d, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 0);
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 0);
        double double36 = pointCostPair35.getCost();
        double double37 = pointCostPair35.getCost();
        double[] doubleArray38 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair47 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray19, doubleArray38, (int) 'a', (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        convergenceException17.addSuppressed((java.lang.Throwable) convergenceException24);
        java.lang.Class<?> wildcardClass26 = convergenceException24.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.String str12 = convergenceException11.getPattern();
        java.lang.String str13 = convergenceException11.getPattern();
        java.lang.Throwable[] throwableArray14 = convergenceException11.getSuppressed();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException17.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        java.lang.String str22 = notPositiveDefiniteMatrixException18.getPattern();
        java.lang.Throwable[] throwableArray23 = notPositiveDefiniteMatrixException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        java.lang.Throwable[] throwableArray25 = notPositiveDefiniteMatrixException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException40);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException43);
        java.lang.Object[] objArray45 = convergenceException43.getArguments();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException(throwable47);
        java.lang.Throwable[] throwableArray49 = convergenceException48.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) convergenceException50);
        convergenceException43.addSuppressed((java.lang.Throwable) convergenceException51);
        java.lang.Object[] objArray53 = convergenceException43.getArguments();
        convergenceException26.addSuppressed((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) convergenceException43);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "not positive definite matrix" + "'", str22, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str27, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 0, (double) 1.0f, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) (byte) -1, (double) 100, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { (-1L), 10.0f, (short) 0, 10L };
        double[] doubleArray17 = new double[] { (-1L), 10.0f, (short) 0, 10L };
        double[] doubleArray22 = new double[] { (-1L), 10.0f, (short) 0, 10L };
        double[] doubleArray27 = new double[] { (-1L), 10.0f, (short) 0, 10L };
        double[][] doubleArray28 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException13.getSuppressed();
        convergenceException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException11);
        java.lang.Throwable[] throwableArray20 = convergenceException19.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException21);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        java.lang.Throwable[] throwableArray36 = costException34.getSuppressed();
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException(throwable37);
        java.lang.String str39 = convergenceException38.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) convergenceException38);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException45, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        java.lang.String str51 = convergenceException50.getPattern();
        java.lang.String str52 = convergenceException50.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray55 = convergenceException53.getArguments();
        java.lang.String str56 = convergenceException53.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("hi!", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray68);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray68);
        java.lang.Object[] objArray74 = convergenceException73.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException75 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray82 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException("hi!", objArray82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", objArray82);
        notPositiveDefiniteMatrixException75.addSuppressed((java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray74, (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray36);
        convergenceException23.addSuppressed((java.lang.Throwable) convergenceException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.optimization.CostException costException91 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException23);
        java.lang.String str92 = costException91.toString();
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str92, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) 10L, (double) (byte) -1, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = convergenceException13.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException20.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        java.lang.String str25 = notPositiveDefiniteMatrixException21.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException26 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray27 = new java.lang.Object[] { notPositiveDefiniteMatrixException21, notPositiveDefiniteMatrixException26 };
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray27, throwable28);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException30 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException31 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException30.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) convergenceException37);
        java.lang.Class<?> wildcardClass39 = convergenceException38.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) 0, 100.0d, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        java.lang.Object[] objArray27 = costException26.getArguments();
        java.lang.Throwable[] throwableArray28 = costException26.getSuppressed();
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray32 = costException29.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("Convergence failed", objArray32);
        java.lang.String str34 = convergenceException33.toString();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str34, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException14);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("", objArray20);
        java.lang.Throwable[] throwableArray22 = costException21.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) 0L, (double) 10, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 0.0d);
        double[] doubleArray25 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (short) 0);
        double double30 = pointCostPair29.getCost();
        double double31 = pointCostPair29.getCost();
        double[] doubleArray32 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray11, doubleArray32, 0, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray21);
        java.lang.String str23 = costException22.getPattern();
        costException8.addSuppressed((java.lang.Throwable) costException22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray37);
        java.lang.Object[] objArray40 = costException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException42);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Throwable[] throwableArray45 = convergenceException27.getSuppressed();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str23, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("", objArray26);
        java.lang.Class<?> wildcardClass29 = costException28.getClass();
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException41);
        java.lang.Object[] objArray43 = new java.lang.Object[] { wildcardClass29, 'a', (-1.0f), "not positive definite matrix", costException41 };
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        java.lang.Object[] objArray45 = convergenceException44.getArguments();
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray56);
        java.lang.Object[] objArray62 = convergenceException61.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException63 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray70 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("hi!", objArray70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray70);
        notPositiveDefiniteMatrixException63.addSuppressed((java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray62, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray45, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray11, (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException76);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray14 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray14);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        java.lang.String str23 = notPositiveDefiniteMatrixException19.getPattern();
        java.lang.Throwable[] throwableArray24 = notPositiveDefiniteMatrixException19.getSuppressed();
        java.lang.Object[] objArray31 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("hi!", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) costException33);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException33);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Throwable[] throwableArray41 = convergenceException38.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "not positive definite matrix" + "'", str23, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException9);
        java.lang.String str12 = convergenceException11.getPattern();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("hi!", objArray24);
        java.lang.Object[] objArray26 = convergenceException25.getArguments();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException27);
        convergenceException11.addSuppressed((java.lang.Throwable) costException27);
        java.lang.Throwable[] throwableArray30 = costException27.getSuppressed();
        java.lang.String str31 = costException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str12, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException13);
        java.lang.Object[] objArray16 = costException13.getArguments();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException28 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException29 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException28.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException29);
        convergenceException27.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException29);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException37);
        convergenceException34.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray16, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray16);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray10);
        java.lang.String str12 = convergenceException11.getPattern();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException14);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        java.lang.String str23 = notPositiveDefiniteMatrixException19.getPattern();
        java.lang.Throwable[] throwableArray24 = notPositiveDefiniteMatrixException19.getSuppressed();
        java.lang.Object[] objArray31 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("hi!", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) costException33);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", (java.lang.Object[]) throwableArray24);
        costException14.addSuppressed((java.lang.Throwable) costException36);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str12, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "not positive definite matrix" + "'", str23, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 0L, (double) 100, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100L);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray25 = pointCostPair23.getPoint();
        double[] doubleArray26 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 1);
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 0.0d);
        double[] doubleArray34 = pointCostPair33.getPoint();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        double[] doubleArray37 = pointCostPair33.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray26, doubleArray37, 0, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6);
        java.lang.String str11 = convergenceException10.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str11, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) (byte) 1, (double) 0.0f, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        double[] doubleArray25 = pointCostPair21.getPoint();
        double[] doubleArray26 = pointCostPair21.getPoint();
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double double36 = pointCostPair34.getCost();
        double double37 = pointCostPair34.getCost();
        double[] doubleArray38 = pointCostPair34.getPoint();
        double double39 = pointCostPair34.getCost();
        double double40 = pointCostPair34.getCost();
        double double41 = pointCostPair34.getCost();
        double double42 = pointCostPair34.getCost();
        double[] doubleArray43 = pointCostPair34.getPoint();
        double double44 = pointCostPair34.getCost();
        double[] doubleArray45 = pointCostPair34.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair48 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray26, doubleArray45, (-1), (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, 32.0d, (double) (byte) 0, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) ' ', (double) 'a', (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { (short) 0, (-1), 100, '#' };
        double[] doubleArray17 = new double[] { (short) 0, (-1), 100, '#' };
        double[] doubleArray22 = new double[] { (short) 0, (-1), 100, '#' };
        double[] doubleArray27 = new double[] { (short) 0, (-1), 100, '#' };
        double[][] doubleArray28 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray28, (int) ' ', (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 100.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 100.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 100.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 100.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException15);
        java.lang.Object[] objArray17 = convergenceException15.getArguments();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Throwable[] throwableArray21 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) convergenceException22);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray25 = convergenceException15.getArguments();
        java.lang.Object[] objArray26 = convergenceException15.getArguments();
        java.lang.String str27 = convergenceException15.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str27, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (-1L));
        double double20 = pointCostPair19.getCost();
        double[] doubleArray21 = pointCostPair19.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (-1L), (double) (byte) 100, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray8, (int) (byte) 10, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) 'a', (double) '4', (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) (-1.0f), (double) 'a', (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 100L, (short) 10, (short) 100 };
        double[] doubleArray15 = new double[] { 100L, (short) 10, (short) 100 };
        double[] doubleArray19 = new double[] { 100L, (short) 10, (short) 100 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray15, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException16);
        java.lang.Object[] objArray18 = costException16.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray18);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = convergenceException42.getArguments();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray44, throwable46);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException(throwable50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        convergenceException51.addSuppressed((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException51);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException51);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray44, (java.lang.Throwable) convergenceException51);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException51);
        java.lang.Object[] objArray60 = convergenceException51.getArguments();
        java.lang.String str61 = convergenceException51.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        java.lang.Throwable[] throwableArray9 = costException7.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Object[] objArray13 = notPositiveDefiniteMatrixException11.getArguments();
        costException7.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Object[] objArray15 = notPositiveDefiniteMatrixException11.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, 0.0d, (double) 'a', (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (-1L));
        double[] doubleArray18 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) 0);
        double[] doubleArray21 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 100);
        double[] doubleArray33 = pointCostPair32.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray21, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) (byte) 1, (double) 0.0f, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException18);
        java.lang.Throwable[] throwableArray21 = convergenceException20.getSuppressed();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        java.lang.Object[] objArray24 = costException22.getArguments();
        java.lang.Object[] objArray25 = costException22.getArguments();
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        java.lang.Object[] objArray38 = costException36.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray38);
        java.lang.Throwable[] throwableArray40 = convergenceException39.getSuppressed();
        java.lang.String str41 = convergenceException39.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray25, (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException39);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str41, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) '4', 0.0d, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) (-1.0f));
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (byte) 100);
        double double23 = pointCostPair22.getCost();
        double double24 = pointCostPair22.getCost();
        double[] doubleArray25 = pointCostPair22.getPoint();
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        double[] doubleArray34 = pointCostPair33.getPoint();
        double[] doubleArray35 = pointCostPair33.getPoint();
        double[] doubleArray36 = pointCostPair33.getPoint();
        double[] doubleArray37 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, 1.0d);
        double[] doubleArray42 = pointCostPair41.getPoint();
        double[] doubleArray43 = pointCostPair41.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray43, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray25, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) 100, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) (short) -1, (double) 0L, (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 10.0f, (byte) 1, 1 };
        double[] doubleArray15 = new double[] { 10.0f, (byte) 1, 1 };
        double[] doubleArray19 = new double[] { 10.0f, (byte) 1, 1 };
        double[] doubleArray23 = new double[] { 10.0f, (byte) 1, 1 };
        double[] doubleArray27 = new double[] { 10.0f, (byte) 1, 1 };
        double[] doubleArray31 = new double[] { 10.0f, (byte) 1, 1 };
        double[][] doubleArray32 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray32, 0, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(35.0d, (double) '4', (double) 10, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        java.lang.Throwable[] throwableArray39 = costException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray29, (java.lang.Throwable) costException37);
        java.lang.Throwable[] throwableArray41 = convergenceException40.getSuppressed();
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray41);
        java.lang.Throwable[] throwableArray43 = costException42.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (byte) 100, (double) ' ', (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 10);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = pointCostPair22.getPoint();
        double[] doubleArray31 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 10);
        double[] doubleArray36 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) 10.0f);
        double double39 = pointCostPair38.getCost();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray24, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, 97.0d, (double) 1.0f, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 52.0d, 0, 1.0d, 97.0d };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 1.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException32.getArguments();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray36 = costException35.getArguments();
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray45);
        java.lang.Object[] objArray48 = costException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray36, (java.lang.Throwable) convergenceException49);
        java.lang.Object[] objArray52 = convergenceException49.getArguments();
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray52);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException55 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException56 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException55.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException56);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException56);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        java.lang.Object[] objArray61 = convergenceException60.getArguments();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException(throwable65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException66);
        java.lang.String str68 = convergenceException66.getPattern();
        java.lang.Object[] objArray69 = convergenceException66.getArguments();
        java.lang.Throwable[] throwableArray70 = convergenceException66.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray70);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException(throwable76);
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException77, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("", objArray81);
        java.lang.String str83 = convergenceException82.getPattern();
        java.lang.String str84 = convergenceException82.getPattern();
        java.lang.Object[] objArray85 = convergenceException82.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray70, (java.lang.Throwable) convergenceException82);
        convergenceException60.addSuppressed((java.lang.Throwable) convergenceException82);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException82);
        java.lang.String str89 = convergenceException82.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray52, (java.lang.Throwable) convergenceException82);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException82);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.String str5 = convergenceException3.getPattern();
        java.lang.Object[] objArray6 = convergenceException3.getArguments();
        java.lang.String str7 = convergenceException3.getPattern();
        java.lang.Throwable[] throwableArray8 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray8);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("hi!", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException26);
        java.lang.Throwable[] throwableArray28 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException30);
        java.lang.String str32 = convergenceException30.getPattern();
        convergenceException9.addSuppressed((java.lang.Throwable) convergenceException30);
        java.lang.Throwable[] throwableArray34 = convergenceException9.getSuppressed();
        java.lang.Object[] objArray35 = convergenceException9.getArguments();
        java.lang.Object[] objArray36 = convergenceException9.getArguments();
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray36);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str32, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) 10L, 0.0d, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 10);
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray24, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: ");
        java.lang.Object[] objArray3 = convergenceException2.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: Convergence failed", objArray3);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, 0.0d, (double) 0.0f, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 100.0d);
        double[] doubleArray23 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 10.0d);
        double[] doubleArray30 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 52.0d);
        double double33 = pointCostPair32.getCost();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray13, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray12);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray27, throwable29);
        java.lang.String str31 = convergenceException30.getPattern();
        java.lang.Throwable[] throwableArray32 = convergenceException30.getSuppressed();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Throwable[] throwableArray37 = convergenceException36.getSuppressed();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException38);
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException39);
        costException15.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str31, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        java.lang.Object[] objArray1 = null;
        java.lang.Throwable throwable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray1, throwable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray30, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException49);
        java.lang.Throwable[] throwableArray51 = convergenceException49.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("", objArray25);
        java.lang.Class<?> wildcardClass28 = costException27.getClass();
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException40);
        java.lang.Object[] objArray42 = new java.lang.Object[] { wildcardClass28, 'a', (-1.0f), "not positive definite matrix", costException40 };
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = convergenceException44.getArguments();
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = costException54.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("hi!", objArray63);
        java.lang.Object[] objArray65 = costException64.getArguments();
        java.lang.Throwable[] throwableArray66 = costException64.getSuppressed();
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException64);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException64);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray46, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException69);
        convergenceException12.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.String str72 = convergenceException70.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException70);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str72, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 32.0d, 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[][] doubleArray10 = new double[][] { doubleArray8, doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1.0f, (double) 100, (double) (byte) 10, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray14);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        java.lang.Object[] objArray31 = costException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray33 = costException30.getArguments();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException38);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        java.lang.String str17 = costException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException16);
        java.lang.Throwable[] throwableArray19 = costException16.getSuppressed();
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray19);
        java.lang.Object[] objArray22 = costException21.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) '4', (double) 1L, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) 1L, (double) ' ', (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = convergenceException14.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.String str19 = convergenceException14.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str19, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = convergenceException14.getSuppressed();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        java.lang.Object[] objArray30 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray16);
        java.lang.Throwable[] throwableArray33 = costException32.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray33);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException12);
        java.lang.Throwable[] throwableArray14 = costException13.getSuppressed();
        java.lang.Object[] objArray15 = costException13.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) 1L, 1.0d, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 0L, '4', (-1), 10.0d, (-1L) };
        double[] doubleArray19 = new double[] { 0L, '4', (-1), 10.0d, (-1L) };
        double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 52.0, -1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 52.0, -1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray11);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray14);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException(throwable24);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException25, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray29);
        java.lang.Class<?> wildcardClass32 = costException31.getClass();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException44);
        java.lang.Object[] objArray46 = new java.lang.Object[] { wildcardClass32, 'a', (-1.0f), "not positive definite matrix", costException44 };
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray50 = convergenceException48.getArguments();
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray52 = costException51.getArguments();
        java.lang.Object[] objArray61 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("hi!", objArray61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray61);
        java.lang.Object[] objArray64 = costException63.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", objArray64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray52, (java.lang.Throwable) convergenceException65);
        java.lang.Object[] objArray68 = convergenceException65.getArguments();
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException69);
        java.lang.Throwable[] throwableArray71 = costException69.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) costException69);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException75 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException76 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException75.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException76);
        org.apache.commons.math.optimization.CostException costException78 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException76);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException76);
        java.lang.String str80 = notPositiveDefiniteMatrixException76.getPattern();
        java.lang.Throwable[] throwableArray81 = notPositiveDefiniteMatrixException76.getSuppressed();
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("Convergence failed", (java.lang.Object[]) throwableArray81);
        java.lang.Object[] objArray83 = costException82.getArguments();
        java.lang.Object[] objArray91 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException92 = new org.apache.commons.math.optimization.CostException("hi!", objArray91);
        org.apache.commons.math.optimization.CostException costException93 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray91);
        java.lang.Object[] objArray94 = costException93.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray94);
        java.lang.String str96 = convergenceException95.getPattern();
        org.apache.commons.math.optimization.CostException costException97 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException95);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray83, (java.lang.Throwable) convergenceException95);
        convergenceException72.addSuppressed((java.lang.Throwable) convergenceException95);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "not positive definite matrix" + "'", str80, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str96, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100L, 0.0d, (double) 0, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 100.0f, 1L, (byte) 10, (byte) 10, (short) 100, 32.0d };
        double[] doubleArray21 = new double[] { 100.0f, 1L, (byte) 10, (byte) 10, (short) 100, 32.0d };
        double[][] doubleArray22 = new double[][] { doubleArray14, doubleArray21 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair25 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray22, 100, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 1.0, 10.0, 10.0, 100.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 1.0, 10.0, 10.0, 100.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) 100.0f, (double) (short) -1, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) '4', (double) '4', (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray14 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 0);
        double double19 = pointCostPair18.getCost();
        double double20 = pointCostPair18.getCost();
        double[] doubleArray21 = pointCostPair18.getPoint();
        double[] doubleArray22 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray8, doubleArray22, (int) (byte) 100, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) (byte) 10, (double) 10L, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 1);
        double double24 = pointCostPair23.getCost();
        double[] doubleArray25 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 10);
        double[] doubleArray31 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (-1L));
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 97.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray25, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException12);
        java.lang.Throwable[] throwableArray16 = convergenceException15.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray21 = notPositiveDefiniteMatrixException20.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray21);
        java.lang.Object[] objArray23 = costException22.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) convergenceException24);
        java.lang.Class<?> wildcardClass26 = convergenceException24.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, 35.0d, (double) 'a', (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        java.lang.Throwable[] throwableArray17 = convergenceException15.getSuppressed();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray17);
        java.lang.String str21 = costException20.getPattern();
        java.lang.String str22 = costException20.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str21, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str22, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException7);
        java.lang.Throwable[] throwableArray9 = convergenceException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException13.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        java.lang.String str18 = notPositiveDefiniteMatrixException14.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray20 = new java.lang.Object[] { notPositiveDefiniteMatrixException14, notPositiveDefiniteMatrixException19 };
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException22);
        java.lang.Class<?> wildcardClass26 = throwableArray9.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "not positive definite matrix" + "'", str18, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 0.0d, (double) (byte) 1, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', 97.0d, (double) 10, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (-1.0d), (double) (byte) 0, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) (byte) 1, (double) 0.0f, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) ' ');
        double[] doubleArray22 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 0.0f);
        double[] doubleArray31 = pointCostPair30.getPoint();
        double[] doubleArray32 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray8, doubleArray32, (int) (short) 1, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException4);
        java.lang.String str6 = convergenceException4.getPattern();
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException13, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray22 = convergenceException20.getSuppressed();
        convergenceException4.addSuppressed((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException25 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException24.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException28);
        convergenceException20.addSuppressed((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException29);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str6, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) 1.0f, (double) 100, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray18 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 32.0d);
        double[] doubleArray29 = pointCostPair28.getPoint();
        double[] doubleArray30 = pointCostPair28.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray8, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, 0.0d, (double) (short) 0, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10L, (double) 100L, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray12, (int) '4', (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43, throwable45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray31);
        java.lang.Throwable[] throwableArray49 = convergenceException48.getSuppressed();
        java.lang.Object[] objArray50 = convergenceException48.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        double[] doubleArray3 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) 1.0f);
        double[] doubleArray8 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 0);
        double double11 = pointCostPair10.getCost();
        double[] doubleArray12 = pointCostPair10.getPoint();
        java.lang.Class<?> wildcardClass13 = pointCostPair10.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        java.lang.String str22 = convergenceException20.getPattern();
        java.lang.Object[] objArray23 = convergenceException20.getArguments();
        java.lang.Throwable[] throwableArray24 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException30);
        convergenceException27.addSuppressed((java.lang.Throwable) costException30);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        java.lang.String str14 = convergenceException13.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException13);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.String str26 = convergenceException25.getPattern();
        java.lang.String str27 = convergenceException25.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray30 = convergenceException28.getArguments();
        java.lang.String str31 = convergenceException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray43);
        java.lang.Object[] objArray49 = convergenceException48.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException50 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray57);
        notPositiveDefiniteMatrixException50.addSuppressed((java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray49, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException62);
        java.lang.String str64 = costException63.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str64, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0.0f, (double) 1L, (double) 1.0f, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) (byte) 10);
        double[] doubleArray27 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        double[] doubleArray34 = pointCostPair33.getPoint();
        double double35 = pointCostPair33.getCost();
        double double36 = pointCostPair33.getCost();
        double[] doubleArray37 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray17, doubleArray37, (int) (byte) 10, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException1);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException11);
        convergenceException1.addSuppressed((java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        java.lang.String str17 = convergenceException1.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) (short) -1, (double) (byte) 100, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) ' ');
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 52.0d);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = pointCostPair22.getPoint();
        double[] doubleArray30 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double[] doubleArray34 = pointCostPair32.getPoint();
        double[] doubleArray35 = pointCostPair32.getPoint();
        double[] doubleArray36 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) 100.0f);
        double double39 = pointCostPair38.getCost();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray24, doubleArray41, 0, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        java.lang.Throwable[] throwableArray15 = costException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray15);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = costException20.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.String str25 = notPositiveDefiniteMatrixException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray23);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray34);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        java.lang.Object[] objArray38 = costException36.getArguments();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException45, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("", objArray49);
        java.lang.Class<?> wildcardClass52 = costException51.getClass();
        java.lang.Object[] objArray62 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("hi!", objArray62);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException64);
        java.lang.Object[] objArray66 = new java.lang.Object[] { wildcardClass52, 'a', (-1.0f), "not positive definite matrix", costException64 };
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("hi!", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException67);
        costException36.addSuppressed((java.lang.Throwable) convergenceException68);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException(throwable70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException71);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException72);
        convergenceException68.addSuppressed((java.lang.Throwable) costException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException73);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) costException73);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException78);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException78);
        convergenceException76.addSuppressed((java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException78);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray8);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
        costException12.addSuppressed((java.lang.Throwable) convergenceException14);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (byte) 1, (double) (byte) 1, 35.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        double[] doubleArray29 = pointCostPair28.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 0);
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 32.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 10);
        double double45 = pointCostPair44.getCost();
        double double46 = pointCostPair44.getCost();
        double[] doubleArray47 = pointCostPair44.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair48 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray29, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (short) 10, 0.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        double[] doubleArray21 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 32.0d);
        double[] doubleArray34 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 10);
        double[] doubleArray39 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair48 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray21, doubleArray39, (-1), (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) ' ', (double) 10, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable[] throwableArray9 = costException8.getSuppressed();
        java.lang.String str10 = costException8.getPattern();
        java.lang.Throwable[] throwableArray11 = costException8.getSuppressed();
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray11);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) 100L, (double) 1, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 100.0f, 1.0d, 0L };
        double[] doubleArray15 = new double[] { 100.0f, 1.0d, 0L };
        double[] doubleArray19 = new double[] { 100.0f, 1.0d, 0L };
        double[] doubleArray23 = new double[] { 100.0f, 1.0d, 0L };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray24, (int) (byte) -1, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = costException27.getArguments();
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException36, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("", objArray40);
        java.lang.Class<?> wildcardClass43 = costException42.getClass();
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { wildcardClass43, 'a', (-1.0f), "not positive definite matrix", costException55 };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("hi!", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        costException27.addSuppressed((java.lang.Throwable) convergenceException59);
        java.lang.Object[] objArray61 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray61);
        java.lang.String str64 = convergenceException63.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) convergenceException63);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException70, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray74);
        java.lang.String str76 = convergenceException75.getPattern();
        java.lang.String str77 = convergenceException75.getPattern();
        java.lang.Object[] objArray78 = convergenceException75.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15, (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15);
        java.lang.Class<?> wildcardClass82 = objArray15.getClass();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str64, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (short) 100, (double) (byte) 100, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 0.0d);
        double[] doubleArray30 = pointCostPair29.getPoint();
        double double31 = pointCostPair29.getCost();
        double[] doubleArray32 = pointCostPair29.getPoint();
        double[] doubleArray33 = pointCostPair29.getPoint();
        double[] doubleArray34 = pointCostPair29.getPoint();
        double[] doubleArray35 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 32.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 100.0f);
        double[] doubleArray42 = pointCostPair41.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray24, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (double) (-1L), 1.0d, (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double double15 = pointCostPair12.getCost();
        double[] doubleArray16 = pointCostPair12.getPoint();
        double double17 = pointCostPair12.getCost();
        double[] doubleArray18 = pointCostPair12.getPoint();
        double[] doubleArray19 = pointCostPair12.getPoint();
        double[] doubleArray25 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 10.0d);
        double double28 = pointCostPair27.getCost();
        double[] doubleArray29 = pointCostPair27.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 1);
        double[] doubleArray34 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 10);
        double[] doubleArray37 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray19, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10L, (double) 1L, (double) 100, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (-1.0d));
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 0.0d);
        double[] doubleArray29 = pointCostPair28.getPoint();
        double double30 = pointCostPair28.getCost();
        double[] doubleArray31 = pointCostPair28.getPoint();
        double[] doubleArray32 = pointCostPair28.getPoint();
        double[] doubleArray33 = pointCostPair28.getPoint();
        double[] doubleArray34 = pointCostPair28.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 1);
        double[] doubleArray37 = pointCostPair36.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray23, doubleArray37, 10, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        java.lang.String str25 = convergenceException24.getPattern();
        java.lang.String str26 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray29 = convergenceException27.getArguments();
        java.lang.Throwable[] throwableArray30 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12, (java.lang.Throwable) convergenceException27);
        java.lang.Throwable[] throwableArray34 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException8);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.String str16 = notPositiveDefiniteMatrixException12.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray18 = new java.lang.Object[] { notPositiveDefiniteMatrixException12, notPositiveDefiniteMatrixException17 };
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        convergenceException9.addSuppressed((java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray23 = convergenceException20.getSuppressed();
        java.lang.String str24 = convergenceException20.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "not positive definite matrix" + "'", str16, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str24, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) 100, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        double[] doubleArray32 = pointCostPair31.getPoint();
        double[] doubleArray33 = pointCostPair31.getPoint();
        double[] doubleArray34 = pointCostPair31.getPoint();
        double[] doubleArray35 = pointCostPair31.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 100.0f);
        double double38 = pointCostPair37.getCost();
        double double39 = pointCostPair37.getCost();
        double[] doubleArray40 = pointCostPair37.getPoint();
        double double41 = pointCostPair37.getCost();
        double[] doubleArray42 = pointCostPair37.getPoint();
        double[] doubleArray43 = pointCostPair37.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray19, doubleArray43, (int) '4', 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = costException20.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.String str25 = notPositiveDefiniteMatrixException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        java.lang.String str28 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException27);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str28, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.String str16 = costException15.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) (-1.0f), (double) 100, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray8, (int) (byte) 100, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray12);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray24);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(throwable28);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException(throwable30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        convergenceException29.addSuppressed((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray24, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray12, (java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray37 = convergenceException35.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray37);
        java.lang.Object[] objArray39 = costException38.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27);
        notPositiveDefiniteMatrixException20.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray19, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray19);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        java.lang.Object[] objArray41 = costException40.getArguments();
        java.lang.Throwable[] throwableArray42 = costException40.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException40);
        java.lang.Object[] objArray44 = costException40.getArguments();
        convergenceException32.addSuppressed((java.lang.Throwable) costException40);
        java.lang.Object[] objArray46 = costException40.getArguments();
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray59);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("hi!", objArray71);
        java.lang.Object[] objArray73 = costException72.getArguments();
        java.lang.Throwable[] throwableArray74 = costException72.getSuppressed();
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray59, (java.lang.Throwable) costException75);
        java.lang.Throwable[] throwableArray77 = convergenceException76.getSuppressed();
        org.apache.commons.math.optimization.CostException costException78 = new org.apache.commons.math.optimization.CostException("hi!", (java.lang.Object[]) throwableArray77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray46, (java.lang.Throwable) costException78);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray46);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 52.0d, (double) (short) 0, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[] doubleArray17 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[] doubleArray22 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[] doubleArray27 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[] doubleArray32 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[] doubleArray37 = new double[] { 52.0d, (short) 0, 97.0d, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32, doubleArray37 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[52.0, 0.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException10, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray14);
        java.lang.Class<?> wildcardClass17 = costException16.getClass();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray31 = new java.lang.Object[] { wildcardClass17, 'a', (-1.0f), "not positive definite matrix", costException29 };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException48);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException(throwable54);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException55, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("hi!", objArray67);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        java.lang.String str71 = convergenceException70.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray67, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray59, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException73);
        java.lang.Object[] objArray75 = convergenceException73.getArguments();
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException73);
        java.lang.Throwable[] throwableArray77 = costException76.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray77);
        org.apache.commons.math.optimization.CostException costException79 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray77);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray4 = convergenceException2.getSuppressed();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException12, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray18);
        java.lang.Object[] objArray20 = costException19.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException19);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException22);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException22);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100, (double) (short) 1, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        java.lang.Object[] objArray1 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = costException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray1, (java.lang.Throwable) convergenceException19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray14 = costException13.getArguments();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        convergenceException20.addSuppressed((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException27 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException28 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException27.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException28);
        java.lang.Throwable[] throwableArray32 = notPositiveDefiniteMatrixException28.getSuppressed();
        convergenceException26.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException28);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray35 = convergenceException34.getArguments();
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException36);
        java.lang.String str38 = costException36.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray14, (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException36);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str38, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.String str6 = convergenceException4.getPattern();
        java.lang.Object[] objArray7 = convergenceException4.getArguments();
        java.lang.Throwable[] throwableArray8 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Object[]) throwableArray8);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray11);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        double[] doubleArray11 = pointCostPair10.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 35.0d);
        double double14 = pointCostPair13.getCost();
        double[] doubleArray15 = pointCostPair13.getPoint();
        double[] doubleArray16 = pointCostPair13.getPoint();
        java.lang.Class<?> wildcardClass17 = pointCostPair13.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException4);
        java.lang.Throwable[] throwableArray6 = costException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException4);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray12 = pointCostPair11.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, 52.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (-1.0f));
        double[] doubleArray17 = pointCostPair16.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        java.lang.String str13 = notPositiveDefiniteMatrixException9.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray15 = new java.lang.Object[] { notPositiveDefiniteMatrixException9, notPositiveDefiniteMatrixException14 };
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray15, throwable16);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray15, (java.lang.Throwable) notPositiveDefiniteMatrixException19);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray15, (java.lang.Throwable) convergenceException39);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15, throwable42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray15);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray59);
        java.lang.Object[] objArray62 = costException61.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("hi!", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray67 = convergenceException66.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray67);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException(throwable72);
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException73, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray77);
        java.lang.String str79 = convergenceException78.getPattern();
        java.lang.String str80 = convergenceException78.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException78);
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException81);
        java.lang.String str83 = costException82.getPattern();
        java.lang.Throwable[] throwableArray84 = costException82.getSuppressed();
        java.lang.String str85 = costException82.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray67, (java.lang.Throwable) costException82);
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray67);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray15, (java.lang.Throwable) costException87);
        java.lang.Object[] objArray89 = convergenceException88.getArguments();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "not positive definite matrix" + "'", str13, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        java.lang.String str12 = convergenceException9.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str12, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) 1, 32.0d, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) 1.0f, (double) 10L, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (-1L));
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (-1.0f));
        double double35 = pointCostPair34.getCost();
        double double36 = pointCostPair34.getCost();
        double[] doubleArray37 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (-1L));
        double[] doubleArray42 = pointCostPair41.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair47 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray13, doubleArray42, (int) (byte) 1, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 1L, (double) 1.0f, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { (short) 0, 0.0d, 100, 100 };
        double[] doubleArray17 = new double[] { (short) 0, 0.0d, 100, 100 };
        double[] doubleArray22 = new double[] { (short) 0, 0.0d, 100, 100 };
        double[] doubleArray27 = new double[] { (short) 0, 0.0d, 100, 100 };
        double[] doubleArray32 = new double[] { (short) 0, 0.0d, 100, 100 };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) (-1.0f), 32.0d, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[] doubleArray21 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[] doubleArray28 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[] doubleArray35 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[] doubleArray42 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[] doubleArray49 = new double[] { '4', ' ', (-1L), ' ', (byte) 10, 0L };
        double[][] doubleArray50 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[52.0, 32.0, -1.0, 32.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (-1.0f));
        java.lang.Class<?> wildcardClass23 = pointCostPair22.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, 32.0d, (double) 0.0f, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        double[] doubleArray23 = pointCostPair22.getPoint();
        double double24 = pointCostPair22.getCost();
        double[] doubleArray25 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 10.0d);
        double double32 = pointCostPair31.getCost();
        double[] doubleArray33 = pointCostPair31.getPoint();
        double[] doubleArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair37 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray33, doubleArray34, 1, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) 0, 35.0d, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException32.getArguments();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray36 = costException35.getArguments();
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray45);
        java.lang.Object[] objArray48 = costException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray36, (java.lang.Throwable) convergenceException49);
        java.lang.Object[] objArray52 = convergenceException49.getArguments();
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException53);
        java.lang.Object[] objArray55 = convergenceException54.getArguments();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, 0.0d, (double) 1L, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 32.0d, '4', (short) 0 };
        double[] doubleArray15 = new double[] { 32.0d, '4', (short) 0 };
        double[] doubleArray19 = new double[] { 32.0d, '4', (short) 0 };
        double[] doubleArray23 = new double[] { 32.0d, '4', (short) 0 };
        double[] doubleArray27 = new double[] { 32.0d, '4', (short) 0 };
        double[] doubleArray31 = new double[] { 32.0d, '4', (short) 0 };
        double[][] doubleArray32 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray32, (int) (byte) 1, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[32.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        java.lang.Throwable[] throwableArray19 = costException17.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException20.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        java.lang.Object[] objArray23 = notPositiveDefiniteMatrixException21.getArguments();
        costException17.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        java.lang.Object[] objArray25 = costException17.getArguments();
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray37);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray37);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray25, (java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray7, (java.lang.Throwable) convergenceException45);
        java.lang.Object[] objArray48 = convergenceException45.getArguments();
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray48);
        java.lang.Throwable[] throwableArray50 = costException49.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        java.lang.Throwable[] throwableArray10 = notPositiveDefiniteMatrixException5.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) costException19);
        java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed();
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException23);
        java.lang.Object[] objArray25 = costException23.getArguments();
        java.lang.Object[] objArray26 = costException23.getArguments();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = costException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray39);
        java.lang.Throwable[] throwableArray41 = convergenceException40.getSuppressed();
        java.lang.String str42 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray26, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: Convergence failed", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException44);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str42, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) (byte) 10, (double) (byte) 0, (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (short) -1, 100.0d };
        double[] doubleArray13 = new double[] { (short) -1, 100.0d };
        double[] doubleArray16 = new double[] { (short) -1, 100.0d };
        double[] doubleArray19 = new double[] { (short) -1, 100.0d };
        double[] doubleArray22 = new double[] { (short) -1, 100.0d };
        double[][] doubleArray23 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair24 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException12);
        java.lang.Object[] objArray14 = costException12.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        convergenceException17.addSuppressed((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray14, (java.lang.Throwable) convergenceException23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14, throwable25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, 10.0d, (double) (byte) 1, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 52.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 100);
        double[] doubleArray30 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double[] doubleArray34 = pointCostPair32.getPoint();
        double[] doubleArray35 = pointCostPair32.getPoint();
        double[] doubleArray36 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) 100.0f);
        double double39 = pointCostPair38.getCost();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair50 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray20, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) (short) -1, (double) (short) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray8, (int) ' ', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double double8 = pointCostPair7.getCost();
        double[] doubleArray9 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) '#');
        double[] doubleArray14 = pointCostPair13.getPoint();
        double double15 = pointCostPair13.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = notPositiveDefiniteMatrixException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.String str15 = notPositiveDefiniteMatrixException11.getPattern();
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.String str28 = convergenceException27.getPattern();
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("hi!", objArray47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException49);
        convergenceException38.addSuppressed((java.lang.Throwable) convergenceException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException54);
        java.lang.Object[] objArray56 = convergenceException55.getArguments();
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException55);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException5);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        java.lang.Object[] objArray17 = costException16.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        convergenceException6.addSuppressed((java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException18);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        java.lang.Object[] objArray35 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException34);
        java.lang.Object[] objArray37 = costException34.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray37, (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray47 = convergenceException42.getArguments();
        costException18.addSuppressed((java.lang.Throwable) convergenceException42);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray14 = convergenceException12.getArguments();
        java.lang.Class<?> wildcardClass15 = objArray14.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = notPositiveDefiniteMatrixException10.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray11, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str20 = convergenceException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray8, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        java.lang.String str23 = costException22.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str20, "org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str23, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray8 = convergenceException6.getSuppressed();
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        java.lang.Object[] objArray17 = costException16.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException16);
        java.lang.String str19 = convergenceException18.getPattern();
        java.lang.Throwable[] throwableArray20 = convergenceException18.getSuppressed();
        java.lang.String str21 = convergenceException18.getPattern();
        java.lang.Throwable[] throwableArray22 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        java.lang.Throwable[] throwableArray34 = costException33.getSuppressed();
        java.lang.String str35 = costException33.getPattern();
        java.lang.Throwable[] throwableArray36 = costException33.getSuppressed();
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException37);
        java.lang.Throwable[] throwableArray39 = costException37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = costException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray40);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray50);
        java.lang.Object[] objArray53 = costException52.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", objArray53);
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray53, throwable55);
        java.lang.String str57 = convergenceException56.getPattern();
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray66);
        java.lang.Object[] objArray69 = costException68.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("hi!", objArray69);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray69, throwable71);
        convergenceException56.addSuppressed((java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) convergenceException74);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str19, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str21, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str57, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 0.0d, (double) (byte) 1, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 0L, (byte) 1, (short) 100, 1.0d, (byte) 100 };
        double[][] doubleArray14 = new double[][] { doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0, 100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.String str11 = convergenceException10.getPattern();
        java.lang.String str12 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        java.lang.Object[] objArray26 = costException24.getArguments();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException(throwable32);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException33, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("", objArray37);
        java.lang.Class<?> wildcardClass40 = costException39.getClass();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException52);
        java.lang.Object[] objArray54 = new java.lang.Object[] { wildcardClass40, 'a', (-1.0f), "not positive definite matrix", costException52 };
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("hi!", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        costException24.addSuppressed((java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray58 = convergenceException56.getArguments();
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray58);
        costException14.addSuppressed((java.lang.Throwable) costException59);
        java.lang.Object[] objArray61 = costException14.getArguments();
        java.lang.Throwable[] throwableArray62 = costException14.getSuppressed();
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray62);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray62);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) 100.0f, (double) (short) -1, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double[] doubleArray14 = pointCostPair12.getPoint();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 100L);
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 0.0d);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double double24 = pointCostPair22.getCost();
        double[] doubleArray25 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (-1.0f));
        double[] doubleArray30 = pointCostPair29.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray15, doubleArray30, (int) (byte) 10, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray19 = new java.lang.Object[] { notPositiveDefiniteMatrixException13, notPositiveDefiniteMatrixException18 };
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray24 = convergenceException21.getSuppressed();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException30 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException31 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException30.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        java.lang.String str35 = notPositiveDefiniteMatrixException31.getPattern();
        java.lang.Throwable[] throwableArray36 = notPositiveDefiniteMatrixException31.getSuppressed();
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) costException45);
        java.lang.Throwable[] throwableArray48 = costException45.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.String str50 = notPositiveDefiniteMatrixException49.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray48, (java.lang.Throwable) notPositiveDefiniteMatrixException49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray48);
        java.lang.Object[] objArray61 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = costException62.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray48, (java.lang.Throwable) costException66);
        java.lang.Object[] objArray68 = convergenceException67.getArguments();
        java.lang.String str69 = convergenceException67.getPattern();
        java.lang.Object[] objArray70 = convergenceException67.getArguments();
        costException25.addSuppressed((java.lang.Throwable) convergenceException67);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "not positive definite matrix" + "'", str35, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "not positive definite matrix" + "'", str50, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str69, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) ' ', 0.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        double[] doubleArray17 = pointCostPair16.getPoint();
        double[] doubleArray18 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (short) 10);
        double[] doubleArray26 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 10.0d);
        double[] doubleArray29 = pointCostPair28.getPoint();
        double[] doubleArray30 = pointCostPair28.getPoint();
        double[] doubleArray31 = pointCostPair28.getPoint();
        double[] doubleArray32 = pointCostPair28.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 100.0f);
        double double35 = pointCostPair34.getCost();
        double double36 = pointCostPair34.getCost();
        double[] doubleArray37 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 'a');
        double[] doubleArray40 = pointCostPair39.getPoint();
        double double41 = pointCostPair39.getCost();
        double[] doubleArray42 = pointCostPair39.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray18, doubleArray42, (int) '4', (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 97.0d + "'", double41 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", throwable1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable1);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray13);
        java.lang.String str15 = convergenceException14.getPattern();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.Object[] objArray17 = convergenceException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray19 = convergenceException14.getSuppressed();
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray19);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        java.lang.Object[] objArray31 = costException30.getArguments();
        java.lang.Throwable[] throwableArray32 = costException30.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException30);
        java.lang.Object[] objArray34 = costException30.getArguments();
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = costException44.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray34, (java.lang.Throwable) convergenceException47);
        java.lang.Object[] objArray50 = convergenceException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) convergenceException52);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str15, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException15);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray27);
        convergenceException16.addSuppressed((java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = convergenceException16.getArguments();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException35, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        java.lang.String str42 = convergenceException40.getPattern();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException(throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        convergenceException45.addSuppressed((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        convergenceException40.addSuppressed((java.lang.Throwable) convergenceException51);
        java.lang.Throwable[] throwableArray53 = convergenceException40.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray30, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException54);
        java.lang.Throwable[] throwableArray56 = convergenceException55.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 1.0f, (double) (byte) 100, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[][] doubleArray9 = new double[][] { doubleArray8 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair12 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray9, 10, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) (byte) 10, 52.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) '#');
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) -1);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double[] doubleArray34 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray19, doubleArray34, (int) '#', (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) (byte) 10, (double) 10, (double) (-1.0f));
        java.lang.Class<?> wildcardClass5 = nelderMead4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (double) 'a', (double) 100.0f, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 10);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        double double34 = pointCostPair33.getCost();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        double[] doubleArray37 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (-1.0d));
        double double40 = pointCostPair39.getCost();
        double[] doubleArray41 = pointCostPair39.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray23, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) (byte) 0, (double) (byte) 0, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) (byte) 1, 0.0d, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 1);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 100.0f);
        double double45 = pointCostPair44.getCost();
        double double46 = pointCostPair44.getCost();
        double[] doubleArray47 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray47, (double) 'a');
        double[] doubleArray50 = pointCostPair49.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair52 = new org.apache.commons.math.optimization.PointCostPair(doubleArray50, 0.0d);
        double[] doubleArray53 = pointCostPair52.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair56 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray24, doubleArray53, (int) ' ', (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26);
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray18);
        java.lang.Throwable[] throwableArray33 = convergenceException32.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100.0f, (double) 0, (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (short) 100, (double) 1.0f, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        double[] doubleArray34 = pointCostPair33.getPoint();
        double double35 = pointCostPair33.getCost();
        double double36 = pointCostPair33.getCost();
        double[] doubleArray37 = pointCostPair33.getPoint();
        double double38 = pointCostPair33.getCost();
        double double39 = pointCostPair33.getCost();
        double double40 = pointCostPair33.getCost();
        double double41 = pointCostPair33.getCost();
        double[] doubleArray42 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray19, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException14);
        java.lang.Object[] objArray17 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray17);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.String str23 = convergenceException22.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray17, (java.lang.Throwable) convergenceException22);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray36);
        java.lang.Object[] objArray39 = costException38.getArguments();
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray39);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException45 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray46 = notPositiveDefiniteMatrixException45.getArguments();
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException47);
        java.lang.Object[] objArray49 = convergenceException48.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray51 = convergenceException50.getArguments();
        java.lang.Throwable[] throwableArray52 = convergenceException50.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray39, (java.lang.Throwable) convergenceException50);
        java.lang.Throwable[] throwableArray54 = convergenceException53.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray17, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException9);
        java.lang.String str11 = costException10.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.optimization.CostException: " + "'", str11, "org.apache.commons.math.optimization.CostException: ");
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray4 = notPositiveDefiniteMatrixException3.getArguments();
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray4);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray25 = convergenceException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray4, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException31);
        java.lang.String str33 = costException31.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Throwable) costException31);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException34);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "not positive definite matrix" + "'", str33, "not positive definite matrix");
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, (double) (-1L), (double) 0L, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair13 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException10, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray14);
        java.lang.Class<?> wildcardClass17 = costException16.getClass();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray31 = new java.lang.Object[] { wildcardClass17, 'a', (-1.0f), "not positive definite matrix", costException29 };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        java.lang.Throwable[] throwableArray51 = convergenceException50.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: ", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException52);
        java.lang.String str54 = convergenceException53.toString();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str54, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("", objArray10);
        java.lang.Class<?> wildcardClass13 = costException12.getClass();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = new java.lang.Object[] { wildcardClass13, 'a', (-1.0f), "not positive definite matrix", costException25 };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray33 = convergenceException29.getArguments();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Class<?> wildcardClass35 = convergenceException29.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        java.lang.String str7 = notPositiveDefiniteMatrixException3.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = new java.lang.Object[] { notPositiveDefiniteMatrixException3, notPositiveDefiniteMatrixException8 };
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray9, throwable10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "not positive definite matrix" + "'", str7, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException7 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException35);
        java.lang.String str40 = convergenceException39.getPattern();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str40, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.String str15 = convergenceException14.getPattern();
        java.lang.String str16 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray18);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException22 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray23 = notPositiveDefiniteMatrixException22.getArguments();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray23);
        java.lang.Object[] objArray25 = costException24.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray18);
        java.lang.Throwable throwable39 = null;
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException(throwable39);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException40, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("", objArray44);
        java.lang.Class<?> wildcardClass47 = costException46.getClass();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException59);
        java.lang.Object[] objArray61 = new java.lang.Object[] { wildcardClass47, 'a', (-1.0f), "not positive definite matrix", costException59 };
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("hi!", objArray61);
        java.lang.Object[] objArray63 = convergenceException62.getArguments();
        java.lang.Object[] objArray72 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("hi!", objArray72);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray72);
        java.lang.Object[] objArray75 = costException74.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("hi!", objArray75);
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray75, throwable77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray63, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray63);
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray63);
        java.lang.Object[] objArray91 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException92 = new org.apache.commons.math.optimization.CostException("hi!", objArray91);
        org.apache.commons.math.optimization.CostException costException93 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray91);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("", objArray91);
        org.apache.commons.math.optimization.CostException costException95 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray91);
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray91);
        org.apache.commons.math.ConvergenceException convergenceException97 = new org.apache.commons.math.ConvergenceException("Convergence failed", objArray63, (java.lang.Throwable) convergenceException96);
        org.apache.commons.math.optimization.CostException costException98 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray63);
        org.apache.commons.math.ConvergenceException convergenceException99 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) costException98);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("", objArray24);
        java.lang.Class<?> wildcardClass27 = costException26.getClass();
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException39);
        java.lang.Object[] objArray41 = new java.lang.Object[] { wildcardClass27, 'a', (-1.0f), "not positive definite matrix", costException39 };
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        costException11.addSuppressed((java.lang.Throwable) convergenceException43);
        java.lang.Object[] objArray45 = convergenceException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException(throwable47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException(throwable47);
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException58);
        java.lang.Object[] objArray60 = costException58.getArguments();
        java.lang.Object[] objArray68 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("hi!", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray68);
        java.lang.Object[] objArray71 = costException70.getArguments();
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray71);
        java.lang.String str73 = costException72.getPattern();
        costException58.addSuppressed((java.lang.Throwable) costException72);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException58);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException58);
        costException49.addSuppressed((java.lang.Throwable) costException58);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray45, (java.lang.Throwable) costException58);
        java.lang.Throwable[] throwableArray79 = costException58.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray79);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str73, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 0.0d, (double) (byte) 1, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        double[] doubleArray3 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) -1);
        java.lang.Class<?> wildcardClass8 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (-1L), (double) 1.0f, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException10);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        java.lang.Object[] objArray25 = costException24.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", objArray25);
        java.lang.Object[] objArray27 = convergenceException26.getArguments();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException28);
        convergenceException12.addSuppressed((java.lang.Throwable) costException28);
        java.lang.Throwable[] throwableArray31 = costException28.getSuppressed();
        java.lang.String str32 = costException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException28);
        java.lang.Throwable[] throwableArray34 = convergenceException33.getSuppressed();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray34);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str13, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '#', (double) (short) -1, (double) 0.0f, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray20 = convergenceException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException18);
        java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(throwable28);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException29, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("", objArray33);
        java.lang.Class<?> wildcardClass36 = costException35.getClass();
        java.lang.Object[] objArray46 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("hi!", objArray46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException48);
        java.lang.Object[] objArray50 = new java.lang.Object[] { wildcardClass36, 'a', (-1.0f), "not positive definite matrix", costException48 };
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("hi!", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        java.lang.Object[] objArray54 = convergenceException52.getArguments();
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        java.lang.Object[] objArray56 = costException55.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) costException55);
        java.lang.String str58 = convergenceException57.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException57);
        java.lang.String str60 = convergenceException59.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str58, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str60, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) (byte) 1, (double) 0.0f, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100L);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray30 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        double double36 = pointCostPair32.getCost();
        double[] doubleArray37 = pointCostPair32.getPoint();
        double[] doubleArray38 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray24, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray16 = new java.lang.Object[] { notPositiveDefiniteMatrixException10, notPositiveDefiniteMatrixException15 };
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray16, throwable17);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) notPositiveDefiniteMatrixException20);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray33);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray16, (java.lang.Throwable) convergenceException40);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray16, throwable43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray16);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray60);
        java.lang.Object[] objArray63 = costException62.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("hi!", objArray63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException65);
        java.lang.Object[] objArray68 = convergenceException67.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray68);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException(throwable73);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException74, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray78);
        java.lang.String str80 = convergenceException79.getPattern();
        java.lang.String str81 = convergenceException79.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException79);
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException82);
        java.lang.String str84 = costException83.getPattern();
        java.lang.Throwable[] throwableArray85 = costException83.getSuppressed();
        java.lang.String str86 = costException83.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray68, (java.lang.Throwable) costException83);
        org.apache.commons.math.optimization.CostException costException88 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray16, (java.lang.Throwable) costException88);
        org.apache.commons.math.optimization.CostException costException90 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double double8 = pointCostPair7.getCost();
        double[] doubleArray9 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (short) 1);
        double[] doubleArray14 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double[] doubleArray17 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) (short) -1);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable[] throwableArray14 = notPositiveDefiniteMatrixException10.getSuppressed();
        convergenceException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException10.getSuppressed();
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 10, 100.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        double[] doubleArray21 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 0);
        double double36 = pointCostPair35.getCost();
        double double37 = pointCostPair35.getCost();
        double[] doubleArray38 = pointCostPair35.getPoint();
        double double39 = pointCostPair35.getCost();
        double double40 = pointCostPair35.getCost();
        double[] doubleArray41 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 100.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 0.0d);
        double double46 = pointCostPair45.getCost();
        double[] doubleArray47 = pointCostPair45.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray47, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair50 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray21, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) (byte) 10, 35.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, randomVectorGenerator8, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.String str26 = convergenceException25.getPattern();
        java.lang.String str27 = convergenceException25.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        convergenceException14.addSuppressed((java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray30 = convergenceException28.getArguments();
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray30);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException46);
        java.lang.Throwable[] throwableArray48 = convergenceException46.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException46);
        java.lang.Throwable[] throwableArray51 = convergenceException46.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        java.lang.String str55 = convergenceException54.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray51, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray30, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray30);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray30);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str55, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) '#', (double) (-1.0f), (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (byte) 100);
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0.0f);
        double[] doubleArray38 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray13, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (byte) 100, (double) ' ', (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, 35.0d, (-1.0d), (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) ' ', 10.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 1.0d);
        double double24 = pointCostPair23.getCost();
        double[] doubleArray25 = pointCostPair23.getPoint();
        double[] doubleArray26 = pointCostPair23.getPoint();
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray26, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, 0.0d, 10.0d, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray14 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 0);
        double double19 = pointCostPair18.getCost();
        double double20 = pointCostPair18.getCost();
        double[] doubleArray21 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) (short) -1);
        double double26 = pointCostPair25.getCost();
        double[] doubleArray27 = pointCostPair25.getPoint();
        double[] doubleArray28 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) ' ');
        double[] doubleArray31 = pointCostPair30.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray8, doubleArray31, (int) (short) 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) 100.0f, 52.0d, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 100, 35.0d, 0.0f, 100.0f, 100.0d, 0 };
        double[][] doubleArray15 = new double[][] { doubleArray14 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 35.0, 0.0, 100.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray7 = convergenceException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.String str9 = convergenceException5.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str9, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException4);
        java.lang.Object[] objArray6 = convergenceException4.getArguments();
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray15);
        java.lang.Object[] objArray18 = costException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", objArray18);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray18, throwable20);
        java.lang.String str22 = convergenceException21.getPattern();
        java.lang.Object[] objArray31 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("hi!", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray31);
        java.lang.Object[] objArray34 = costException33.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("hi!", objArray34);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray34, throwable36);
        convergenceException21.addSuppressed((java.lang.Throwable) convergenceException37);
        java.lang.Throwable[] throwableArray39 = convergenceException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray6, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException41 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException42 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException41.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        convergenceException21.addSuppressed((java.lang.Throwable) convergenceException44);
        java.lang.String str46 = convergenceException21.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException21);
        java.lang.Object[] objArray48 = convergenceException21.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str22, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str46, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (double) 'a', (double) 100.0f, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, randomVectorGenerator8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) '#', (double) 10L, (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        java.lang.Object[] objArray20 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("hi!", objArray20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        java.lang.Object[] objArray24 = costException22.getArguments();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException(throwable30);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException31, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("", objArray35);
        java.lang.Class<?> wildcardClass38 = costException37.getClass();
        java.lang.Object[] objArray48 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("hi!", objArray48);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException50);
        java.lang.Object[] objArray52 = new java.lang.Object[] { wildcardClass38, 'a', (-1.0f), "not positive definite matrix", costException50 };
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        costException22.addSuppressed((java.lang.Throwable) convergenceException54);
        java.lang.Object[] objArray56 = convergenceException54.getArguments();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", throwable58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray56, throwable58);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException(throwable62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException(throwable64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException65);
        convergenceException63.addSuppressed((java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray56, (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException70);
        java.lang.Object[] objArray77 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException78 = new org.apache.commons.math.optimization.CostException("hi!", objArray77);
        java.lang.Object[] objArray79 = costException78.getArguments();
        java.lang.Throwable[] throwableArray80 = costException78.getSuppressed();
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException78);
        convergenceException70.addSuppressed((java.lang.Throwable) costException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException81);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException81);
        java.lang.Object[] objArray85 = costException81.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException8);
        java.lang.String str10 = convergenceException8.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray12 = convergenceException8.getArguments();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        java.lang.Object[] objArray26 = costException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray29 = convergenceException27.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException30 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException31 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException30.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray29, (java.lang.Throwable) notPositiveDefiniteMatrixException31);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        java.lang.Throwable[] throwableArray39 = convergenceException38.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray29, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray12, (java.lang.Throwable) convergenceException42);
        java.lang.Class<?> wildcardClass44 = objArray12.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str10, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "not positive definite matrix" + "'", str41, "not positive definite matrix");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        java.lang.Object[] objArray11 = costException8.getArguments();
        java.lang.String str12 = costException8.getPattern();
        java.lang.String str13 = costException8.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "not positive definite matrix" + "'", str12, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str13, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) 1.0f, 32.0d, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double[] doubleArray19 = pointCostPair17.getPoint();
        double double20 = pointCostPair17.getCost();
        double[] doubleArray21 = pointCostPair17.getPoint();
        double[] doubleArray28 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (short) 10);
        double[] doubleArray33 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray21, doubleArray33, (int) (short) 1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (short) 100, (double) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
        java.lang.String str2 = convergenceException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str2, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException(throwable10);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException11, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("", objArray15);
        java.lang.Class<?> wildcardClass18 = costException17.getClass();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException30);
        java.lang.Object[] objArray32 = new java.lang.Object[] { wildcardClass18, 'a', (-1.0f), "not positive definite matrix", costException30 };
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", objArray32);
        java.lang.Object[] objArray34 = convergenceException33.getArguments();
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray43);
        java.lang.Object[] objArray46 = costException45.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", objArray46);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray46, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray34, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray34);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray34);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("hi!", objArray62);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray62);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("Convergence failed", objArray34, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray34);
        java.lang.Class<?> wildcardClass70 = costException69.getClass();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray6 = costException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException9);
        java.lang.Class<?> wildcardClass13 = convergenceException9.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (-1.0f));
        double double7 = pointCostPair6.getCost();
        double double8 = pointCostPair6.getCost();
        double[] doubleArray9 = pointCostPair6.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (-1L));
        double[] doubleArray14 = pointCostPair13.getPoint();
        double double15 = pointCostPair13.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException18, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        java.lang.String str24 = convergenceException23.getPattern();
        java.lang.String str25 = convergenceException23.getPattern();
        java.lang.Object[] objArray26 = convergenceException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray26);
        costException8.addSuppressed((java.lang.Throwable) costException28);
        java.lang.Class<?> wildcardClass30 = costException28.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException6);
        java.lang.Class<?> wildcardClass8 = convergenceException7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1.0f, (double) (-1.0f), (double) (byte) -1, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 97.0d, (short) 0 };
        double[] doubleArray13 = new double[] { 97.0d, (short) 0 };
        double[] doubleArray16 = new double[] { 97.0d, (short) 0 };
        double[] doubleArray19 = new double[] { 97.0d, (short) 0 };
        double[] doubleArray22 = new double[] { 97.0d, (short) 0 };
        double[][] doubleArray23 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair26 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray23, (int) (byte) 1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable[] throwableArray16 = costException15.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray16);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        double[] doubleArray15 = pointCostPair14.getPoint();
        double[] doubleArray16 = pointCostPair14.getPoint();
        double[] doubleArray17 = pointCostPair14.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        double[] doubleArray12 = pointCostPair7.getPoint();
        double[] doubleArray13 = pointCostPair7.getPoint();
        double double14 = pointCostPair7.getCost();
        double[] doubleArray15 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) ' ');
        double double18 = pointCostPair17.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = costException10.getSuppressed();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray13);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException25);
        java.lang.Throwable[] throwableArray28 = costException25.getSuppressed();
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        java.lang.Throwable[] throwableArray31 = costException29.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) costException29);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException37 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException38 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException37.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException38);
        java.lang.String str42 = notPositiveDefiniteMatrixException38.getPattern();
        java.lang.Throwable[] throwableArray43 = notPositiveDefiniteMatrixException38.getSuppressed();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) costException52);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) costException56);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray13);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "not positive definite matrix" + "'", str42, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Object[] objArray9 = costException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException8);
        java.lang.String str11 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException10);
        java.lang.Class<?> wildcardClass13 = convergenceException10.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str11, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) 0, (double) 1.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, (double) 10.0f, 0.0d, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { '4' };
        double[] doubleArray11 = new double[] { '4' };
        double[] doubleArray13 = new double[] { '4' };
        double[] doubleArray15 = new double[] { '4' };
        double[] doubleArray17 = new double[] { '4' };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair19 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException11);
        java.lang.Throwable[] throwableArray14 = costException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException16);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        double[] doubleArray13 = pointCostPair9.getPoint();
        double[] doubleArray14 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) 'a');
        double double17 = pointCostPair16.getCost();
        double[] doubleArray18 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (-1));
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) 0);
        double double23 = pointCostPair22.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 97.0d + "'", double17 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", throwable1);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, 0.0d, (double) (short) 0, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        java.lang.Throwable[] throwableArray13 = convergenceException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException16 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray17 = notPositiveDefiniteMatrixException16.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        convergenceException11.addSuppressed((java.lang.Throwable) costException18);
        java.lang.Throwable[] throwableArray21 = costException18.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        java.lang.String str23 = convergenceException21.getPattern();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException24);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException30 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException31 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException30.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException33);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray45);
        convergenceException34.addSuppressed((java.lang.Throwable) costException46);
        java.lang.Object[] objArray48 = convergenceException34.getArguments();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException53, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        java.lang.String str59 = convergenceException58.getPattern();
        java.lang.String str60 = convergenceException58.getPattern();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException(throwable62);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException(throwable64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException65);
        convergenceException63.addSuppressed((java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException68);
        convergenceException58.addSuppressed((java.lang.Throwable) convergenceException69);
        java.lang.Throwable[] throwableArray71 = convergenceException58.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray48, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException73);
        costException24.addSuppressed((java.lang.Throwable) convergenceException74);
        java.lang.String str76 = convergenceException74.getPattern();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str23, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str76, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) 1.0f, (double) 1.0f, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (byte) 0, 10.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) ' ', (double) (byte) -1, (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11, doubleArray12, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray14, (int) 'a', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray5);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray15);
        convergenceException6.addSuppressed((java.lang.Throwable) costException16);
        java.lang.Throwable[] throwableArray18 = costException16.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray18);
        java.lang.String str20 = convergenceException19.getPattern();
        java.lang.Object[] objArray21 = convergenceException19.getArguments();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (-1.0d), 10.0d, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray14 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        double[] doubleArray21 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 52.0d);
        double[] doubleArray24 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 100);
        double[] doubleArray31 = pointCostPair30.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair32 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray8, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) (byte) 10, (-1.0d), (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double double13 = pointCostPair12.getCost();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        double[] doubleArray17 = pointCostPair12.getPoint();
        double[] doubleArray23 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (short) 0);
        double double28 = pointCostPair27.getCost();
        double double29 = pointCostPair27.getCost();
        double[] doubleArray30 = pointCostPair27.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (short) -1);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double[] doubleArray36 = pointCostPair34.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray17, doubleArray36, (int) '#', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException3);
        java.lang.String str12 = convergenceException3.getPattern();
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException15);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray27);
        convergenceException16.addSuppressed((java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = convergenceException16.getArguments();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException35, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        java.lang.String str42 = convergenceException40.getPattern();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException(throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        convergenceException45.addSuppressed((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        convergenceException40.addSuppressed((java.lang.Throwable) convergenceException51);
        java.lang.Throwable[] throwableArray53 = convergenceException40.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray30, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException55);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException18, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("", objArray22);
        java.lang.Class<?> wildcardClass25 = costException24.getClass();
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = new java.lang.Object[] { wildcardClass25, 'a', (-1.0f), "not positive definite matrix", costException37 };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        costException9.addSuppressed((java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray43 = costException9.getArguments();
        java.lang.Object[] objArray44 = costException9.getArguments();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray51);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException53);
        java.lang.String str56 = costException53.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray44, (java.lang.Throwable) costException53);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException53);
        java.lang.Class<?> wildcardClass59 = convergenceException58.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "not positive definite matrix" + "'", str56, "not positive definite matrix");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) 0L, (double) (short) -1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 'a');
        double[] doubleArray27 = pointCostPair26.getPoint();
        double double28 = pointCostPair26.getCost();
        double[] doubleArray29 = pointCostPair26.getPoint();
        double[] doubleArray30 = pointCostPair26.getPoint();
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 97.0d);
        double double40 = pointCostPair39.getCost();
        double[] doubleArray41 = pointCostPair39.getPoint();
        double[] doubleArray42 = pointCostPair39.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray30, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 97.0d + "'", double28 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 97.0d + "'", double40 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Throwable) convergenceException2);
        java.lang.Class<?> wildcardClass4 = convergenceException2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (-1.0f), 100.0d, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        double[] doubleArray6 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, 10.0d);
        double double9 = pointCostPair8.getCost();
        java.lang.Object[] objArray11 = new java.lang.Object[] { pointCostPair8, (-1) };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        java.lang.String str14 = costException12.getPattern();
        java.lang.String str15 = costException12.toString();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str14, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str15, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException13);
        java.lang.Throwable[] throwableArray16 = costException13.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException17);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) (byte) 1, 100.0d, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double[] doubleArray14 = pointCostPair12.getPoint();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 100L);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 35.0d);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair24 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray20, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        double[] doubleArray11 = pointCostPair10.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 100);
        double[] doubleArray18 = pointCostPair17.getPoint();
        double double19 = pointCostPair17.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, 35.0d, (double) (byte) 1, 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, randomVectorGenerator8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) 'a', (double) 10L, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 35.0d, (byte) 1, (-1.0d) };
        double[] doubleArray15 = new double[] { 35.0d, (byte) 1, (-1.0d) };
        double[] doubleArray19 = new double[] { 35.0d, (byte) 1, (-1.0d) };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray15, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        double double5 = pointCostPair4.getCost();
        double[] doubleArray6 = pointCostPair4.getPoint();
        double[] doubleArray7 = pointCostPair4.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray7, (double) (short) 1);
        double double10 = pointCostPair9.getCost();
        double[] doubleArray11 = pointCostPair9.getPoint();
        double double12 = pointCostPair9.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, 52.0d, (double) (short) 0, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[][] doubleArray11 = new double[][] { doubleArray8, doubleArray9, doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray11, (int) (byte) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) (-1L), (double) (-1), 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray14 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        double[] doubleArray17 = pointCostPair16.getPoint();
        double[] doubleArray18 = pointCostPair16.getPoint();
        double[] doubleArray19 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair22 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray8, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1L), (double) 10, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, 35.0d, (double) (short) -1, 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (-1.0f));
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 0.0d);
        double[] doubleArray33 = pointCostPair32.getPoint();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        double[] doubleArray36 = pointCostPair32.getPoint();
        double[] doubleArray37 = pointCostPair32.getPoint();
        double[] doubleArray38 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 32.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray27, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) 10.0f, (-1.0d), (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { (short) -1, 0.0d, 1L };
        double[] doubleArray15 = new double[] { (short) -1, 0.0d, 1L };
        double[] doubleArray19 = new double[] { (short) -1, 0.0d, 1L };
        double[] doubleArray23 = new double[] { (short) -1, 0.0d, 1L };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray24, (int) (byte) 0, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, 97.0d, (-1.0d), (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[] doubleArray21 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[] doubleArray28 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[] doubleArray35 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[] doubleArray42 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[] doubleArray49 = new double[] { '#', 0.0d, 10, 'a', (short) 0, (short) 10 };
        double[][] doubleArray50 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 0.0, 10.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, 100.0d, (double) (short) 100, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[] doubleArray19 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[] doubleArray25 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[] doubleArray31 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[] doubleArray37 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[] doubleArray43 = new double[] { 1, '4', 52.0d, (byte) 100, (short) 100 };
        double[][] doubleArray44 = new double[][] { doubleArray13, doubleArray19, doubleArray25, doubleArray31, doubleArray37, doubleArray43 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 52.0, 52.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 0.0d, (double) 100L, (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { (short) 0, (byte) 1, (byte) -1, 97.0d };
        double[] doubleArray17 = new double[] { (short) 0, (byte) 1, (byte) -1, 97.0d };
        double[][] doubleArray18 = new double[][] { doubleArray12, doubleArray17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair19 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray21);
        java.lang.String str23 = costException22.getPattern();
        costException8.addSuppressed((java.lang.Throwable) costException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str23, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Object[] objArray9 = costException8.getArguments();
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException15);
        convergenceException12.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Class<?> wildcardClass21 = convergenceException20.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 32.0d, 100.0d, 100.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 97.0d, 100, '#', 10.0d };
        double[] doubleArray17 = new double[] { 97.0d, 100, '#', 10.0d };
        double[] doubleArray22 = new double[] { 97.0d, 100, '#', 10.0d };
        double[][] doubleArray23 = new double[][] { doubleArray12, doubleArray17, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair24 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 100.0, 35.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 100.0, 35.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 100.0, 35.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.Throwable[] throwableArray7 = costException6.getSuppressed();
        java.lang.Object[] objArray8 = costException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray8);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) (short) 100, (double) '#', 35.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray8, 0, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException4, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException20.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        convergenceException19.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException21);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        java.lang.Object[] objArray48 = convergenceException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray48);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(throwable53);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException54, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray58);
        java.lang.String str60 = convergenceException59.getPattern();
        java.lang.String str61 = convergenceException59.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException62);
        java.lang.String str64 = costException63.getPattern();
        java.lang.Throwable[] throwableArray65 = costException63.getSuppressed();
        java.lang.String str66 = costException63.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray48, (java.lang.Throwable) costException63);
        costException28.addSuppressed((java.lang.Throwable) costException63);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = convergenceException30.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray31);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException45);
        java.lang.Throwable[] throwableArray47 = convergenceException45.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray31, (java.lang.Throwable) convergenceException45);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray59);
        java.lang.Object[] objArray62 = costException61.getArguments();
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray62);
        java.lang.String str64 = costException63.getPattern();
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException63);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException63);
        java.lang.Object[] objArray67 = costException66.getArguments();
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: ", objArray67);
        convergenceException45.addSuppressed((java.lang.Throwable) costException68);
        java.lang.String str70 = costException68.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException68);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str64, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.optimization.CostException: " + "'", str70, "org.apache.commons.math.optimization.CostException: ");
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        java.lang.Throwable[] throwableArray49 = convergenceException47.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException50);
        java.lang.Throwable[] throwableArray52 = convergenceException51.getSuppressed();
        java.lang.Object[] objArray65 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("hi!", objArray65);
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray65);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray65);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray65);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray65);
        java.lang.Object[] objArray71 = convergenceException70.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException72 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray79 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("hi!", objArray79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray79);
        notPositiveDefiniteMatrixException72.addSuppressed((java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray71, (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray71);
        java.lang.Object[] objArray85 = convergenceException84.getArguments();
        java.lang.Object[] objArray91 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException92 = new org.apache.commons.math.optimization.CostException("hi!", objArray91);
        java.lang.Object[] objArray93 = costException92.getArguments();
        java.lang.Throwable[] throwableArray94 = costException92.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException92);
        java.lang.Object[] objArray96 = costException92.getArguments();
        convergenceException84.addSuppressed((java.lang.Throwable) costException92);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException84);
        convergenceException51.addSuppressed((java.lang.Throwable) convergenceException98);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100.0f, (double) 0, (double) 10L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { 0.0d };
        double[] doubleArray11 = new double[] { 0.0d };
        double[] doubleArray13 = new double[] { 0.0d };
        double[][] doubleArray14 = new double[][] { doubleArray9, doubleArray11, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("", objArray13);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray13);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray21);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray33);
        java.lang.Object[] objArray36 = costException35.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException35);
        java.lang.Object[] objArray38 = costException35.getArguments();
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray51);
        java.lang.Object[] objArray54 = costException53.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray54);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("hi!", objArray63);
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray63);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException65);
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException65);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray54, (java.lang.Throwable) costException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException68);
        java.lang.Object[] objArray71 = convergenceException70.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) convergenceException70);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException79 = new org.apache.commons.math.optimization.CostException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = costException79.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException79);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException79);
        java.lang.Object[] objArray83 = costException79.getArguments();
        convergenceException72.addSuppressed((java.lang.Throwable) costException79);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray21, (java.lang.Throwable) convergenceException72);
        java.lang.Throwable[] throwableArray86 = convergenceException85.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, (double) '4', (double) (short) 1, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { (short) 0, 100L, 10, 10L };
        double[] doubleArray17 = new double[] { (short) 0, 100L, 10, 10L };
        double[] doubleArray22 = new double[] { (short) 0, 100L, 10, 10L };
        double[][] doubleArray23 = new double[][] { doubleArray12, doubleArray17, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair24 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray1 = notPositiveDefiniteMatrixException0.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException0);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Class<?> wildcardClass4 = convergenceException2.getClass();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) 0, (double) (-1), 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 10L);
        double double16 = pointCostPair15.getCost();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double double19 = pointCostPair15.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13, throwable15);
        java.lang.String str17 = convergenceException16.getPattern();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray26);
        java.lang.Object[] objArray29 = costException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29, throwable31);
        convergenceException16.addSuppressed((java.lang.Throwable) convergenceException32);
        java.lang.Throwable[] throwableArray34 = convergenceException16.getSuppressed();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray34);
        java.lang.Object[] objArray36 = costException35.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str17, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException6.getArguments();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray8, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException37);
        convergenceException26.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray8, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray8);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray54);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray54);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException(throwable65);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException66, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray70);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("", objArray70);
        java.lang.Class<?> wildcardClass73 = costException72.getClass();
        java.lang.Object[] objArray83 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("hi!", objArray83);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException85);
        java.lang.Object[] objArray87 = new java.lang.Object[] { wildcardClass73, 'a', (-1.0f), "not positive definite matrix", costException85 };
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("hi!", objArray87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException88);
        org.apache.commons.math.optimization.CostException costException90 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray54, (java.lang.Throwable) convergenceException89);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException92);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException92);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, 0.0d, (double) 0L, (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) (short) 1);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 100L);
        double[] doubleArray25 = pointCostPair24.getPoint();
        double[] doubleArray31 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 0.0f);
        double[] doubleArray40 = pointCostPair39.getPoint();
        double[] doubleArray41 = pointCostPair39.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray25, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) (byte) -1, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        java.lang.Object[] objArray17 = costException15.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException18);
        java.lang.String str21 = convergenceException20.getPattern();
        java.lang.Throwable[] throwableArray22 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException24);
        java.lang.Throwable[] throwableArray26 = convergenceException24.getSuppressed();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str21, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        java.lang.String str25 = convergenceException24.getPattern();
        java.lang.String str26 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray29 = convergenceException27.getArguments();
        java.lang.Throwable[] throwableArray30 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12, (java.lang.Throwable) convergenceException27);
        java.lang.Throwable[] throwableArray34 = convergenceException27.getSuppressed();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException27);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray15 = convergenceException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray15);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException16);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException10, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray14);
        java.lang.Class<?> wildcardClass17 = costException16.getClass();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray31 = new java.lang.Object[] { wildcardClass17, 'a', (-1.0f), "not positive definite matrix", costException29 };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        java.lang.String str51 = convergenceException50.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str51, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.Object[] objArray16 = convergenceException15.getArguments();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) '#', (double) (short) 1, (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { ' ', 1, (short) 10, 10L };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray13, 0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[32.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, 1.0d, 97.0d, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray8, (int) ' ', (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 1, (double) (-1L), 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (short) 1);
        double[] doubleArray26 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 100);
        double[] doubleArray31 = pointCostPair30.getPoint();
        double double32 = pointCostPair30.getCost();
        double[] doubleArray33 = pointCostPair30.getPoint();
        double[] doubleArray40 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 100.0d);
        double double47 = pointCostPair46.getCost();
        double[] doubleArray48 = pointCostPair46.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray48, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair52 = new org.apache.commons.math.optimization.PointCostPair(doubleArray48, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair53 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray33, doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.String str23 = convergenceException22.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException25);
        java.lang.Throwable[] throwableArray27 = convergenceException25.getSuppressed();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray27);
        java.lang.Object[] objArray29 = costException28.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.String str12 = convergenceException11.getPattern();
        java.lang.String str13 = convergenceException11.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.String str16 = costException15.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        java.lang.Class<?> wildcardClass20 = convergenceException18.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray14);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28);
        notPositiveDefiniteMatrixException21.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray20, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException47);
        convergenceException36.addSuppressed((java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray20, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray20);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("hi!", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray68);
        java.lang.Object[] objArray71 = costException70.getArguments();
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray71);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray71);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray71);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray71);
        convergenceException57.addSuppressed((java.lang.Throwable) costException75);
        org.apache.commons.math.optimization.CostException costException77 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException57);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException77);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException14);
        java.lang.Object[] objArray16 = convergenceException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16);
        java.lang.Throwable[] throwableArray19 = costException18.getSuppressed();
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            costException18.addSuppressed(throwable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 1, (-1.0d), (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (-1));
        double double27 = pointCostPair26.getCost();
        double double28 = pointCostPair26.getCost();
        double[] doubleArray29 = pointCostPair26.getPoint();
        double[] doubleArray35 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 32.0d);
        double[] doubleArray46 = pointCostPair45.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair53 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray29, doubleArray46, (int) (byte) 10, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (byte) 10, (double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 1L, 10.0d, (-1L), (short) 100, (-1L) };
        double[] doubleArray19 = new double[] { 1L, 10.0d, (-1L), (short) 100, (-1L) };
        double[] doubleArray25 = new double[] { 1L, 10.0d, (-1L), (short) 100, (-1L) };
        double[] doubleArray31 = new double[] { 1L, 10.0d, (-1L), (short) 100, (-1L) };
        double[][] doubleArray32 = new double[][] { doubleArray13, doubleArray19, doubleArray25, doubleArray31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray32, 0, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException16, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("", objArray20);
        java.lang.Class<?> wildcardClass23 = costException22.getClass();
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException35);
        java.lang.Object[] objArray37 = new java.lang.Object[] { wildcardClass23, 'a', (-1.0f), "not positive definite matrix", costException35 };
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        costException9.addSuppressed((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.String str42 = convergenceException41.getPattern();
        java.lang.Throwable[] throwableArray43 = convergenceException41.getSuppressed();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray11);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException18);
        convergenceException16.addSuppressed((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray11, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException16);
        java.lang.String str24 = costException23.getPattern();
        java.lang.Throwable[] throwableArray25 = costException23.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray25);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) ' ', 1.0d, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 100, '#', 1, 100 };
        double[] doubleArray17 = new double[] { 100, '#', 1, 100 };
        double[] doubleArray22 = new double[] { 100, '#', 1, 100 };
        double[] doubleArray27 = new double[] { 100, '#', 1, 100 };
        double[] doubleArray32 = new double[] { 100, '#', 1, 100 };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray33, (int) '4', (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 35.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 35.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 35.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 35.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 35.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException6);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        double double7 = pointCostPair6.getCost();
        double[] doubleArray8 = pointCostPair6.getPoint();
        double double9 = pointCostPair6.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray13);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException17);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray17);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException39);
        java.lang.Object[] objArray41 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException43);
        java.lang.String str45 = convergenceException43.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str45, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray12);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException(throwable24);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException25, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray29);
        java.lang.Class<?> wildcardClass32 = costException31.getClass();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException44);
        java.lang.Object[] objArray46 = new java.lang.Object[] { wildcardClass32, 'a', (-1.0f), "not positive definite matrix", costException44 };
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", objArray46);
        java.lang.Object[] objArray48 = convergenceException47.getArguments();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray57);
        java.lang.Object[] objArray60 = costException59.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", objArray60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray60, throwable62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray48, (java.lang.Throwable) convergenceException63);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException70, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray74);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException("hi!", objArray82);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException(throwable84);
        java.lang.String str86 = convergenceException85.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("", objArray82, (java.lang.Throwable) convergenceException85);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray74, (java.lang.Throwable) convergenceException85);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray48, (java.lang.Throwable) convergenceException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray48);
        costException15.addSuppressed((java.lang.Throwable) convergenceException90);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) '4', 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[][] doubleArray9 = new double[][] { doubleArray8 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 1.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (-1.0d));
        double double22 = pointCostPair21.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 100, 0.0d, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { (byte) 100, '4', 0L };
        double[] doubleArray15 = new double[] { (byte) 100, '4', 0L };
        double[][] doubleArray16 = new double[][] { doubleArray11, doubleArray15 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 52.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException10, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray14);
        java.lang.Class<?> wildcardClass17 = costException16.getClass();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray31 = new java.lang.Object[] { wildcardClass17, 'a', (-1.0f), "not positive definite matrix", costException29 };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray33);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException(throwable59);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException60, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("", objArray64);
        java.lang.Class<?> wildcardClass67 = costException66.getClass();
        java.lang.Object[] objArray77 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException78 = new org.apache.commons.math.optimization.CostException("hi!", objArray77);
        org.apache.commons.math.optimization.CostException costException79 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException79);
        java.lang.Object[] objArray81 = new java.lang.Object[] { wildcardClass67, 'a', (-1.0f), "not positive definite matrix", costException79 };
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("hi!", objArray81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException82);
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException83);
        java.lang.Object[] objArray85 = convergenceException83.getArguments();
        java.lang.Object[] objArray92 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException93 = new org.apache.commons.math.optimization.CostException("hi!", objArray92);
        java.lang.Throwable[] throwableArray94 = costException93.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray94);
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("", objArray85, (java.lang.Throwable) convergenceException95);
        org.apache.commons.math.ConvergenceException convergenceException97 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException96);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray33, (java.lang.Throwable) convergenceException96);
        org.apache.commons.math.ConvergenceException convergenceException99 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException96);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        double[] doubleArray13 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 0.0d);
        double[] doubleArray18 = pointCostPair17.getPoint();
        double double19 = pointCostPair17.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) 1.0f, (double) 10L, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { 35.0d };
        double[][] doubleArray10 = new double[][] { doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair13 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray10, (int) (byte) 1, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, (double) (short) 1, (double) (short) -1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100 };
        double[] doubleArray13 = new double[] { (byte) 100 };
        double[] doubleArray15 = new double[] { (byte) 100 };
        double[] doubleArray17 = new double[] { (byte) 100 };
        double[] doubleArray19 = new double[] { (byte) 100 };
        double[][] doubleArray20 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20, 1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException2.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException22);
        java.lang.String str24 = convergenceException23.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException26);
        java.lang.String str28 = costException27.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str24, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str28, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) ' ');
        double[] doubleArray12 = pointCostPair11.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        java.lang.Class<?> wildcardClass15 = pointCostPair14.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.String str29 = convergenceException28.getPattern();
        java.lang.String str30 = convergenceException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray33 = convergenceException31.getArguments();
        java.lang.Throwable[] throwableArray34 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException35);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException35);
        java.lang.String str38 = convergenceException13.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str38, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", objArray10);
        java.lang.String str13 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = costException15.getSuppressed();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        java.lang.String str21 = convergenceException19.getPattern();
        java.lang.Object[] objArray22 = convergenceException19.getArguments();
        java.lang.Throwable[] throwableArray23 = convergenceException19.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray25 = convergenceException19.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) convergenceException26);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        double double11 = pointCostPair10.getCost();
        double double12 = pointCostPair10.getCost();
        double[] doubleArray13 = pointCostPair10.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 97.0d + "'", double11 == 97.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 97.0d + "'", double12 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }
}


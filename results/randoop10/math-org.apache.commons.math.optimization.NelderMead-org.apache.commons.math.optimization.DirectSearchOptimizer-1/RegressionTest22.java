import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1.0f), (double) 1, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray14);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        java.lang.Object[] objArray23 = costException22.getArguments();
        java.lang.Throwable[] throwableArray24 = costException22.getSuppressed();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        convergenceException15.addSuppressed((java.lang.Throwable) costException25);
        java.lang.Throwable[] throwableArray27 = costException25.getSuppressed();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) 0, 100.0d, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.String str7 = convergenceException5.getPattern();
        java.lang.Object[] objArray8 = convergenceException5.getArguments();
        java.lang.Throwable[] throwableArray9 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray9);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException16, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.String str22 = convergenceException21.getPattern();
        java.lang.String str23 = convergenceException21.getPattern();
        java.lang.Object[] objArray24 = convergenceException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray9);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.String str40 = convergenceException39.getPattern();
        java.lang.String str41 = convergenceException39.getPattern();
        java.lang.Object[] objArray42 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray42);
        java.lang.String str45 = costException44.getPattern();
        java.lang.Object[] objArray46 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException48);
        java.lang.String str50 = convergenceException48.getPattern();
        java.lang.Throwable[] throwableArray51 = convergenceException48.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray46, (java.lang.Throwable) convergenceException48);
        costException26.addSuppressed((java.lang.Throwable) convergenceException48);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str45, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "not positive definite matrix" + "'", str50, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", throwable1);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) 0L, (double) 0.0f, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 97.0d, 'a', 0, 1 };
        double[] doubleArray17 = new double[] { 97.0d, 'a', 0, 1 };
        double[] doubleArray22 = new double[] { 97.0d, 'a', 0, 1 };
        double[] doubleArray27 = new double[] { 97.0d, 'a', 0, 1 };
        double[][] doubleArray28 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) (byte) 10, (double) '#', (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 1, 100L, 1, 0.0f };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) 100L, (-1.0d), (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 100L);
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (short) 0);
        double double37 = pointCostPair36.getCost();
        double double38 = pointCostPair36.getCost();
        double[] doubleArray39 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) (short) 1);
        double double48 = pointCostPair47.getCost();
        double[] doubleArray49 = pointCostPair47.getPoint();
        double[] doubleArray50 = pointCostPair47.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray22, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray12);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("", objArray27);
        java.lang.Class<?> wildcardClass30 = costException29.getClass();
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException42);
        java.lang.Object[] objArray44 = new java.lang.Object[] { wildcardClass30, 'a', (-1.0f), "not positive definite matrix", costException42 };
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Object[] objArray46 = convergenceException45.getArguments();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray57);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray57);
        java.lang.Object[] objArray63 = convergenceException62.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException64 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray71 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("hi!", objArray71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray71);
        notPositiveDefiniteMatrixException64.addSuppressed((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray63, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray46, (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray12, (java.lang.Throwable) convergenceException76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException77);
        java.lang.String str79 = convergenceException78.toString();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str79, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = convergenceException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray15);
        java.lang.Throwable[] throwableArray17 = convergenceException16.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) 1, (double) (short) -1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (byte) -1, (-1.0f) };
        double[] doubleArray13 = new double[] { (byte) -1, (-1.0f) };
        double[] doubleArray16 = new double[] { (byte) -1, (-1.0f) };
        double[][] doubleArray17 = new double[][] { doubleArray10, doubleArray13, doubleArray16 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair20 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray17, (int) (short) 100, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = costException9.getSuppressed();
        java.lang.String str11 = costException9.getPattern();
        java.lang.Throwable[] throwableArray12 = costException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException17.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException17);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException21);
        java.lang.Object[] objArray25 = convergenceException21.getArguments();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.String str15 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12);
        java.lang.String str18 = convergenceException17.getPattern();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException23);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str18, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException7 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Class<?> wildcardClass42 = convergenceException41.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) 1L, (double) ' ', (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray10);
        java.lang.Throwable[] throwableArray13 = convergenceException12.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray24);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException36, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException(throwable46);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException47, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        java.lang.String str53 = convergenceException52.getPattern();
        java.lang.String str54 = convergenceException52.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        convergenceException41.addSuppressed((java.lang.Throwable) convergenceException55);
        java.lang.Object[] objArray57 = convergenceException55.getArguments();
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("", objArray57);
        java.lang.Object[] objArray69 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("hi!", objArray69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray69);
        java.lang.Object[] objArray72 = costException71.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("hi!", objArray72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException73);
        java.lang.Throwable[] throwableArray75 = convergenceException73.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException73);
        java.lang.Throwable[] throwableArray78 = convergenceException73.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException80);
        java.lang.String str82 = convergenceException81.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray78, (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray57, (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.optimization.CostException costException86 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray24, (java.lang.Throwable) costException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException86);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) convergenceException88);
        java.lang.String str90 = convergenceException88.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str82, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str90, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0.0f, (double) (-1L), (double) (-1L), (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 'a', (byte) 10, 52.0d, '#' };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray13, (int) (short) 10, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 52.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(35.0d, (double) '4', (double) 10, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (-1.0d));
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 'a');
        double[] doubleArray35 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray19, doubleArray35, (-1), (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 10.0d, (-1.0d), 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (short) 1);
        double[] doubleArray26 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) '#');
        double[] doubleArray34 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 0);
        double double39 = pointCostPair38.getCost();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (short) 0);
        double double48 = pointCostPair47.getCost();
        double[] doubleArray49 = pointCostPair47.getPoint();
        double double50 = pointCostPair47.getCost();
        double[] doubleArray51 = pointCostPair47.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray26, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException17, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("", objArray21);
        java.lang.Class<?> wildcardClass24 = costException23.getClass();
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { wildcardClass24, 'a', (-1.0f), "not positive definite matrix", costException36 };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        costException8.addSuppressed((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray43 = convergenceException40.getArguments();
        java.lang.Object[] objArray44 = convergenceException40.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException14);
        java.lang.String str16 = convergenceException15.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str16, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        java.lang.String str3 = convergenceException1.getPattern();
        java.lang.Throwable[] throwableArray4 = convergenceException1.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "not positive definite matrix" + "'", str3, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, 0.0d, (double) 0.0f, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray8, 0, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', 52.0d, (double) (short) 0, 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (-1.0d), 1, 35.0d, 35.0d, ' ', 100.0f };
        double[] doubleArray21 = new double[] { (-1.0d), 1, 35.0d, 35.0d, ' ', 100.0f };
        double[] doubleArray28 = new double[] { (-1.0d), 1, 35.0d, 35.0d, ' ', 100.0f };
        double[][] doubleArray29 = new double[][] { doubleArray14, doubleArray21, doubleArray28 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair32 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray29, (int) (short) 100, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 35.0, 35.0, 32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 35.0, 35.0, 32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 35.0, 35.0, 32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.String str6 = convergenceException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str6, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(35.0d, 52.0d, (double) 1.0f, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, randomVectorGenerator8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray18, throwable19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray18);
        java.lang.String str22 = costException21.getPattern();
        java.lang.Throwable[] throwableArray23 = costException21.getSuppressed();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str22, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.String str17 = convergenceException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException16);
        java.lang.String str19 = convergenceException16.getPattern();
        double[] doubleArray27 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, 10.0d);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.String str40 = convergenceException39.getPattern();
        org.apache.commons.math.optimization.NelderMead nelderMead45 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10L, (double) '4', (double) 100);
        java.lang.Object[] objArray47 = new java.lang.Object[] { convergenceException16, 0L, 10.0d, convergenceException39, '4', (short) -1 };
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray58);
        java.lang.Object[] objArray61 = costException60.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("hi!", objArray61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray61);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("hi!", objArray70);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray70);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray61, (java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray47, (java.lang.Throwable) costException75);
        java.lang.Object[] objArray85 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException86 = new org.apache.commons.math.optimization.CostException("hi!", objArray85);
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException87);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray47, (java.lang.Throwable) costException87);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("", objArray47);
        java.lang.Throwable throwable92 = null;
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray47, throwable92);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray47);
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray47);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 1, 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0);
        double[] doubleArray20 = pointCostPair19.getPoint();
        double[] doubleArray21 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) 100.0f);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray30 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 10.0d);
        double[] doubleArray37 = pointCostPair36.getPoint();
        double double38 = pointCostPair36.getCost();
        double[] doubleArray39 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray39, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray24, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray1 = notPositiveDefiniteMatrixException0.getArguments();
        org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException0);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException3);
        java.lang.String str5 = costException3.getPattern();
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException3);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "not positive definite matrix" + "'", str5, "not positive definite matrix");
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException17.getSuppressed();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        java.lang.Object[] objArray31 = costException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray31);
        java.lang.String str33 = convergenceException32.getPattern();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        java.lang.Throwable[] throwableArray36 = costException34.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) costException34);
        java.lang.String str39 = costException34.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str33, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: " + "'", str39, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray44);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException46 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException46.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Object[] objArray49 = notPositiveDefiniteMatrixException47.getArguments();
        convergenceException45.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Throwable[] throwableArray52 = notPositiveDefiniteMatrixException47.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Object[] objArray54 = convergenceException53.getArguments();
        java.lang.Throwable[] throwableArray55 = convergenceException53.getSuppressed();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray12 = notPositiveDefiniteMatrixException11.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException13.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        java.lang.String str18 = notPositiveDefiniteMatrixException14.getPattern();
        java.lang.Throwable[] throwableArray19 = notPositiveDefiniteMatrixException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray12, (java.lang.Throwable) notPositiveDefiniteMatrixException14);
        java.lang.String str21 = convergenceException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray9, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        java.lang.Object[] objArray24 = costException23.getArguments();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray24);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray38);
        java.lang.Object[] objArray41 = costException40.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException40);
        java.lang.Object[] objArray43 = costException40.getArguments();
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException48);
        java.lang.String str53 = convergenceException48.getPattern();
        costException25.addSuppressed((java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: ", (java.lang.Throwable) convergenceException48);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "not positive definite matrix" + "'", str18, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str21, "org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "not positive definite matrix" + "'", str53, "not positive definite matrix");
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.Throwable[] throwableArray40 = costException38.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray30, (java.lang.Throwable) costException38);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException42);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1.0f, (double) (short) 100, (double) (byte) 100, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 35.0d);
        double double22 = pointCostPair21.getCost();
        double[] doubleArray23 = pointCostPair21.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        double double34 = pointCostPair33.getCost();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        double[] doubleArray37 = pointCostPair33.getPoint();
        double[] doubleArray38 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray23, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.String str4 = convergenceException2.getPattern();
        java.lang.Object[] objArray5 = convergenceException2.getArguments();
        java.lang.Throwable[] throwableArray6 = convergenceException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray8 = convergenceException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException9);
        java.lang.Throwable[] throwableArray11 = convergenceException9.getSuppressed();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        java.lang.Object[] objArray20 = costException19.getArguments();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray20);
        convergenceException9.addSuppressed((java.lang.Throwable) costException21);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException31);
        java.lang.Object[] objArray33 = costException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray44);
        java.lang.String str46 = costException45.getPattern();
        costException31.addSuppressed((java.lang.Throwable) costException45);
        java.lang.String str48 = costException45.getPattern();
        costException21.addSuppressed((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException45);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException45);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str46, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str48, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) (byte) 0, (double) (short) 10, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10L, '4' };
        double[] doubleArray13 = new double[] { 10L, '4' };
        double[] doubleArray16 = new double[] { 10L, '4' };
        double[] doubleArray19 = new double[] { 10L, '4' };
        double[] doubleArray22 = new double[] { 10L, '4' };
        double[] doubleArray25 = new double[] { 10L, '4' };
        double[][] doubleArray26 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) 100, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[][] doubleArray10 = new double[][] { doubleArray8, doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("", objArray25);
        java.lang.Class<?> wildcardClass28 = costException27.getClass();
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException40);
        java.lang.Object[] objArray42 = new java.lang.Object[] { wildcardClass28, 'a', (-1.0f), "not positive definite matrix", costException40 };
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = convergenceException44.getArguments();
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = costException54.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException("hi!", objArray63);
        java.lang.Object[] objArray65 = costException64.getArguments();
        java.lang.Throwable[] throwableArray66 = costException64.getSuppressed();
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException64);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException64);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray46, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException69);
        convergenceException12.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.String str72 = convergenceException70.getPattern();
        java.lang.String str73 = convergenceException70.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str72, "org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str73, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.apache.commons.math.optimization.NelderMead nelderMead0 = new org.apache.commons.math.optimization.NelderMead();
        org.apache.commons.math.optimization.CostFunction costFunction1 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker3 = null;
        double[] doubleArray7 = new double[] { 100.0f, (byte) 0, (-1) };
        double[] doubleArray11 = new double[] { 100.0f, (byte) 0, (-1) };
        double[] doubleArray15 = new double[] { 100.0f, (byte) 0, (-1) };
        double[] doubleArray19 = new double[] { 100.0f, (byte) 0, (-1) };
        double[] doubleArray23 = new double[] { 100.0f, (byte) 0, (-1) };
        double[][] doubleArray24 = new double[][] { doubleArray7, doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair25 = nelderMead0.minimize(costFunction1, 1, convergenceChecker3, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (byte) 0, 10.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 1L, (byte) 0, (short) 10, 100.0f, (-1L), 0.0d };
        double[] doubleArray21 = new double[] { 1L, (byte) 0, (short) 10, 100.0f, (-1L), 0.0d };
        double[] doubleArray28 = new double[] { 1L, (byte) 0, (short) 10, 100.0f, (-1L), 0.0d };
        double[][] doubleArray29 = new double[][] { doubleArray14, doubleArray21, doubleArray28 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair32 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray29, (int) '4', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0, 10.0, 100.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0, 10.0, 100.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, 100.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException13);
        java.lang.Object[] objArray16 = costException13.getArguments();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray16);
        java.lang.Throwable[] throwableArray20 = convergenceException19.getSuppressed();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray20);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        java.lang.Throwable[] throwableArray31 = costException29.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException32 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException33 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException32.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        java.lang.Object[] objArray35 = notPositiveDefiniteMatrixException33.getArguments();
        costException29.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException29);
        costException21.addSuppressed((java.lang.Throwable) convergenceException38);
        java.lang.String str40 = costException21.getPattern();
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException21);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str40, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (-1.0d), (double) 100L, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray8, (int) '#', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (-1.0d), (double) (-1.0f), (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 1L, (double) '#', (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { (byte) -1, 32.0d, 10 };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray12, (int) (short) 0, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ");
        org.apache.commons.math.optimization.CostException costException2 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        java.lang.Object[] objArray5 = convergenceException3.getArguments();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        java.lang.String str8 = notPositiveDefiniteMatrixException2.getPattern();
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Object[] objArray10 = notPositiveDefiniteMatrixException2.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("Convergence failed", objArray10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) 10.0f, (double) 100.0f, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray8, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) 1.0f, 32.0d, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        double[] doubleArray15 = pointCostPair14.getPoint();
        double[] doubleArray16 = pointCostPair14.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, 0.0d);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 100);
        double[] doubleArray35 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (byte) 1);
        double[] doubleArray38 = pointCostPair37.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray16, doubleArray38, (int) (byte) -1, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.String str11 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray7, (java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray13 = convergenceException10.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException16 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException15.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException16);
        java.lang.String str20 = notPositiveDefiniteMatrixException16.getPattern();
        java.lang.Throwable[] throwableArray21 = notPositiveDefiniteMatrixException16.getSuppressed();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) costException30);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Throwable[] throwableArray34 = convergenceException32.getSuppressed();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Object[] objArray47 = convergenceException46.getArguments();
        java.lang.Throwable[] throwableArray48 = convergenceException46.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException51 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray52 = notPositiveDefiniteMatrixException51.getArguments();
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException53);
        convergenceException46.addSuppressed((java.lang.Throwable) costException53);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("hi!", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray62);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException65 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException66 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException65.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException66);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException66);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException66);
        convergenceException64.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException66);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        convergenceException46.addSuppressed((java.lang.Throwable) convergenceException64);
        convergenceException32.addSuppressed((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) convergenceException46);
        java.lang.String str75 = convergenceException46.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "not positive definite matrix" + "'", str20, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str75, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, 97.0d, (double) 10, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        java.lang.Throwable[] throwableArray8 = costException7.getSuppressed();
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("Convergence failed", (java.lang.Object[]) throwableArray8);
        java.lang.Class<?> wildcardClass10 = throwableArray8.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 97.0d);
        double double20 = pointCostPair19.getCost();
        double double21 = pointCostPair19.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 97.0d + "'", double20 == 97.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 97.0d + "'", double21 == 97.0d);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) (-1), 32.0d, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException12);
        java.lang.Object[] objArray15 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray15);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        java.lang.String str24 = notPositiveDefiniteMatrixException20.getPattern();
        java.lang.Throwable[] throwableArray25 = notPositiveDefiniteMatrixException20.getSuppressed();
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) costException34);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray15, (java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray15);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException40);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "not positive definite matrix" + "'", str24, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = new java.lang.Object[] { notPositiveDefiniteMatrixException5, notPositiveDefiniteMatrixException10 };
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11, throwable12);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException26);
        java.lang.Throwable[] throwableArray28 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray11, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, (double) (short) -1, (double) (byte) 100, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10.0d, 0.0d };
        double[] doubleArray13 = new double[] { 10.0d, 0.0d };
        double[] doubleArray16 = new double[] { 10.0d, 0.0d };
        double[] doubleArray19 = new double[] { 10.0d, 0.0d };
        double[] doubleArray22 = new double[] { 10.0d, 0.0d };
        double[][] doubleArray23 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair24 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", throwable1);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (short) 100, 1.0d, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        double[] doubleArray21 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, (double) 100);
        double[] doubleArray28 = pointCostPair27.getPoint();
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair32 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray28, doubleArray29, (int) (byte) -1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.Throwable[] throwableArray7 = convergenceException6.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray10 = notPositiveDefiniteMatrixException9.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.String str16 = notPositiveDefiniteMatrixException12.getPattern();
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray10, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.String str29 = convergenceException28.getPattern();
        java.lang.String str30 = convergenceException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray33 = convergenceException31.getArguments();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException37.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        java.lang.Object[] objArray52 = costException51.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray43, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException58 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException58.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        java.lang.String str63 = notPositiveDefiniteMatrixException59.getPattern();
        java.lang.Throwable[] throwableArray64 = notPositiveDefiniteMatrixException59.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException59);
        java.lang.Throwable[] throwableArray66 = notPositiveDefiniteMatrixException59.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray66);
        java.lang.String str68 = convergenceException67.getPattern();
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException67);
        convergenceException55.addSuppressed((java.lang.Throwable) convergenceException67);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "not positive definite matrix" + "'", str16, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "not positive definite matrix" + "'", str63, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str68, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), 0.0d, 1.0d, (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0);
        double[] doubleArray12 = pointCostPair11.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, 35.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) 100L, 0.0d, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        java.lang.String str12 = convergenceException10.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray4 = notPositiveDefiniteMatrixException3.getArguments();
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException("Convergence failed", objArray4);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray4);
        java.lang.String str8 = costException7.getPattern();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str8, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException13.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        convergenceException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        java.lang.Throwable[] throwableArray19 = convergenceException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException21);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        double double21 = pointCostPair20.getCost();
        double[] doubleArray22 = pointCostPair20.getPoint();
        double double23 = pointCostPair20.getCost();
        double[] doubleArray24 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 0L);
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = pointCostPair26.getPoint();
        java.lang.Class<?> wildcardClass29 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, 0.0d, 0.0d, (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 10, 100, (short) 100, 100.0f };
        double[] doubleArray17 = new double[] { 10, 100, (short) 100, 100.0f };
        double[] doubleArray22 = new double[] { 10, 100, (short) 100, 100.0f };
        double[] doubleArray27 = new double[] { 10, 100, (short) 100, 100.0f };
        double[] doubleArray32 = new double[] { 10, 100, (short) 100, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray33, (int) 'a', (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) 'a', 32.0d, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) (-1L), (double) 100L, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 10.0f);
        double[] doubleArray25 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 10.0d);
        double[] doubleArray28 = pointCostPair27.getPoint();
        double[] doubleArray29 = pointCostPair27.getPoint();
        double[] doubleArray30 = pointCostPair27.getPoint();
        double[] doubleArray31 = pointCostPair27.getPoint();
        double[] doubleArray32 = pointCostPair27.getPoint();
        double[] doubleArray33 = pointCostPair27.getPoint();
        double[] doubleArray34 = pointCostPair27.getPoint();
        double double35 = pointCostPair27.getCost();
        double double36 = pointCostPair27.getCost();
        double double37 = pointCostPair27.getCost();
        double[] doubleArray38 = pointCostPair27.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray13, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        double[] doubleArray11 = pointCostPair10.getPoint();
        double double12 = pointCostPair10.getCost();
        double[] doubleArray13 = pointCostPair10.getPoint();
        double double14 = pointCostPair10.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        java.lang.Object[] objArray18 = costException17.getArguments();
        java.lang.Throwable[] throwableArray19 = costException17.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException17);
        java.lang.Object[] objArray21 = costException17.getArguments();
        java.lang.Object[] objArray30 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("hi!", objArray30);
        java.lang.Throwable[] throwableArray32 = costException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray21, (java.lang.Throwable) convergenceException34);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray21);
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException(throwable40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        java.lang.Throwable[] throwableArray43 = convergenceException42.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException45 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray46 = notPositiveDefiniteMatrixException45.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException48 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException47.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        java.lang.String str52 = notPositiveDefiniteMatrixException48.getPattern();
        java.lang.Throwable[] throwableArray53 = notPositiveDefiniteMatrixException48.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray46, (java.lang.Throwable) notPositiveDefiniteMatrixException48);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException(throwable58);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException59, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray63);
        java.lang.String str65 = convergenceException64.getPattern();
        java.lang.String str66 = convergenceException64.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException67);
        java.lang.Object[] objArray69 = convergenceException67.getArguments();
        notPositiveDefiniteMatrixException48.addSuppressed((java.lang.Throwable) convergenceException67);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) notPositiveDefiniteMatrixException48);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray43);
        java.lang.Throwable[] throwableArray73 = convergenceException72.getSuppressed();
        costException37.addSuppressed((java.lang.Throwable) convergenceException72);
        convergenceException6.addSuppressed((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "not positive definite matrix" + "'", str52, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("", objArray10);
        java.lang.Class<?> wildcardClass13 = costException12.getClass();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = new java.lang.Object[] { wildcardClass13, 'a', (-1.0f), "not positive definite matrix", costException25 };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray33 = costException32.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException32);
        java.lang.Object[] objArray36 = costException32.getArguments();
        java.lang.String str37 = costException32.getPattern();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException32);
        java.lang.Object[] objArray39 = costException38.getArguments();
        java.lang.String str40 = costException38.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str40, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 100, 35.0d, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 52.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 0.0d);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double[] doubleArray23 = pointCostPair21.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        double double34 = pointCostPair33.getCost();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (short) 1);
        double double45 = pointCostPair44.getCost();
        double[] doubleArray46 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray46, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair49 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray23, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 0, 32.0d, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[][] doubleArray11 = new double[][] { doubleArray8, doubleArray9, doubleArray10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray11, (int) (byte) -1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', 10.0d, (double) 0.0f, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray6 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        java.lang.Object[] objArray9 = costException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) '4', (double) (short) 0, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[][] doubleArray10 = new double[][] { doubleArray8, doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair13 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray10, (int) (byte) 10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (byte) 10, (double) '4', (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException10);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.Throwable[] throwableArray14 = convergenceException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray18);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        java.lang.Throwable[] throwableArray29 = costException28.getSuppressed();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = costException38.getArguments();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException(throwable46);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException47, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("", objArray51);
        java.lang.Class<?> wildcardClass54 = costException53.getClass();
        java.lang.Object[] objArray64 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException("hi!", objArray64);
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException66);
        java.lang.Object[] objArray68 = new java.lang.Object[] { wildcardClass54, 'a', (-1.0f), "not positive definite matrix", costException66 };
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("hi!", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException69);
        costException38.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException(throwable72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException74);
        convergenceException70.addSuppressed((java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray29, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException78);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str13, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray19);
        java.lang.Object[] objArray22 = costException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray10);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        double[] doubleArray7 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray7, 10.0d);
        double double10 = pointCostPair9.getCost();
        java.lang.Object[] objArray12 = new java.lang.Object[] { pointCostPair9, (-1) };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray12);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException29);
        java.lang.Throwable[] throwableArray31 = convergenceException30.getSuppressed();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException(throwable32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException33);
        java.lang.String str35 = convergenceException33.getPattern();
        java.lang.Object[] objArray36 = convergenceException33.getArguments();
        java.lang.Throwable[] throwableArray37 = convergenceException33.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray31, (java.lang.Throwable) convergenceException33);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray12, (java.lang.Throwable) convergenceException38);
        java.lang.String str40 = convergenceException38.getPattern();
        java.lang.Object[] objArray41 = convergenceException38.getArguments();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str40, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = convergenceException13.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        java.lang.Object[] objArray28 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException30);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) convergenceException31);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException33);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 0L, (double) 100, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 97.0d);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = pointCostPair26.getPoint();
        double[] doubleArray29 = pointCostPair26.getPoint();
        double[] doubleArray30 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) 100.0f);
        double double33 = pointCostPair32.getCost();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray8, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        java.lang.String str14 = convergenceException12.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 32.0d, 35.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), 0.0d, 52.0d, (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (-1.0f));
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (short) 100);
        double double26 = pointCostPair25.getCost();
        double[] doubleArray27 = pointCostPair25.getPoint();
        double[] doubleArray34 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray27, doubleArray34, (int) '#', (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        java.lang.Object[] objArray14 = costException12.getArguments();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException(throwable25);
        java.lang.String str27 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException26);
        java.lang.String str29 = convergenceException26.getPattern();
        double[] doubleArray37 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, 10.0d);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException(throwable43);
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException44, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray48);
        java.lang.String str50 = convergenceException49.getPattern();
        org.apache.commons.math.optimization.NelderMead nelderMead55 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10L, (double) '4', (double) 100);
        java.lang.Object[] objArray57 = new java.lang.Object[] { convergenceException26, 0L, 10.0d, convergenceException49, '4', (short) -1 };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("hi!", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray68);
        java.lang.Object[] objArray71 = costException70.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("hi!", objArray71);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray71);
        java.lang.Object[] objArray80 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("hi!", objArray80);
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray80);
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException82);
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException82);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray71, (java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("", objArray57, (java.lang.Throwable) costException85);
        java.lang.Throwable[] throwableArray88 = costException85.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("hi!", objArray14, (java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException90);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException90);
        java.lang.Throwable[] throwableArray93 = convergenceException90.getSuppressed();
        org.apache.commons.math.optimization.CostException costException94 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray93);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 97.0d, 32.0d, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        double[] doubleArray17 = pointCostPair12.getPoint();
        double[] doubleArray18 = pointCostPair12.getPoint();
        double[] doubleArray19 = pointCostPair12.getPoint();
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 0.0d);
        double double25 = pointCostPair24.getCost();
        double double26 = pointCostPair24.getCost();
        double[] doubleArray27 = pointCostPair24.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair30 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray19, doubleArray27, 1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray14);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        java.lang.Object[] objArray23 = convergenceException21.getArguments();
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray14, (java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray26 = convergenceException25.getSuppressed();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: ", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray26);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Throwable[] throwableArray37 = convergenceException36.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray37);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException(throwable46);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException47, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        java.lang.String str53 = convergenceException52.getPattern();
        java.lang.String str54 = convergenceException52.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException55);
        java.lang.Object[] objArray57 = convergenceException55.getArguments();
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException(throwable61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        java.lang.String str64 = convergenceException62.getPattern();
        java.lang.Object[] objArray65 = convergenceException62.getArguments();
        java.lang.Throwable[] throwableArray66 = convergenceException62.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray66);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException(throwable72);
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException73, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray77);
        java.lang.String str79 = convergenceException78.getPattern();
        java.lang.String str80 = convergenceException78.getPattern();
        java.lang.Object[] objArray81 = convergenceException78.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray66, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray57, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) convergenceException84);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException6);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException(throwable14);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException15, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray19);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException(throwable25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray19, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException32);
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 1, 10.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 'a', (-1.0d), (-1.0f), '4', ' ' };
        double[] doubleArray19 = new double[] { 'a', (-1.0d), (-1.0f), '4', ' ' };
        double[] doubleArray25 = new double[] { 'a', (-1.0d), (-1.0f), '4', ' ' };
        double[] doubleArray31 = new double[] { 'a', (-1.0d), (-1.0f), '4', ' ' };
        double[][] doubleArray32 = new double[][] { doubleArray13, doubleArray19, doubleArray25, doubleArray31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray32, (int) '4', (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, -1.0, -1.0, 52.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, -1.0, -1.0, 52.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[97.0, -1.0, -1.0, 52.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[97.0, -1.0, -1.0, 52.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        java.lang.String str8 = notPositiveDefiniteMatrixException2.getPattern();
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str10 = costException9.getPattern();
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        java.lang.Object[] objArray26 = costException24.getArguments();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException(throwable32);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException33, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("", objArray37);
        java.lang.Class<?> wildcardClass40 = costException39.getClass();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException52);
        java.lang.Object[] objArray54 = new java.lang.Object[] { wildcardClass40, 'a', (-1.0f), "not positive definite matrix", costException52 };
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("hi!", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        costException24.addSuppressed((java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray58 = costException24.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray58);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException61 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException60.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        java.lang.Object[] objArray63 = notPositiveDefiniteMatrixException61.getArguments();
        convergenceException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        java.lang.Object[] objArray65 = new java.lang.Object[] { convergenceException59 };
        java.lang.Object[] objArray73 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("hi!", objArray73);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("hi!", objArray65, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray65);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", objArray65);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException81);
        java.lang.Throwable[] throwableArray83 = convergenceException81.getSuppressed();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, 100.0d, (double) 1, 35.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray8, (int) (byte) 100, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        convergenceException14.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray11, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        java.lang.String str24 = costException23.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str24, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, 0.0d, 52.0d, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) '4', (double) 0, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (short) 0);
        double[] doubleArray20 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 10.0d);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double double24 = pointCostPair22.getCost();
        double double25 = pointCostPair22.getCost();
        double[] doubleArray26 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 1);
        double[] doubleArray31 = pointCostPair30.getPoint();
        double[] doubleArray32 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair37 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray8, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.String str11 = costException10.getPattern();
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException12);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "not positive definite matrix" + "'", str11, "not positive definite matrix");
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) 0L, (double) 10, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (byte) 1, (double) (byte) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[] doubleArray21 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[] doubleArray28 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[] doubleArray35 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[] doubleArray42 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[] doubleArray49 = new double[] { (-1), 10.0f, 10.0d, '4', 97.0d, 1L };
        double[][] doubleArray50 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 10.0, 10.0, 52.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (byte) -1, (double) 'a', 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) 0L);
        double[] doubleArray25 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray17, doubleArray25, 0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[97.0, 100.0, -1.0]");
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (-1.0f));
        double[] doubleArray11 = pointCostPair10.getPoint();
        double double12 = pointCostPair10.getCost();
        double[] doubleArray13 = pointCostPair10.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100.0f);
        double double18 = pointCostPair17.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (short) -1, (double) (byte) 100, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 100, (byte) 0, (byte) 100 };
        double[] doubleArray15 = new double[] { 100, (byte) 0, (byte) 100 };
        double[] doubleArray19 = new double[] { 100, (byte) 0, (byte) 100 };
        double[] doubleArray23 = new double[] { 100, (byte) 0, (byte) 100 };
        double[] doubleArray27 = new double[] { 100, (byte) 0, (byte) 100 };
        double[][] doubleArray28 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23, doubleArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) (byte) 10, (double) (short) 0, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10.0d, (byte) 10 };
        double[] doubleArray13 = new double[] { 10.0d, (byte) 10 };
        double[] doubleArray16 = new double[] { 10.0d, (byte) 10 };
        double[][] doubleArray17 = new double[][] { doubleArray10, doubleArray13, doubleArray16 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair20 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray17, (int) (byte) -1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, 0.0d, (double) (short) 1, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) 0.0f);
        double[] doubleArray14 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 52.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray12);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray22 = notPositiveDefiniteMatrixException21.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException23 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException23.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException24);
        java.lang.String str28 = notPositiveDefiniteMatrixException24.getPattern();
        java.lang.Throwable[] throwableArray29 = notPositiveDefiniteMatrixException24.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray22, (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException35, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        java.lang.String str42 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException43);
        java.lang.Object[] objArray45 = convergenceException43.getArguments();
        notPositiveDefiniteMatrixException24.addSuppressed((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException49.addSuppressed((java.lang.Throwable) convergenceException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException49);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray66);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray66);
        java.lang.Object[] objArray72 = convergenceException71.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException73 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray80 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("hi!", objArray80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("", objArray80);
        notPositiveDefiniteMatrixException73.addSuppressed((java.lang.Throwable) convergenceException82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray72, (java.lang.Throwable) convergenceException82);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray72);
        convergenceException54.addSuppressed((java.lang.Throwable) costException85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray12, (java.lang.Throwable) costException85);
        org.apache.commons.math.optimization.CostException costException88 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException85);
        java.lang.String str89 = costException85.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "not positive definite matrix" + "'", str28, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException" + "'", str89, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, 35.0d, (double) ' ', (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException15);
        java.lang.Throwable[] throwableArray17 = convergenceException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray21 = convergenceException18.getArguments();
        java.lang.Object[] objArray22 = convergenceException18.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, 0.0d, (double) (short) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { (byte) 100, '#', 97.0d };
        double[] doubleArray15 = new double[] { (byte) 100, '#', 97.0d };
        double[] doubleArray19 = new double[] { (byte) 100, '#', 97.0d };
        double[] doubleArray23 = new double[] { (byte) 100, '#', 97.0d };
        double[] doubleArray27 = new double[] { (byte) 100, '#', 97.0d };
        double[] doubleArray31 = new double[] { (byte) 100, '#', 97.0d };
        double[][] doubleArray32 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 35.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray19, throwable20);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException25 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException24.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException25);
        java.lang.String str29 = notPositiveDefiniteMatrixException25.getPattern();
        java.lang.Throwable[] throwableArray30 = notPositiveDefiniteMatrixException25.getSuppressed();
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) costException39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException42);
        java.lang.String str44 = costException42.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException42);
        java.lang.Throwable[] throwableArray48 = costException42.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "not positive definite matrix" + "'", str29, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException11);
        java.lang.Throwable[] throwableArray13 = costException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.Object[] objArray17 = costException16.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) 100, (double) (-1L), 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 'a', 100, (short) 0 };
        double[] doubleArray15 = new double[] { 'a', 100, (short) 0 };
        double[] doubleArray19 = new double[] { 'a', 100, (short) 0 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray15, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[97.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        java.lang.String str14 = convergenceException12.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str14, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray3 = notPositiveDefiniteMatrixException2.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        java.lang.Throwable[] throwableArray10 = notPositiveDefiniteMatrixException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray3, (java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray3);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 0, 32.0d, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException15);
        java.lang.Object[] objArray17 = convergenceException15.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray17);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException22 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException21.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        java.lang.String str26 = notPositiveDefiniteMatrixException22.getPattern();
        java.lang.Throwable[] throwableArray27 = notPositiveDefiniteMatrixException22.getSuppressed();
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) costException36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        java.lang.String str43 = convergenceException42.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "not positive definite matrix" + "'", str26, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str43, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray44);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray53);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException55);
        java.lang.Object[] objArray57 = costException55.getArguments();
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException(throwable63);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException64, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("", objArray68);
        java.lang.Class<?> wildcardClass71 = costException70.getClass();
        java.lang.Object[] objArray81 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("hi!", objArray81);
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException83);
        java.lang.Object[] objArray85 = new java.lang.Object[] { wildcardClass71, 'a', (-1.0f), "not positive definite matrix", costException83 };
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("hi!", objArray85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException86);
        costException55.addSuppressed((java.lang.Throwable) convergenceException87);
        java.lang.Object[] objArray89 = costException55.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray44, (java.lang.Throwable) convergenceException90);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException90);
        java.lang.Class<?> wildcardClass93 = convergenceException90.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) 0.0f, (double) (byte) 10, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 100L);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 0.0f);
        double[] doubleArray33 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) (short) -1);
        double[] doubleArray38 = pointCostPair37.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray16, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (short) -1, (double) 10L, 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, 52.0d, (double) (byte) 0, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.String str6 = convergenceException4.getPattern();
        java.lang.Object[] objArray7 = convergenceException4.getArguments();
        java.lang.Throwable[] throwableArray8 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray8);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException(throwable14);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException15, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.String str21 = convergenceException20.getPattern();
        java.lang.String str22 = convergenceException20.getPattern();
        java.lang.Object[] objArray23 = convergenceException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) convergenceException20);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        java.lang.Object[] objArray36 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray36);
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException37);
        java.lang.Throwable[] throwableArray39 = convergenceException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        java.lang.Object[] objArray41 = convergenceException37.getArguments();
        java.lang.String str42 = convergenceException37.getPattern();
        java.lang.String str43 = convergenceException37.toString();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str42, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str43, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (short) -1, (double) (short) -1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray12);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        convergenceException17.addSuppressed((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray12, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: ", objArray12);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException(throwable0);
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        java.lang.String str3 = convergenceException2.getPattern();
        java.lang.Object[] objArray4 = convergenceException2.getArguments();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException18, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("", objArray22);
        java.lang.Class<?> wildcardClass25 = costException24.getClass();
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = new java.lang.Object[] { wildcardClass25, 'a', (-1.0f), "not positive definite matrix", costException37 };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        costException9.addSuppressed((java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray43 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: Convergence failed");
        convergenceException44.addSuppressed((java.lang.Throwable) convergenceException47);
        java.lang.Object[] objArray49 = convergenceException47.getArguments();
        java.lang.Object[] objArray50 = convergenceException47.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.String str22 = convergenceException21.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray10, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        java.lang.String str29 = convergenceException28.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str29, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100L, (double) 0.0f, (double) 100.0f, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[][] doubleArray10 = new double[][] { doubleArray8, doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair13 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray10, (int) (short) 0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), 0.0d, (double) (byte) 1, 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (-1L));
        double[] doubleArray18 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) 0);
        double[] doubleArray21 = pointCostPair20.getPoint();
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 1.0f);
        double[] doubleArray29 = pointCostPair28.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair30 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray21, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", throwable1);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43, throwable45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException46);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException53, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("hi!", objArray65);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException(throwable67);
        java.lang.String str69 = convergenceException68.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray57, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException71);
        java.lang.Object[] objArray73 = convergenceException71.getArguments();
        java.lang.String str74 = convergenceException71.getPattern();
        java.lang.Object[] objArray75 = convergenceException71.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "not positive definite matrix" + "'", str74, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (byte) -1, (double) 'a', 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray8, (int) (byte) -1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException(throwable2);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray15);
        java.lang.String str17 = costException16.getPattern();
        java.lang.String str18 = costException16.getPattern();
        costException4.addSuppressed((java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException16);
        java.lang.String str21 = costException16.getPattern();
        java.lang.String str22 = costException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) costException16);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray34);
        java.lang.Object[] objArray37 = costException36.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray37);
        java.lang.Object[] objArray41 = convergenceException40.getArguments();
        convergenceException23.addSuppressed((java.lang.Throwable) convergenceException40);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str17, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str18, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str21, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str22, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (short) 100);
        double[] doubleArray11 = pointCostPair10.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (byte) 0);
        double double14 = pointCostPair13.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray13 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray13);
        java.lang.Throwable[] throwableArray15 = convergenceException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException12);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException2.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException22);
        java.lang.String str24 = convergenceException23.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        java.lang.String str27 = convergenceException23.getPattern();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str24, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str27, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        double double14 = pointCostPair13.getCost();
        double double15 = pointCostPair13.getCost();
        double[] doubleArray16 = pointCostPair13.getPoint();
        double double17 = pointCostPair13.getCost();
        double[] doubleArray18 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) 'a');
        double double21 = pointCostPair20.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 97.0d + "'", double21 == 97.0d);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) 100, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double double25 = pointCostPair24.getCost();
        double[] doubleArray26 = pointCostPair24.getPoint();
        double[] doubleArray27 = pointCostPair24.getPoint();
        double[] doubleArray28 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (byte) 100);
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) -1);
        double[] doubleArray44 = pointCostPair43.getPoint();
        double[] doubleArray45 = pointCostPair43.getPoint();
        double double46 = pointCostPair43.getCost();
        double[] doubleArray47 = pointCostPair43.getPoint();
        double[] doubleArray48 = pointCostPair43.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray48, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair53 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray28, doubleArray48, (int) (byte) 100, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 0.0f);
        double[] doubleArray7 = pointCostPair6.getPoint();
        double double8 = pointCostPair6.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) (byte) 1, (double) (short) 1, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        java.lang.String str9 = convergenceException7.getPattern();
        java.lang.Object[] objArray10 = convergenceException7.getArguments();
        java.lang.Throwable[] throwableArray11 = convergenceException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException17);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 0.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double double18 = pointCostPair15.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (-1.0d), (double) (short) 0, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 1);
        double[] doubleArray28 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 0.0f);
        double[] doubleArray37 = pointCostPair36.getPoint();
        double[] doubleArray38 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 10.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) 100, (double) (-1L), (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, 0.0d, 1.0d, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray8, (int) 'a', 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        java.lang.Object[] objArray16 = costException15.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray16, (java.lang.Throwable) costException30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException43);
        java.lang.Object[] objArray45 = costException43.getArguments();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException(throwable47);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException(throwable49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        convergenceException48.addSuppressed((java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray45, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray16, (java.lang.Throwable) costException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray16);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '#', (double) 10.0f, (double) 1.0f, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 97.0d);
        double[] doubleArray30 = pointCostPair29.getPoint();
        double double31 = pointCostPair29.getCost();
        double double32 = pointCostPair29.getCost();
        double[] doubleArray33 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) 10);
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 0.0d);
        double[] doubleArray41 = pointCostPair40.getPoint();
        double double42 = pointCostPair40.getCost();
        double[] doubleArray43 = pointCostPair40.getPoint();
        double[] doubleArray44 = pointCostPair40.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray44, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair47 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray33, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 97.0d + "'", double31 == 97.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 97.0d + "'", double32 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException18, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("", objArray22);
        java.lang.Class<?> wildcardClass25 = costException24.getClass();
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = new java.lang.Object[] { wildcardClass25, 'a', (-1.0f), "not positive definite matrix", costException37 };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        costException9.addSuppressed((java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException43);
        java.lang.String str45 = convergenceException43.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "not positive definite matrix" + "'", str45, "not positive definite matrix");
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException13);
        java.lang.Throwable[] throwableArray15 = convergenceException13.getSuppressed();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray25 = notPositiveDefiniteMatrixException24.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException26 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException27 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException26.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException27);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException27);
        java.lang.String str31 = notPositiveDefiniteMatrixException27.getPattern();
        java.lang.Throwable[] throwableArray32 = notPositiveDefiniteMatrixException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray25, (java.lang.Throwable) notPositiveDefiniteMatrixException27);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException(throwable37);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException38, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray42);
        java.lang.String str44 = convergenceException43.getPattern();
        java.lang.String str45 = convergenceException43.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException46);
        java.lang.Object[] objArray48 = convergenceException46.getArguments();
        notPositiveDefiniteMatrixException27.addSuppressed((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) notPositiveDefiniteMatrixException27);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray60);
        java.lang.Object[] objArray63 = costException62.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("hi!", objArray63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException64);
        java.lang.Throwable[] throwableArray66 = convergenceException64.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException64);
        java.lang.Throwable[] throwableArray69 = convergenceException68.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) convergenceException68);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.String str72 = convergenceException70.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "not positive definite matrix" + "'", str31, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str72, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray11);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("hi!", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray31);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException33);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException35);
        java.lang.Object[] objArray37 = costException35.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException35);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("Convergence failed", (java.lang.Object[]) throwableArray9);
        java.lang.Object[] objArray11 = costException10.getArguments();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray19);
        java.lang.Object[] objArray22 = costException21.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray22);
        java.lang.String str24 = convergenceException23.getPattern();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) convergenceException23);
        java.lang.Throwable[] throwableArray27 = convergenceException26.getSuppressed();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", (java.lang.Object[]) throwableArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray37);
        java.lang.Object[] objArray40 = costException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException41);
        java.lang.Throwable[] throwableArray43 = convergenceException41.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        java.lang.Throwable[] throwableArray45 = convergenceException44.getSuppressed();
        java.lang.Object[] objArray52 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("hi!", objArray52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException53);
        java.lang.Throwable[] throwableArray55 = costException53.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException56 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException57 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException56.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException57);
        java.lang.Object[] objArray59 = notPositiveDefiniteMatrixException57.getArguments();
        costException53.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException57);
        java.lang.Object[] objArray61 = costException53.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray61);
        convergenceException44.addSuppressed((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException44);
        java.lang.String str65 = convergenceException44.getPattern();
        costException28.addSuppressed((java.lang.Throwable) convergenceException44);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str24, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) 10, 1.0d, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 97.0d, 100, 100.0d, (byte) 10 };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray13, (int) (short) 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 100.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) ' ', (double) (byte) -1, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray12 = pointCostPair11.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (-1L));
        double double15 = pointCostPair14.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException14);
        java.lang.Object[] objArray17 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException22 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException21.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException22);
        java.lang.String str26 = notPositiveDefiniteMatrixException22.getPattern();
        java.lang.Throwable[] throwableArray27 = notPositiveDefiniteMatrixException22.getSuppressed();
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) costException36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) costException39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray17);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray43);
        java.lang.Object[] objArray45 = costException44.getArguments();
        java.lang.Object[] objArray46 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray46);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "not positive definite matrix" + "'", str26, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException4);
        java.lang.String str6 = costException5.getPattern();
        java.lang.Throwable[] throwableArray7 = costException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException5);
        java.lang.Throwable[] throwableArray9 = costException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray9);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = costException25.getArguments();
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("", objArray38);
        java.lang.Class<?> wildcardClass41 = costException40.getClass();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException53);
        java.lang.Object[] objArray55 = new java.lang.Object[] { wildcardClass41, 'a', (-1.0f), "not positive definite matrix", costException53 };
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException56);
        costException25.addSuppressed((java.lang.Throwable) convergenceException57);
        java.lang.Object[] objArray59 = costException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray59);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException61 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException62 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException61.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException62);
        java.lang.Object[] objArray64 = notPositiveDefiniteMatrixException62.getArguments();
        convergenceException60.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { convergenceException60 };
        java.lang.Object[] objArray74 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException("hi!", objArray74);
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException76);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("hi!", objArray66, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray66);
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException", objArray66);
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException(throwable83);
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException(throwable85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException86);
        convergenceException84.addSuppressed((java.lang.Throwable) convergenceException86);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray66, (java.lang.Throwable) convergenceException90);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException92);
        java.lang.String str94 = convergenceException92.getPattern();
        java.lang.String str95 = convergenceException92.getPattern();
        java.lang.Object[] objArray96 = convergenceException92.getArguments();
        java.lang.Throwable[] throwableArray97 = convergenceException92.getSuppressed();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str94, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str95, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[]");
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException4);
        convergenceException1.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException7);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        java.lang.String str14 = convergenceException13.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException13);
        java.lang.String str16 = convergenceException13.getPattern();
        double[] doubleArray24 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException(throwable30);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException31, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        java.lang.String str37 = convergenceException36.getPattern();
        org.apache.commons.math.optimization.NelderMead nelderMead42 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10L, (double) '4', (double) 100);
        java.lang.Object[] objArray44 = new java.lang.Object[] { convergenceException13, 0L, 10.0d, convergenceException36, '4', (short) -1 };
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray44);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("hi!", objArray55);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray55);
        java.lang.Object[] objArray58 = costException57.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray58);
        java.lang.Object[] objArray67 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("hi!", objArray67);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray67);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException69);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray58, (java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray44, (java.lang.Throwable) costException72);
        java.lang.Throwable[] throwableArray75 = costException72.getSuppressed();
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException(throwable76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException77);
        java.lang.String str79 = convergenceException77.getPattern();
        java.lang.Object[] objArray80 = convergenceException77.getArguments();
        java.lang.Throwable[] throwableArray81 = convergenceException77.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException77);
        java.lang.Throwable[] throwableArray83 = convergenceException77.getSuppressed();
        java.lang.Object[] objArray84 = convergenceException77.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray75, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.optimization.CostException costException86 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray75);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[org.apache.commons.math.ConvergenceException, 0, 10.0, org.apache.commons.math.ConvergenceException: , 4, -1]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException13);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException2);
        java.lang.Object[] objArray19 = convergenceException18.getArguments();
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException18);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException11);
        java.lang.Throwable[] throwableArray13 = costException11.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        java.lang.Object[] objArray28 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray28);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray37);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray28, (java.lang.Throwable) costException42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        java.lang.String str48 = convergenceException45.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str48, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, 0.0d, 52.0d, (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = notPositiveDefiniteMatrixException10.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray11, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str20 = convergenceException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray8, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str20, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 1.0f, 32.0d, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (short) 1, (short) 1 };
        double[] doubleArray13 = new double[] { (short) 1, (short) 1 };
        double[] doubleArray16 = new double[] { (short) 1, (short) 1 };
        double[] doubleArray19 = new double[] { (short) 1, (short) 1 };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray20, 10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26);
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18, (java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        java.lang.Object[] objArray42 = costException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException(throwable49);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException50, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray54);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException(throwable58);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException(throwable60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException61);
        convergenceException59.addSuppressed((java.lang.Throwable) convergenceException61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray54, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", objArray42, (java.lang.Throwable) convergenceException65);
        convergenceException28.addSuppressed((java.lang.Throwable) convergenceException66);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException66);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = costException18.getSuppressed();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray26);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = costException28.getArguments();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException37, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("", objArray41);
        java.lang.Class<?> wildcardClass44 = costException43.getClass();
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException56);
        java.lang.Object[] objArray58 = new java.lang.Object[] { wildcardClass44, 'a', (-1.0f), "not positive definite matrix", costException56 };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        costException28.addSuppressed((java.lang.Throwable) convergenceException60);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException(throwable62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException63);
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException64);
        convergenceException60.addSuppressed((java.lang.Throwable) costException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray19, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException67);
        costException9.addSuppressed((java.lang.Throwable) convergenceException67);
        java.lang.Throwable[] throwableArray71 = costException9.getSuppressed();
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray71);
        java.lang.String str73 = costException72.getPattern();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) 1, (double) '#', 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (short) -1, '4', 1L, 10L, 97.0d, (-1.0d) };
        double[] doubleArray21 = new double[] { (short) -1, '4', 1L, 10L, 97.0d, (-1.0d) };
        double[] doubleArray28 = new double[] { (short) -1, '4', 1L, 10L, 97.0d, (-1.0d) };
        double[] doubleArray35 = new double[] { (short) -1, '4', 1L, 10L, 97.0d, (-1.0d) };
        double[] doubleArray42 = new double[] { (short) -1, '4', 1L, 10L, 97.0d, (-1.0d) };
        double[][] doubleArray43 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray43, (int) (byte) 10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (-1.0f), 10.0d, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (-1));
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 10.0d);
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double[] doubleArray36 = pointCostPair34.getPoint();
        double[] doubleArray37 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray20, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException7);
        java.lang.String str9 = convergenceException7.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        java.lang.String str13 = costException12.getPattern();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str9, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) 'a', (double) 0, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11, doubleArray12, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray14, 0, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.Throwable[] throwableArray40 = costException38.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray30, (java.lang.Throwable) costException38);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray30);
        java.lang.Throwable[] throwableArray44 = convergenceException43.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray10);
        java.lang.Throwable[] throwableArray12 = costException11.getSuppressed();
        java.lang.String str13 = costException11.getPattern();
        java.lang.String str14 = costException11.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str13, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str14, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, 100.0d, (double) 1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException1.addSuppressed((java.lang.Throwable) convergenceException3);
        java.lang.String str5 = convergenceException3.getPattern();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException12, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray21 = convergenceException19.getSuppressed();
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray24 = costException23.getSuppressed();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str5, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, (double) (byte) -1, (double) (-1.0f), (double) (short) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 0.0d);
        double[] doubleArray14 = pointCostPair13.getPoint();
        double double15 = pointCostPair13.getCost();
        double[] doubleArray16 = pointCostPair13.getPoint();
        double[] doubleArray17 = pointCostPair13.getPoint();
        double[] doubleArray18 = pointCostPair13.getPoint();
        double[] doubleArray19 = pointCostPair13.getPoint();
        double[] doubleArray20 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray8, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 10.0f, (double) 10.0f, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double[] doubleArray23 = pointCostPair21.getPoint();
        double double24 = pointCostPair21.getCost();
        double[] doubleArray25 = pointCostPair21.getPoint();
        double[] doubleArray26 = pointCostPair21.getPoint();
        double[] doubleArray27 = pointCostPair21.getPoint();
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 'a');
        double[] doubleArray37 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (-1L));
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray27, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '#');
        double double21 = pointCostPair20.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = costException20.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.String str25 = notPositiveDefiniteMatrixException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray23);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = costException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) costException41);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = costException50.getSuppressed();
        java.lang.String str52 = costException50.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException50);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException54);
        java.lang.String str56 = costException55.getPattern();
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException55);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str56, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.String str8 = convergenceException4.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str8, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, (-1.0d), (double) 0, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { 52.0d, 0, 97.0d, 'a', 100L };
        double[][] doubleArray14 = new double[][] { doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, 0.0, 97.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray2 = notPositiveDefiniteMatrixException1.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray2, (java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException(throwable14);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException15, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.String str21 = convergenceException20.getPattern();
        java.lang.String str22 = convergenceException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray25 = convergenceException23.getArguments();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(throwable34);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException35, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        java.lang.String str41 = convergenceException40.getPattern();
        java.lang.String str42 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException43);
        java.lang.String str45 = costException44.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException46);
        java.lang.Object[] objArray48 = convergenceException47.getArguments();
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray48);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray60);
        java.lang.Object[] objArray63 = costException62.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException62);
        java.lang.Object[] objArray65 = costException62.getArguments();
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray65);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) convergenceException70);
        costException49.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.Object[] objArray74 = costException49.getArguments();
        costException27.addSuppressed((java.lang.Throwable) costException49);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException5);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException12, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException18);
        java.lang.String str20 = convergenceException18.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException" + "'", str20, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) (byte) 10, (double) (short) 10, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (-1.0d));
        double[] doubleArray23 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 52.0d);
        double[] doubleArray33 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, 10.0d);
        double[] doubleArray40 = pointCostPair39.getPoint();
        double double41 = pointCostPair39.getCost();
        double[] doubleArray42 = pointCostPair39.getPoint();
        double[] doubleArray43 = pointCostPair39.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray43, 97.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair48 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray23, doubleArray43, 10, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException20);
        java.lang.Object[] objArray22 = costException20.getArguments();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(throwable28);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException29, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("", objArray33);
        java.lang.Class<?> wildcardClass36 = costException35.getClass();
        java.lang.Object[] objArray46 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("hi!", objArray46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException48);
        java.lang.Object[] objArray50 = new java.lang.Object[] { wildcardClass36, 'a', (-1.0f), "not positive definite matrix", costException48 };
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("hi!", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException51);
        costException20.addSuppressed((java.lang.Throwable) convergenceException52);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException(throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException56);
        convergenceException52.addSuppressed((java.lang.Throwable) costException57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray11);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException(throwable66);
        java.lang.Throwable[] throwableArray68 = convergenceException67.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray68, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException79 = new org.apache.commons.math.optimization.CostException("hi!", objArray78);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray68, (java.lang.Throwable) costException80);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException84);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) 1, (double) 0L, (double) 1);
        java.lang.Class<?> wildcardClass5 = nelderMead4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 0.0f, (double) (byte) 100, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 10L, '4', (-1.0d) };
        double[] doubleArray15 = new double[] { 10L, '4', (-1.0d) };
        double[] doubleArray19 = new double[] { 10L, '4', (-1.0d) };
        double[] doubleArray23 = new double[] { 10L, '4', (-1.0d) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair27 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray24, 1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, (double) 10, (double) (-1), (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 0.0f, 0.0d };
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) 100L);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double[] doubleArray19 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 10.0d);
        double double22 = pointCostPair21.getCost();
        double[] doubleArray23 = pointCostPair21.getPoint();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 100.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray13, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 10.0d, (double) 10.0f, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) (byte) 100, (double) (short) 0, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) 1.0f, (double) (short) 1, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException6);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Object[] objArray12 = notPositiveDefiniteMatrixException10.getArguments();
        convergenceException6.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray15 = convergenceException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException16);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 0, (double) (short) -1, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (byte) 1, 1L };
        double[] doubleArray13 = new double[] { (byte) 1, 1L };
        double[] doubleArray16 = new double[] { (byte) 1, 1L };
        double[][] doubleArray17 = new double[][] { doubleArray10, doubleArray13, doubleArray16 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair20 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray17, (int) (short) 10, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = costException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        java.lang.Object[] objArray27 = costException26.getArguments();
        java.lang.Throwable[] throwableArray28 = costException26.getSuppressed();
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException33);
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException34);
        java.lang.Object[] objArray37 = convergenceException36.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException39);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        java.lang.Object[] objArray20 = costException19.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray23 = convergenceException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray25 = convergenceException24.getSuppressed();
        java.lang.Object[] objArray26 = convergenceException24.getArguments();
        convergenceException7.addSuppressed((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException7 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray8 = notPositiveDefiniteMatrixException7.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.Throwable[] throwableArray15 = notPositiveDefiniteMatrixException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.String str27 = convergenceException26.getPattern();
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("hi!", objArray52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray52);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray52);
        java.lang.Object[] objArray58 = convergenceException57.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray66);
        notPositiveDefiniteMatrixException59.addSuppressed((java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray58, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray58);
        convergenceException40.addSuppressed((java.lang.Throwable) costException71);
        java.lang.String str73 = costException71.getPattern();
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException(throwable77);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException78, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray82);
        java.lang.String str84 = convergenceException83.getPattern();
        java.lang.String str85 = convergenceException83.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException83);
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException86);
        java.lang.Object[] objArray88 = convergenceException86.getArguments();
        java.lang.String str89 = convergenceException86.getPattern();
        java.lang.Throwable[] throwableArray90 = convergenceException86.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException86);
        costException71.addSuppressed((java.lang.Throwable) convergenceException86);
        java.lang.Object[] objArray93 = costException71.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str73, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException5);
        java.lang.Throwable[] throwableArray7 = convergenceException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '#', (double) (short) -1, (double) 0.0f, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair20 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray8, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 0.0d, (double) (byte) 1, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray14 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) 0.0f);
        double[] doubleArray23 = pointCostPair22.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 1.0f);
        double[] doubleArray26 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray8, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 0L, 97.0d, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        java.lang.String str22 = convergenceException20.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException27);
        convergenceException20.addSuppressed((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str22, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (-1L), (double) 0L, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, randomVectorGenerator8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, 100.0d, (double) 1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { (short) 1 };
        double[] doubleArray11 = new double[] { (short) 1 };
        double[] doubleArray13 = new double[] { (short) 1 };
        double[][] doubleArray14 = new double[][] { doubleArray9, doubleArray11, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray14, 10, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) (byte) 0, (double) 100L, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { 10.0f, '#' };
        double[] doubleArray13 = new double[] { 10.0f, '#' };
        double[] doubleArray16 = new double[] { 10.0f, '#' };
        double[][] doubleArray17 = new double[][] { doubleArray10, doubleArray13, doubleArray16 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair20 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray17, 1, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException4);
        java.lang.Object[] objArray6 = costException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException13.getSuppressed();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        convergenceException9.addSuppressed((java.lang.Throwable) costException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray6, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException9);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) 'a', 35.0d, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 100.0d, 10L, (short) -1, (-1.0f) };
        double[] doubleArray17 = new double[] { 100.0d, 10L, (short) -1, (-1.0f) };
        double[] doubleArray22 = new double[] { 100.0d, 10L, (short) -1, (-1.0f) };
        double[] doubleArray27 = new double[] { 100.0d, 10L, (short) -1, (-1.0f) };
        double[] doubleArray32 = new double[] { 100.0d, 10L, (short) -1, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Object[] objArray9 = costException8.getArguments();
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("", objArray9);
        java.lang.Object[] objArray11 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        java.lang.String str13 = costException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException10);
        java.lang.String str15 = convergenceException14.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException" + "'", str15, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 32.0d, 32.0d, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 0.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 100L);
        double[] doubleArray22 = pointCostPair21.getPoint();
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray22, doubleArray23, (-1), (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.String str5 = convergenceException3.getPattern();
        java.lang.Object[] objArray6 = convergenceException3.getArguments();
        java.lang.Throwable[] throwableArray7 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray7);
        java.lang.Class<?> wildcardClass10 = throwableArray7.getClass();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        convergenceException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable[] throwableArray16 = convergenceException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (short) -1, (double) (short) -1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1.0f, 10.0d, (double) (short) -1, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double[] doubleArray25 = pointCostPair24.getPoint();
        double double26 = pointCostPair24.getCost();
        double double27 = pointCostPair24.getCost();
        double[] doubleArray28 = pointCostPair24.getPoint();
        double[] doubleArray29 = pointCostPair24.getPoint();
        double[] doubleArray30 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 35.0d);
        double[] doubleArray36 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) '#');
        double double39 = pointCostPair38.getCost();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray30, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[97.0, 100.0, -1.0]");
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.String str11 = notPositiveDefiniteMatrixException10.getPattern();
        java.lang.String str12 = notPositiveDefiniteMatrixException10.getPattern();
        convergenceException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "not positive definite matrix" + "'", str11, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "not positive definite matrix" + "'", str12, "not positive definite matrix");
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.String str6 = convergenceException4.getPattern();
        java.lang.Object[] objArray7 = convergenceException4.getArguments();
        java.lang.String str8 = convergenceException4.getPattern();
        java.lang.Throwable[] throwableArray9 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray9);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        java.lang.Throwable[] throwableArray49 = convergenceException47.getSuppressed();
        java.lang.Object[] objArray50 = convergenceException47.getArguments();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray57);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException61 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException60.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        convergenceException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        java.lang.String str66 = notPositiveDefiniteMatrixException61.getPattern();
        java.lang.Object[] objArray67 = notPositiveDefiniteMatrixException61.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray50, (java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException69);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "not positive definite matrix" + "'", str66, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 0L, 97.0d, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, randomVectorGenerator8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray5);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("hi!", objArray15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray15);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        java.lang.Object[] objArray19 = costException17.getArguments();
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException(throwable25);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException26, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("", objArray30);
        java.lang.Class<?> wildcardClass33 = costException32.getClass();
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException45);
        java.lang.Object[] objArray47 = new java.lang.Object[] { wildcardClass33, 'a', (-1.0f), "not positive definite matrix", costException45 };
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("hi!", objArray47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException48);
        costException17.addSuppressed((java.lang.Throwable) convergenceException49);
        convergenceException8.addSuppressed((java.lang.Throwable) costException17);
        java.lang.Object[] objArray52 = convergenceException8.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.String str40 = convergenceException39.getPattern();
        java.lang.String str41 = convergenceException39.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        convergenceException28.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = convergenceException42.getArguments();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("", objArray44);
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray56);
        java.lang.Object[] objArray59 = costException58.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("hi!", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException60);
        java.lang.Throwable[] throwableArray62 = convergenceException60.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException60);
        java.lang.Throwable[] throwableArray65 = convergenceException60.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException67);
        java.lang.String str69 = convergenceException68.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray65, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray44, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray15, (java.lang.Throwable) convergenceException72);
        java.lang.String str75 = convergenceException72.getPattern();
        java.lang.String str76 = convergenceException72.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str69, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.math.optimization.CostException" + "'", str75, "org.apache.commons.math.optimization.CostException");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.optimization.CostException" + "'", str76, "org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("", objArray11);
        java.lang.Class<?> wildcardClass14 = costException13.getClass();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { wildcardClass14, 'a', (-1.0f), "not positive definite matrix", costException26 };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.String str32 = costException31.getPattern();
        java.lang.String str33 = costException31.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException31);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray45);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException47);
        java.lang.Object[] objArray49 = costException47.getArguments();
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException(throwable55);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException56, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("", objArray60);
        java.lang.Class<?> wildcardClass63 = costException62.getClass();
        java.lang.Object[] objArray73 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("hi!", objArray73);
        org.apache.commons.math.optimization.CostException costException75 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException75);
        java.lang.Object[] objArray77 = new java.lang.Object[] { wildcardClass63, 'a', (-1.0f), "not positive definite matrix", costException75 };
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("hi!", objArray77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException78);
        costException47.addSuppressed((java.lang.Throwable) convergenceException79);
        java.lang.Object[] objArray81 = costException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray81);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException83 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException84 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException83.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException84);
        java.lang.Object[] objArray86 = notPositiveDefiniteMatrixException84.getArguments();
        convergenceException82.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException84);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException84);
        java.lang.Throwable[] throwableArray89 = notPositiveDefiniteMatrixException84.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException84);
        java.lang.Throwable[] throwableArray91 = notPositiveDefiniteMatrixException84.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray91);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray91);
        convergenceException34.addSuppressed((java.lang.Throwable) convergenceException93);
        java.lang.String str95 = convergenceException34.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str95, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26);
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray18);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Throwable[] throwableArray33 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray35 = convergenceException34.getArguments();
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException(throwable42);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException43, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        convergenceException58.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException60);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        convergenceException49.addSuppressed((java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException67);
        java.lang.Throwable[] throwableArray69 = convergenceException67.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray35, (java.lang.Throwable) convergenceException67);
        java.lang.Object[] objArray72 = convergenceException67.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) (short) 10, (double) (byte) 1, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 32.0d, 1.0d, (short) 1 };
        double[] doubleArray15 = new double[] { 32.0d, 1.0d, (short) 1 };
        double[] doubleArray19 = new double[] { 32.0d, 1.0d, (short) 1 };
        double[] doubleArray23 = new double[] { 32.0d, 1.0d, (short) 1 };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair25 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[32.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[32.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[32.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException13.getSuppressed();
        convergenceException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException11);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException(throwable22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException(throwable22);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("hi!", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException32);
        java.lang.Throwable[] throwableArray34 = costException32.getSuppressed();
        costException25.addSuppressed((java.lang.Throwable) costException32);
        costException21.addSuppressed((java.lang.Throwable) costException32);
        java.lang.Throwable[] throwableArray37 = costException32.getSuppressed();
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException(throwable41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        java.lang.String str44 = convergenceException42.getPattern();
        java.lang.Object[] objArray45 = convergenceException42.getArguments();
        java.lang.Throwable[] throwableArray46 = convergenceException42.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray46);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException53, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        java.lang.String str59 = convergenceException58.getPattern();
        java.lang.String str60 = convergenceException58.getPattern();
        java.lang.Object[] objArray61 = convergenceException58.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray46, (java.lang.Throwable) convergenceException58);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("hi!", objArray70);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray70);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        java.lang.Object[] objArray74 = costException72.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray74);
        convergenceException62.addSuppressed((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) convergenceException75);
        java.lang.String str78 = convergenceException77.toString();
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str78, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray14);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException21 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28);
        notPositiveDefiniteMatrixException21.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray20, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray20);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException34 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException35 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException34.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException34);
        java.lang.Throwable[] throwableArray38 = costException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray43 = convergenceException42.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray43);
        costException37.addSuppressed((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) costException45);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException(throwable56);
        java.lang.String str58 = convergenceException57.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException57);
        java.lang.Throwable[] throwableArray61 = convergenceException60.getSuppressed();
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("hi!", objArray20, (java.lang.Throwable) convergenceException60);
        java.lang.Object[] objArray64 = convergenceException60.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray64);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException17.getSuppressed();
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray19);
        java.lang.String str21 = costException20.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str21, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (-1.0d), (double) (byte) 0, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1.0f, (double) (short) 100, (double) (byte) 100, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.Throwable[] throwableArray7 = convergenceException6.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray10 = notPositiveDefiniteMatrixException9.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.String str16 = notPositiveDefiniteMatrixException12.getPattern();
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray10, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.String str29 = convergenceException28.getPattern();
        java.lang.String str30 = convergenceException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray33 = convergenceException31.getArguments();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException39);
        java.lang.String str41 = convergenceException39.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "not positive definite matrix" + "'", str16, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str41, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray14, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray14);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray14);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, (double) (byte) 1, (double) (-1L), 100.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray16 = convergenceException13.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = new java.lang.Object[] { notPositiveDefiniteMatrixException5, notPositiveDefiniteMatrixException10 };
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11, throwable12);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException14.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        java.lang.String str23 = convergenceException21.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str23, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (short) -1, (double) 0, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double double25 = pointCostPair24.getCost();
        double[] doubleArray26 = pointCostPair24.getPoint();
        double[] doubleArray27 = pointCostPair24.getPoint();
        double[] doubleArray28 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 97.0d);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 100.0f);
        double double45 = pointCostPair44.getCost();
        double double46 = pointCostPair44.getCost();
        double[] doubleArray47 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray47, (double) 'a');
        double[] doubleArray50 = pointCostPair49.getPoint();
        double double51 = pointCostPair49.getCost();
        double[] doubleArray52 = pointCostPair49.getPoint();
        double[] doubleArray53 = pointCostPair49.getPoint();
        double[] doubleArray54 = pointCostPair49.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair57 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray28, doubleArray54, (int) (short) -1, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 97.0d + "'", double51 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException13);
        java.lang.Throwable[] throwableArray16 = costException13.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        java.lang.Throwable[] throwableArray27 = costException25.getSuppressed();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(throwable28);
        java.lang.String str30 = convergenceException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) convergenceException29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException36, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        java.lang.String str42 = convergenceException41.getPattern();
        java.lang.String str43 = convergenceException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = convergenceException44.getArguments();
        java.lang.String str47 = convergenceException44.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) convergenceException44);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray16);
        java.lang.Object[] objArray61 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("hi!", objArray61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray61);
        java.lang.Object[] objArray64 = costException63.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("hi!", objArray64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException66);
        java.lang.Throwable[] throwableArray68 = convergenceException67.getSuppressed();
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException70);
        java.lang.String str72 = convergenceException70.getPattern();
        java.lang.Object[] objArray73 = convergenceException70.getArguments();
        java.lang.Throwable[] throwableArray74 = convergenceException70.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray68, (java.lang.Throwable) convergenceException70);
        convergenceException50.addSuppressed((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException79);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 0.0d, (double) (byte) 1, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { '4', (short) 10, 1, (-1.0d) };
        double[] doubleArray17 = new double[] { '4', (short) 10, 1, (-1.0d) };
        double[] doubleArray22 = new double[] { '4', (short) 10, 1, (-1.0d) };
        double[] doubleArray27 = new double[] { '4', (short) 10, 1, (-1.0d) };
        double[] doubleArray32 = new double[] { '4', (short) 10, 1, (-1.0d) };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair36 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray33, (int) (byte) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[52.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[52.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[52.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException18);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", (java.lang.Object[]) throwableArray9);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException(throwable22);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("hi!", objArray30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray30);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException32);
        java.lang.Object[] objArray34 = costException32.getArguments();
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException(throwable40);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException41, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("", objArray45);
        java.lang.Class<?> wildcardClass48 = costException47.getClass();
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException60);
        java.lang.Object[] objArray62 = new java.lang.Object[] { wildcardClass48, 'a', (-1.0f), "not positive definite matrix", costException60 };
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("hi!", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException63);
        costException32.addSuppressed((java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray66 = convergenceException64.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException68 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException69 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException68.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException68);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException71);
        java.lang.Object[] objArray80 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("hi!", objArray80);
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray80);
        java.lang.Object[] objArray83 = costException82.getArguments();
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray83);
        convergenceException72.addSuppressed((java.lang.Throwable) costException84);
        convergenceException64.addSuppressed((java.lang.Throwable) convergenceException72);
        costException23.addSuppressed((java.lang.Throwable) convergenceException64);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException64);
        java.lang.Class<?> wildcardClass89 = convergenceException64.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 0L, 97.0d, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double[] doubleArray25 = pointCostPair24.getPoint();
        double[] doubleArray26 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 52.0d);
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray26, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        java.lang.Object[] objArray19 = costException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray24 = convergenceException22.getSuppressed();
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray24);
        convergenceException3.addSuppressed((java.lang.Throwable) costException25);
        java.lang.String str27 = costException25.getPattern();
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str27, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, 1.0d, (double) (-1.0f), (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (short) 1);
        double[] doubleArray26 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 1L);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 100.0f);
        double double45 = pointCostPair44.getCost();
        double double46 = pointCostPair44.getCost();
        double[] doubleArray47 = pointCostPair44.getPoint();
        double[] doubleArray48 = pointCostPair44.getPoint();
        double[] doubleArray49 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair51 = new org.apache.commons.math.optimization.PointCostPair(doubleArray49, (double) (short) -1);
        double double52 = pointCostPair51.getCost();
        double double53 = pointCostPair51.getCost();
        double[] doubleArray54 = pointCostPair51.getPoint();
        double[] doubleArray55 = pointCostPair51.getPoint();
        double[] doubleArray56 = pointCostPair51.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair59 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray26, doubleArray56, (int) (byte) 10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, 0.0d, (double) 0L, (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("", objArray11);
        java.lang.Class<?> wildcardClass14 = costException13.getClass();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { wildcardClass14, 'a', (-1.0f), "not positive definite matrix", costException26 };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray34 = convergenceException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray45);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray45);
        java.lang.String str51 = convergenceException50.getPattern();
        java.lang.Object[] objArray52 = convergenceException50.getArguments();
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException50);
        java.lang.String str54 = convergenceException30.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "not positive definite matrix" + "'", str51, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray6 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Object[] objArray8 = costException7.getArguments();
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray8);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(35.0d, (double) (short) 100, (double) 100, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (byte) -1, (byte) 100 };
        double[] doubleArray13 = new double[] { (byte) -1, (byte) 100 };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray14, (int) (byte) 100, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray44 = costException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray44);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException46 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException46.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Object[] objArray49 = notPositiveDefiniteMatrixException47.getArguments();
        convergenceException45.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException47);
        java.lang.Object[] objArray52 = convergenceException51.getArguments();
        java.lang.Throwable[] throwableArray53 = convergenceException51.getSuppressed();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, (double) (-1.0f), 32.0d, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 100.0f, (short) 1, 1.0f, (byte) 0 };
        double[] doubleArray17 = new double[] { 100.0f, (short) 1, 1.0f, (byte) 0 };
        double[] doubleArray22 = new double[] { 100.0f, (short) 1, 1.0f, (byte) 0 };
        double[] doubleArray27 = new double[] { 100.0f, (short) 1, 1.0f, (byte) 0 };
        double[] doubleArray32 = new double[] { 100.0f, (short) 1, 1.0f, (byte) 0 };
        double[][] doubleArray33 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (byte) 10, (double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray8, (int) (byte) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException14);
        java.lang.String str16 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: Convergence failed", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) costException27);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        java.lang.Object[] objArray42 = costException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray42, throwable44);
        java.lang.Throwable[] throwableArray46 = convergenceException45.getSuppressed();
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException45);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) '#', (double) 10L, (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair11 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray8, (int) (short) 0, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 'a');
        double[] doubleArray9 = pointCostPair8.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (-1));
        java.lang.Class<?> wildcardClass14 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26);
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        java.lang.String str34 = convergenceException33.getPattern();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!" + "'", str34, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), 1.0d, (double) (byte) 0, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', 0.0d, (double) 100.0f, (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { '#', ' ', 0.0f };
        double[] doubleArray15 = new double[] { '#', ' ', 0.0f };
        double[][] doubleArray16 = new double[][] { doubleArray11, doubleArray15 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair17 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 32.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 32.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = notPositiveDefiniteMatrixException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.String str15 = notPositiveDefiniteMatrixException11.getPattern();
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.String str28 = convergenceException27.getPattern();
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray6);
        java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed();
        java.lang.String str37 = convergenceException35.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("hi!", objArray47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        java.lang.Throwable[] throwableArray50 = costException48.getSuppressed();
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException(throwable51);
        java.lang.String str53 = convergenceException52.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray50);
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException35);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.optimization.CostException" + "'", str37, "org.apache.commons.math.optimization.CostException");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        java.lang.Object[] objArray14 = costException12.getArguments();
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("", objArray25);
        java.lang.Class<?> wildcardClass28 = costException27.getClass();
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException40);
        java.lang.Object[] objArray42 = new java.lang.Object[] { wildcardClass28, 'a', (-1.0f), "not positive definite matrix", costException40 };
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        costException12.addSuppressed((java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = convergenceException44.getArguments();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray46, throwable48);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException(throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        convergenceException53.addSuppressed((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray46, (java.lang.Throwable) convergenceException53);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException(throwable62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException63);
        java.lang.Throwable[] throwableArray65 = convergenceException64.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray65);
        java.lang.String str67 = convergenceException66.getPattern();
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) costException68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException70);
        java.lang.Throwable[] throwableArray72 = convergenceException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = convergenceException70.getSuppressed();
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray73);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "not positive definite matrix" + "'", str67, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        java.lang.String str17 = costException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        java.lang.Object[] objArray21 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException22);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) (short) -1, (double) (short) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0L, (double) (byte) -1, (double) (byte) -1, (double) (short) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 1);
        double double29 = pointCostPair28.getCost();
        double[] doubleArray30 = pointCostPair28.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, 100.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (byte) 100);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double[] doubleArray41 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 10.0d);
        double[] doubleArray48 = pointCostPair47.getPoint();
        double double49 = pointCostPair47.getCost();
        double[] doubleArray50 = pointCostPair47.getPoint();
        double[] doubleArray51 = pointCostPair47.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair53 = new org.apache.commons.math.optimization.PointCostPair(doubleArray51, 97.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair56 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, doubleArray35, doubleArray51, (int) ' ', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.String str11 = convergenceException10.getPattern();
        java.lang.String str12 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.Object[] objArray15 = convergenceException13.getArguments();
        java.lang.Throwable[] throwableArray16 = convergenceException13.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException13);
        java.lang.String str19 = convergenceException13.getPattern();
        java.lang.Object[] objArray20 = convergenceException13.getArguments();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("hi!", objArray40);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray40);
        java.lang.Object[] objArray43 = costException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException44);
        convergenceException31.addSuppressed((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException45);
        java.lang.String str48 = convergenceException45.getPattern();
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException13);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str48, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (-1.0f), 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        java.lang.Object[] objArray15 = costException13.getArguments();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("", objArray26);
        java.lang.Class<?> wildcardClass29 = costException28.getClass();
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException41);
        java.lang.Object[] objArray43 = new java.lang.Object[] { wildcardClass29, 'a', (-1.0f), "not positive definite matrix", costException41 };
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException44);
        costException13.addSuppressed((java.lang.Throwable) convergenceException45);
        java.lang.Object[] objArray47 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray47);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException50 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException49.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException50);
        java.lang.Object[] objArray52 = notPositiveDefiniteMatrixException50.getArguments();
        convergenceException48.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException50);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) notPositiveDefiniteMatrixException50);
        java.lang.Throwable[] throwableArray55 = notPositiveDefiniteMatrixException50.getSuppressed();
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException58);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = costException9.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        java.lang.Object[] objArray21 = costException19.getArguments();
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException(throwable27);
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException28, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("", objArray32);
        java.lang.Class<?> wildcardClass35 = costException34.getClass();
        java.lang.Object[] objArray45 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException47);
        java.lang.Object[] objArray49 = new java.lang.Object[] { wildcardClass35, 'a', (-1.0f), "not positive definite matrix", costException47 };
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("hi!", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        costException19.addSuppressed((java.lang.Throwable) convergenceException51);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(throwable53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException55);
        convergenceException51.addSuppressed((java.lang.Throwable) costException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) convergenceException51);
        java.lang.Object[] objArray59 = convergenceException58.getArguments();
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) costException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException61);
        java.lang.String str63 = convergenceException61.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str63, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException3);
        java.lang.String str6 = convergenceException3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str6, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        java.lang.Throwable[] throwableArray9 = costException8.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        java.lang.Object[] objArray20 = costException18.getArguments();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException(throwable26);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException27, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("", objArray31);
        java.lang.Class<?> wildcardClass34 = costException33.getClass();
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException46);
        java.lang.Object[] objArray48 = new java.lang.Object[] { wildcardClass34, 'a', (-1.0f), "not positive definite matrix", costException46 };
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException49);
        costException18.addSuppressed((java.lang.Throwable) convergenceException50);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException54);
        convergenceException50.addSuppressed((java.lang.Throwable) costException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException0);
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.optimization.CostException costException5 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException4);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        java.lang.Object[] objArray16 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException14);
        convergenceException4.addSuppressed((java.lang.Throwable) costException14);
        convergenceException1.addSuppressed((java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException13.getSuppressed();
        convergenceException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException11);
        java.lang.Throwable[] throwableArray20 = convergenceException19.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException19);
        java.lang.Object[] objArray22 = convergenceException19.getArguments();
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        java.lang.Object[] objArray35 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray35);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray44);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray35, (java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray22, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) ' ', 0.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) 100, (double) (short) 1, 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        double[] doubleArray23 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) 1L);
        double[] doubleArray30 = pointCostPair29.getPoint();
        double[] doubleArray31 = pointCostPair29.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair34 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray19, doubleArray31, (int) (short) 100, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(32.0d, (double) (short) 10, 0.0d, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        double[] doubleArray20 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, 97.0d);
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) 100);
        double[] doubleArray32 = pointCostPair31.getPoint();
        double[] doubleArray33 = pointCostPair31.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) (short) 10);
        double[] doubleArray36 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray20, doubleArray36, (int) (short) -1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Object[] objArray10 = costException8.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException17, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("", objArray21);
        java.lang.Class<?> wildcardClass24 = costException23.getClass();
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { wildcardClass24, 'a', (-1.0f), "not positive definite matrix", costException36 };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        costException8.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException(throwable42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException44);
        convergenceException40.addSuppressed((java.lang.Throwable) costException45);
        java.lang.Object[] objArray56 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("hi!", objArray56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray56);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException(throwable61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException63);
        java.lang.Object[] objArray65 = convergenceException63.getArguments();
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray56, (java.lang.Throwable) convergenceException63);
        convergenceException40.addSuppressed((java.lang.Throwable) convergenceException63);
        java.lang.String str69 = convergenceException40.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str69, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException0.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.String str5 = notPositiveDefiniteMatrixException1.getPattern();
        java.lang.Throwable[] throwableArray6 = notPositiveDefiniteMatrixException1.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        java.lang.Object[] objArray19 = costException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray22 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray34);
        java.lang.Object[] objArray37 = costException36.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        convergenceException23.addSuppressed((java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        java.lang.String str46 = convergenceException41.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "not positive definite matrix" + "'", str5, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str46, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (-1.0d), (double) 100.0f, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, 0.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        double[] doubleArray21 = pointCostPair19.getPoint();
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 100);
        double[] doubleArray27 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray27, (double) 100);
        double[] doubleArray30 = pointCostPair29.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray21, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) (byte) 1, (double) (short) 1, 35.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 1);
        double double29 = pointCostPair28.getCost();
        double[] doubleArray30 = pointCostPair28.getPoint();
        double double31 = pointCostPair28.getCost();
        double[] doubleArray32 = pointCostPair28.getPoint();
        double[] doubleArray33 = pointCostPair28.getPoint();
        double[] doubleArray34 = pointCostPair28.getPoint();
        double[] doubleArray40 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 0.0f);
        double[] doubleArray49 = pointCostPair48.getPoint();
        double[] doubleArray50 = pointCostPair48.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair52 = new org.apache.commons.math.optimization.PointCostPair(doubleArray50, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair54 = new org.apache.commons.math.optimization.PointCostPair(doubleArray50, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair55 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray34, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        double[] doubleArray6 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray6, (double) (short) 10);
        double double11 = pointCostPair10.getCost();
        double double12 = pointCostPair10.getCost();
        double[] doubleArray13 = pointCostPair10.getPoint();
        double double14 = pointCostPair10.getCost();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) '#', (double) 0.0f, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { '4', 52.0d, 10.0f, (short) 0, (byte) 10 };
        double[] doubleArray19 = new double[] { '4', 52.0d, 10.0f, (short) 0, (byte) 10 };
        double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, 52.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, 52.0, 10.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray10);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException(throwable32);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException33, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        java.lang.String str39 = convergenceException38.getPattern();
        java.lang.String str40 = convergenceException38.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray43 = convergenceException41.getArguments();
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("", objArray43);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("hi!", objArray55);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray55);
        java.lang.Object[] objArray58 = costException57.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException59);
        java.lang.Throwable[] throwableArray61 = convergenceException59.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException59);
        java.lang.Throwable[] throwableArray64 = convergenceException59.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException66);
        java.lang.String str68 = convergenceException67.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray64, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray43, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray10, (java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException74);
        java.lang.String str76 = convergenceException75.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str68, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str76, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) -1, 52.0d, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) 'a', (double) 100.0f, (double) (short) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10, 100.0d, (double) 10.0f, (double) 10L);
        java.lang.Class<?> wildcardClass5 = nelderMead4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) '#', (double) (-1.0f), (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[] doubleArray17 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[] doubleArray22 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[] doubleArray27 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[] doubleArray32 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[] doubleArray37 = new double[] { 100.0d, 0L, 0L, 35.0d };
        double[][] doubleArray38 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32, doubleArray37 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 10.0f, 1.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        java.lang.Throwable[] throwableArray17 = convergenceException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException15);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException18);
        java.lang.String str20 = convergenceException2.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str20, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray25);
        java.lang.Object[] objArray28 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray28, throwable30);
        java.lang.String str32 = convergenceException31.getPattern();
        java.lang.Throwable[] throwableArray33 = convergenceException31.getSuppressed();
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        java.lang.Throwable[] throwableArray38 = convergenceException37.getSuppressed();
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException39);
        convergenceException31.addSuppressed((java.lang.Throwable) convergenceException40);
        costException16.addSuppressed((java.lang.Throwable) convergenceException31);
        java.lang.String str43 = costException16.getPattern();
        java.lang.Object[] objArray44 = costException16.getArguments();
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray54);
        java.lang.Object[] objArray60 = convergenceException59.getArguments();
        java.lang.Object[] objArray68 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("hi!", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray68);
        java.lang.Object[] objArray71 = costException70.getArguments();
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray71);
        convergenceException59.addSuppressed((java.lang.Throwable) costException72);
        org.apache.commons.math.optimization.CostException costException74 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray44, (java.lang.Throwable) costException74);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str32, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str43, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = convergenceException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Object[] objArray19 = convergenceException17.getArguments();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        java.lang.Object[] objArray30 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("hi!", objArray30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException32);
        java.lang.Object[] objArray34 = costException32.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) costException32);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray19, (java.lang.Throwable) costException32);
        java.lang.Throwable[] throwableArray37 = costException32.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray37);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        java.lang.Object[] objArray21 = costException20.getArguments();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray21);
        convergenceException10.addSuppressed((java.lang.Throwable) costException22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray26 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = costException9.getSuppressed();
        java.lang.String str11 = costException9.getPattern();
        java.lang.Throwable[] throwableArray12 = costException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException26);
        java.lang.Throwable[] throwableArray29 = costException26.getSuppressed();
        java.lang.Object[] objArray37 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("hi!", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.Throwable[] throwableArray40 = costException38.getSuppressed();
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException(throwable41);
        java.lang.String str43 = convergenceException42.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) convergenceException42);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException(throwable48);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException49, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        java.lang.String str55 = convergenceException54.getPattern();
        java.lang.String str56 = convergenceException54.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException54);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException57);
        java.lang.Object[] objArray59 = convergenceException57.getArguments();
        java.lang.String str60 = convergenceException57.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray29, (java.lang.Throwable) convergenceException61);
        costException15.addSuppressed((java.lang.Throwable) convergenceException62);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) (byte) 0, (double) ' ', (double) ' ');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) (-1.0f));
        double[] doubleArray20 = pointCostPair19.getPoint();
        double double21 = pointCostPair19.getCost();
        double[] doubleArray22 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (short) 1);
        double[] doubleArray31 = pointCostPair30.getPoint();
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 0.0d);
        double[] doubleArray37 = pointCostPair36.getPoint();
        double double38 = pointCostPair36.getCost();
        double[] doubleArray39 = pointCostPair36.getPoint();
        double[] doubleArray40 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray31, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) (byte) 0, 1.0d, (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 1);
        double[] doubleArray24 = pointCostPair23.getPoint();
        double[] doubleArray25 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (byte) 10);
        double[] doubleArray28 = pointCostPair27.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) 0L);
        double[] doubleArray36 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, 10.0d);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        double[] doubleArray41 = pointCostPair38.getPoint();
        double[] doubleArray42 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 100.0f);
        double double45 = pointCostPair44.getCost();
        double double46 = pointCostPair44.getCost();
        double[] doubleArray47 = pointCostPair44.getPoint();
        double[] doubleArray48 = pointCostPair44.getPoint();
        double[] doubleArray49 = pointCostPair44.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair51 = new org.apache.commons.math.optimization.PointCostPair(doubleArray49, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair53 = new org.apache.commons.math.optimization.PointCostPair(doubleArray49, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair56 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray28, doubleArray49, (-1), (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((-1.0d), (double) 100L, (double) (short) 100, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 100, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.String str11 = convergenceException10.getPattern();
        java.lang.String str12 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException13);
        java.lang.Throwable[] throwableArray16 = convergenceException15.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) (byte) -1, (double) 1, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 'a', ' ', (short) 0, 10L };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, doubleArray13, 10, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 32.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray13);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray15);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 10.0f, 1.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[] doubleArray19 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[] doubleArray25 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[] doubleArray31 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[] doubleArray37 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[] doubleArray43 = new double[] { (short) 0, 1.0f, (short) 0, 1.0f, (-1.0d) };
        double[][] doubleArray44 = new double[][] { doubleArray13, doubleArray19, doubleArray25, doubleArray31, doubleArray37, doubleArray43 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair47 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray44, 0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) (byte) -1, (double) '#', (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double double16 = pointCostPair15.getCost();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double double19 = pointCostPair15.getCost();
        double double20 = pointCostPair15.getCost();
        double[] doubleArray21 = pointCostPair15.getPoint();
        double[] doubleArray22 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 10);
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) 10L);
        double[] doubleArray36 = pointCostPair35.getPoint();
        double[] doubleArray37 = pointCostPair35.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair42 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray22, doubleArray37, (int) 'a', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (byte) -1, (double) 100L, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray23);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        java.lang.Object[] objArray37 = costException36.getArguments();
        java.lang.Throwable[] throwableArray38 = costException36.getSuppressed();
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray23, (java.lang.Throwable) costException39);
        costException9.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.String str42 = convergenceException40.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str42, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        java.lang.Throwable[] throwableArray17 = costException16.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        java.lang.String str25 = convergenceException22.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str25, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) ' ');
        double[] doubleArray23 = pointCostPair22.getPoint();
        java.lang.Class<?> wildcardClass24 = doubleArray23.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Object[] objArray10 = costException9.getArguments();
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException9);
        java.lang.Object[] objArray13 = costException9.getArguments();
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        java.lang.Throwable[] throwableArray24 = costException23.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray13, (java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray29 = convergenceException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException30);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        java.lang.String str33 = convergenceException31.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str33, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.String str15 = convergenceException14.getPattern();
        java.lang.String str16 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        java.lang.String str19 = costException18.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException22);
        java.lang.Object[] objArray24 = convergenceException22.getArguments();
        java.lang.Object[] objArray25 = convergenceException22.getArguments();
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray25);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) ' ', (double) 10, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double double17 = pointCostPair15.getCost();
        double double18 = pointCostPair15.getCost();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (byte) 1);
        double[] doubleArray24 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 0);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair30 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray24, doubleArray27, 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray13);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("hi!", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray22);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException27);
        java.lang.Throwable[] throwableArray30 = costException27.getSuppressed();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, 100.0d, (double) (short) 1, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        double double25 = pointCostPair21.getCost();
        double[] doubleArray26 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 0.0d);
        double[] doubleArray34 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        double double41 = pointCostPair40.getCost();
        double[] doubleArray42 = pointCostPair40.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair43 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray26, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '#', (double) 10.0f, (double) 1.0f, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        double[] doubleArray16 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (short) 0);
        double double21 = pointCostPair20.getCost();
        double double22 = pointCostPair20.getCost();
        double[] doubleArray23 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair29 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, (double) (short) 0);
        double double30 = pointCostPair29.getCost();
        double[] doubleArray31 = pointCostPair29.getPoint();
        double double32 = pointCostPair29.getCost();
        double[] doubleArray33 = pointCostPair29.getPoint();
        double[] doubleArray34 = pointCostPair29.getPoint();
        double[] doubleArray35 = pointCostPair29.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair38 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray8, doubleArray35, (int) (short) -1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException5);
        java.lang.Throwable[] throwableArray7 = convergenceException6.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray10 = notPositiveDefiniteMatrixException9.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.String str16 = notPositiveDefiniteMatrixException12.getPattern();
        java.lang.Throwable[] throwableArray17 = notPositiveDefiniteMatrixException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray10, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException23, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.String str29 = convergenceException28.getPattern();
        java.lang.String str30 = convergenceException28.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray33 = convergenceException31.getArguments();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException37.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        java.lang.Object[] objArray50 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("hi!", objArray50);
        java.lang.Object[] objArray52 = costException51.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray43, (java.lang.Throwable) convergenceException53);
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43, throwable55);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException57);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "not positive definite matrix" + "'", str16, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100L, (double) (byte) 10, (double) 10, (double) (short) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (-1));
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        double[] doubleArray32 = pointCostPair31.getPoint();
        double[] doubleArray33 = pointCostPair31.getPoint();
        double[] doubleArray34 = pointCostPair31.getPoint();
        double[] doubleArray35 = pointCostPair31.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) 100.0f);
        double double38 = pointCostPair37.getCost();
        double[] doubleArray39 = pointCostPair37.getPoint();
        double[] doubleArray40 = pointCostPair37.getPoint();
        double[] doubleArray41 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray23, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        double[] doubleArray5 = pointCostPair4.getPoint();
        double double6 = pointCostPair4.getCost();
        double double7 = pointCostPair4.getCost();
        double[] doubleArray8 = pointCostPair4.getPoint();
        double double9 = pointCostPair4.getCost();
        double[] doubleArray10 = pointCostPair4.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        java.lang.Object[] objArray14 = costException12.getArguments();
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(throwable20);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException21, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("", objArray25);
        java.lang.Class<?> wildcardClass28 = costException27.getClass();
        java.lang.Object[] objArray38 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException40);
        java.lang.Object[] objArray42 = new java.lang.Object[] { wildcardClass28, 'a', (-1.0f), "not positive definite matrix", costException40 };
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        costException12.addSuppressed((java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray46);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException48 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException49 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException48.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException49);
        java.lang.Object[] objArray51 = notPositiveDefiniteMatrixException49.getArguments();
        convergenceException47.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { convergenceException47 };
        java.lang.Object[] objArray61 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("hi!", objArray61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException63);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", objArray53, (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray53);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException77 = new org.apache.commons.math.optimization.CostException("hi!", objArray76);
        org.apache.commons.math.optimization.CostException costException78 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray76);
        java.lang.Object[] objArray79 = costException78.getArguments();
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray79);
        java.lang.String str81 = costException80.getPattern();
        java.lang.String str82 = costException80.getPattern();
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException80);
        java.lang.String str84 = costException80.getPattern();
        java.lang.String str85 = costException80.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", (java.lang.Throwable) costException80);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray53, (java.lang.Throwable) costException80);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[org.apache.commons.math.ConvergenceException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str81, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str82, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str84, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str85, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray32);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray60);
        java.lang.Object[] objArray63 = costException62.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException62);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException64);
        costException50.addSuppressed((java.lang.Throwable) convergenceException65);
        java.lang.Throwable[] throwableArray67 = convergenceException65.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) '#', (double) 0.0f, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException(throwable9);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException10, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("", objArray14);
        java.lang.Class<?> wildcardClass17 = costException16.getClass();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray31 = new java.lang.Object[] { wildcardClass17, 'a', (-1.0f), "not positive definite matrix", costException29 };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray45, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException52 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException53 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException52.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException53);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException56);
        java.lang.Object[] objArray58 = convergenceException57.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray61 = notPositiveDefiniteMatrixException60.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException62 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException63 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException62.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException63);
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException63);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException63);
        java.lang.String str67 = notPositiveDefiniteMatrixException63.getPattern();
        java.lang.Throwable[] throwableArray68 = notPositiveDefiniteMatrixException63.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray61, (java.lang.Throwable) notPositiveDefiniteMatrixException63);
        java.lang.String str70 = convergenceException69.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray58, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray33, (java.lang.Throwable) convergenceException71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException72);
        java.lang.Class<?> wildcardClass74 = convergenceException73.getClass();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "not positive definite matrix" + "'", str67, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str70, "org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray14 = notPositiveDefiniteMatrixException12.getArguments();
        costException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray16 = notPositiveDefiniteMatrixException12.getArguments();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        java.lang.Object[] objArray25 = costException24.getArguments();
        java.lang.Throwable[] throwableArray26 = costException24.getSuppressed();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException24);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray16, (java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray44);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16, (java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, (double) (short) 10, 35.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { ' ', 1L, (byte) -1, 1.0d };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair14 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[32.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10L, (double) 100L, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (-1L), (byte) 0, 35.0d, 100, (-1.0f), 100.0d };
        double[] doubleArray21 = new double[] { (-1L), (byte) 0, 35.0d, 100, (-1.0f), 100.0d };
        double[] doubleArray28 = new double[] { (-1L), (byte) 0, 35.0d, 100, (-1.0f), 100.0d };
        double[] doubleArray35 = new double[] { (-1L), (byte) 0, 35.0d, 100, (-1.0f), 100.0d };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray36, 100, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 35.0, 100.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 35.0, 100.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 35.0, 100.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 35.0, 100.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Object[] objArray4 = notPositiveDefiniteMatrixException2.getArguments();
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray4, (java.lang.Throwable) convergenceException19);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        convergenceException20.addSuppressed((java.lang.Throwable) costException29);
        java.lang.Object[] objArray32 = convergenceException20.getArguments();
        java.lang.String str33 = convergenceException20.getPattern();
        java.lang.Object[] objArray34 = convergenceException20.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str33, "org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (-1.0f));
        double[] doubleArray7 = pointCostPair6.getPoint();
        double double8 = pointCostPair6.getCost();
        double[] doubleArray9 = pointCostPair6.getPoint();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException18, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("", objArray22);
        java.lang.Class<?> wildcardClass25 = costException24.getClass();
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = new java.lang.Object[] { wildcardClass25, 'a', (-1.0f), "not positive definite matrix", costException37 };
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        costException9.addSuppressed((java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray43 = convergenceException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        java.lang.Throwable[] throwableArray45 = convergenceException44.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException1);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        java.lang.Throwable[] throwableArray17 = convergenceException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException15);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException2);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException7);
        java.lang.Throwable[] throwableArray9 = convergenceException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), 0.0d, (double) (-1), (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[] doubleArray17 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[] doubleArray22 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[] doubleArray27 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[] doubleArray32 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[] doubleArray37 = new double[] { 10, 100, (-1.0d), (byte) -1 };
        double[][] doubleArray38 = new double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27, doubleArray32, doubleArray37 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray38, 0, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 100.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray29, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException47);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException47);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException6);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException13, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException21);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '#', (double) 100, 100.0d, (double) 10L);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), 32.0d, (double) '#', 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double double13 = pointCostPair12.getCost();
        double[] doubleArray14 = pointCostPair12.getPoint();
        double[] doubleArray15 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray15, (double) (short) 1);
        double double18 = pointCostPair17.getCost();
        double[] doubleArray19 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) (short) -1);
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 32.0d);
        double[] doubleArray40 = pointCostPair39.getPoint();
        double[] doubleArray41 = pointCostPair39.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray19, doubleArray41, (int) (short) 1, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        java.lang.String str14 = convergenceException12.getPattern();
        java.lang.Object[] objArray15 = convergenceException12.getArguments();
        java.lang.String str16 = convergenceException12.getPattern();
        java.lang.Throwable[] throwableArray17 = convergenceException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException22);
        java.lang.Object[] objArray24 = convergenceException22.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray24);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException(throwable29);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException30, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException46 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException46.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        convergenceException45.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException47);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        convergenceException36.addSuppressed((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray24, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) convergenceException36);
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException55);
        java.lang.Class<?> wildcardClass57 = convergenceException55.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        java.lang.String str12 = costException10.getPattern();
        java.lang.Throwable[] throwableArray13 = costException10.getSuppressed();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("Convergence failed", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        java.lang.Object[] objArray17 = costException16.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray23);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException(throwable31);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException32, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray38 = convergenceException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException41);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable[] throwableArray12 = costException10.getSuppressed();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.String str15 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray12);
        java.lang.String str18 = convergenceException17.getPattern();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray20 = convergenceException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException22);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str18, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) (short) 1, (-1.0d), (double) (byte) -1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (short) -1, (double) (byte) 0, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        double double34 = pointCostPair33.getCost();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) (short) -1);
        double double41 = pointCostPair40.getCost();
        double[] doubleArray42 = pointCostPair40.getPoint();
        double[] doubleArray43 = pointCostPair40.getPoint();
        double[] doubleArray44 = pointCostPair40.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray44, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair48 = new org.apache.commons.math.optimization.PointCostPair(doubleArray44, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair49 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray19, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException7);
        java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException12);
        java.lang.Throwable[] throwableArray14 = costException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0.0f, 97.0d, 1.0d, (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, randomVectorGenerator8, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException32.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = costException42.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray34, (java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        java.lang.Object[] objArray53 = costException52.getArguments();
        java.lang.Throwable[] throwableArray54 = costException52.getSuppressed();
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray34, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray34);
        java.lang.String str59 = costException58.getPattern();
        java.lang.Throwable[] throwableArray60 = costException58.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str59, "org.apache.commons.math.ConvergenceException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Throwable[] throwableArray7 = convergenceException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray10 = convergenceException8.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray10);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray10, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", throwable12);
        java.lang.Throwable[] throwableArray15 = convergenceException14.getSuppressed();
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray29);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("", objArray29);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException", objArray29);
        java.lang.Object[] objArray37 = costException36.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray37);
        convergenceException14.addSuppressed((java.lang.Throwable) costException39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        java.lang.String str43 = costException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException41);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!" + "'", str43, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray18);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException29);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("hi!", objArray43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray43);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("hi!", objArray55);
        java.lang.Object[] objArray57 = costException56.getArguments();
        java.lang.Throwable[] throwableArray58 = costException56.getSuppressed();
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException56);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray43, (java.lang.Throwable) costException59);
        costException29.addSuppressed((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException60);
        java.lang.String str64 = convergenceException63.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str64, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        double double14 = pointCostPair13.getCost();
        double double15 = pointCostPair13.getCost();
        double[] doubleArray16 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) '#');
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = pointCostPair22.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 0, (double) (byte) -1, (double) 'a', (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double[] doubleArray14 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double double17 = pointCostPair16.getCost();
        double double18 = pointCostPair16.getCost();
        double double19 = pointCostPair16.getCost();
        double[] doubleArray20 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 100.0f);
        double[] doubleArray28 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray28, (double) (short) 0);
        double double33 = pointCostPair32.getCost();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (-1));
        double double44 = pointCostPair43.getCost();
        double[] doubleArray45 = pointCostPair43.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray45, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair48 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray20, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) (-1.0f), (double) (short) 0, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 0L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 52.0d);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 10.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair35 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray8, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException(throwable4);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException5, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.String str11 = convergenceException10.getPattern();
        java.lang.String str12 = convergenceException10.getPattern();
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException(throwable14);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException21);
        java.lang.String str23 = convergenceException10.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Throwable) convergenceException10);
        java.lang.String str25 = convergenceException10.toString();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str25, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        java.lang.Object[] objArray8 = costException7.getArguments();
        java.lang.Throwable[] throwableArray9 = costException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException7);
        java.lang.Object[] objArray11 = costException7.getArguments();
        java.lang.Object[] objArray20 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = costException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", objArray11, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException24);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray4 = notPositiveDefiniteMatrixException3.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException6 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException5.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException6);
        java.lang.String str10 = notPositiveDefiniteMatrixException6.getPattern();
        java.lang.Throwable[] throwableArray11 = notPositiveDefiniteMatrixException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray4, (java.lang.Throwable) notPositiveDefiniteMatrixException6);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray4);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException13);
        java.lang.String str15 = convergenceException14.getPattern();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "not positive definite matrix" + "'", str10, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix" + "'", str15, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix");
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) 1, (double) 10.0f, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException7);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        java.lang.Object[] objArray19 = costException18.getArguments();
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray19);
        convergenceException8.addSuppressed((java.lang.Throwable) costException20);
        java.lang.Object[] objArray22 = convergenceException8.getArguments();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException(throwable26);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException27, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        java.lang.String str33 = convergenceException32.getPattern();
        java.lang.String str34 = convergenceException32.getPattern();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException(throwable36);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException(throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        convergenceException37.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        convergenceException32.addSuppressed((java.lang.Throwable) convergenceException43);
        java.lang.Throwable[] throwableArray45 = convergenceException32.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", objArray22, (java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("hi!", objArray53);
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray53);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException55);
        java.lang.Object[] objArray57 = costException55.getArguments();
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException(throwable63);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException64, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray68);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("", objArray68);
        java.lang.Class<?> wildcardClass71 = costException70.getClass();
        java.lang.Object[] objArray81 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException("hi!", objArray81);
        org.apache.commons.math.optimization.CostException costException83 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException83);
        java.lang.Object[] objArray85 = new java.lang.Object[] { wildcardClass71, 'a', (-1.0f), "not positive definite matrix", costException83 };
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("hi!", objArray85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException86);
        costException55.addSuppressed((java.lang.Throwable) convergenceException87);
        java.lang.Object[] objArray89 = costException55.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray22, (java.lang.Throwable) costException55);
        org.apache.commons.math.optimization.CostException costException91 = new org.apache.commons.math.optimization.CostException("", objArray22);
        java.lang.Throwable[] throwableArray92 = costException91.getSuppressed();
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("hi!", objArray19);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.String str23 = convergenceException22.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray11, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray11);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
        java.lang.String str31 = convergenceException30.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException32 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException33 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException32.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        convergenceException30.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException33);
        java.lang.Object[] objArray38 = notPositiveDefiniteMatrixException33.getArguments();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException45, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException54);
        java.lang.Object[] objArray56 = convergenceException54.getArguments();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException(throwable62);
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException63, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray67);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException("", objArray67);
        java.lang.Class<?> wildcardClass70 = costException69.getClass();
        java.lang.Object[] objArray80 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException81 = new org.apache.commons.math.optimization.CostException("hi!", objArray80);
        org.apache.commons.math.optimization.CostException costException82 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException82);
        java.lang.Object[] objArray84 = new java.lang.Object[] { wildcardClass70, 'a', (-1.0f), "not positive definite matrix", costException82 };
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("hi!", objArray84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException85);
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException86);
        org.apache.commons.math.optimization.CostException costException88 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException87);
        convergenceException54.addSuppressed((java.lang.Throwable) costException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray49, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray38, (java.lang.Throwable) convergenceException90);
        costException27.addSuppressed((java.lang.Throwable) convergenceException91);
        org.apache.commons.math.optimization.CostException costException93 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        java.lang.Object[] objArray94 = costException27.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str31, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray32);
        java.lang.Throwable[] throwableArray50 = convergenceException49.getSuppressed();
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException(throwable51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray55 = convergenceException53.getArguments();
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) convergenceException53);
        java.lang.Throwable[] throwableArray59 = convergenceException58.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) (-1.0f), (double) 1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) (short) 10);
        double[] doubleArray19 = pointCostPair18.getPoint();
        double[] doubleArray20 = pointCostPair18.getPoint();
        double[] doubleArray24 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray20, doubleArray24, (-1), (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 100, 32.0d, (double) 'a', (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (byte) 0, (short) 100, 10L, 100, 97.0d };
        double[] doubleArray19 = new double[] { (byte) 0, (short) 100, 10L, 100, 97.0d };
        double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, doubleArray20, (int) (short) 1, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 100.0, 10.0, 100.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 100.0, 10.0, 100.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException0.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.optimization.CostException costException3 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.String str5 = notPositiveDefiniteMatrixException1.getPattern();
        java.lang.Throwable[] throwableArray6 = notPositiveDefiniteMatrixException1.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        java.lang.Object[] objArray19 = costException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray22 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) convergenceException23);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray34);
        java.lang.Object[] objArray37 = costException36.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        convergenceException23.addSuppressed((java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        java.lang.String str45 = convergenceException41.getPattern();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "not positive definite matrix" + "'", str5, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "not positive definite matrix" + "'", str45, "not positive definite matrix");
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray13);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException24, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("", objArray28);
        java.lang.Class<?> wildcardClass31 = costException30.getClass();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException43);
        java.lang.Object[] objArray45 = new java.lang.Object[] { wildcardClass31, 'a', (-1.0f), "not positive definite matrix", costException43 };
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Object[] objArray47 = convergenceException46.getArguments();
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray58);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray58);
        java.lang.Object[] objArray64 = convergenceException63.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException65 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray72 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException("hi!", objArray72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray72);
        notPositiveDefiniteMatrixException65.addSuppressed((java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray64, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray47, (java.lang.Throwable) convergenceException76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray13, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.optimization.CostException costException80 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException79);
        java.lang.String str82 = convergenceException81.getPattern();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str82, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException8);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.String str16 = notPositiveDefiniteMatrixException12.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray18 = new java.lang.Object[] { notPositiveDefiniteMatrixException12, notPositiveDefiniteMatrixException17 };
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        convergenceException9.addSuppressed((java.lang.Throwable) convergenceException20);
        java.lang.Throwable[] throwableArray23 = convergenceException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        java.lang.String str25 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException28);
        java.lang.Object[] objArray30 = convergenceException28.getArguments();
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException28);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "not positive definite matrix" + "'", str16, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "not positive definite matrix" + "'", str25, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = notPositiveDefiniteMatrixException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.String str15 = notPositiveDefiniteMatrixException11.getPattern();
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.String str28 = convergenceException27.getPattern();
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray6);
        java.lang.String str37 = costException36.getPattern();
        java.lang.Throwable[] throwableArray38 = costException36.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str37, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
        java.lang.Throwable throwable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            convergenceException1.addSuppressed(throwable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray13);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Object[] objArray10 = costException9.getArguments();
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException9);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray14);
        java.lang.Object[] objArray16 = convergenceException15.getArguments();
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray29);
        java.lang.Object[] objArray32 = costException31.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray32);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray32, (java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException46);
        java.lang.Object[] objArray49 = convergenceException48.getArguments();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException(throwable52);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException(throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        convergenceException53.addSuppressed((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException60 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException61 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException60.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        java.lang.Throwable[] throwableArray65 = notPositiveDefiniteMatrixException61.getSuppressed();
        convergenceException59.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException61);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException59);
        java.lang.Throwable[] throwableArray68 = convergenceException67.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray49, (java.lang.Throwable) convergenceException67);
        java.lang.Throwable[] throwableArray70 = convergenceException69.getSuppressed();
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16, (java.lang.Throwable) costException71);
        java.lang.Class<?> wildcardClass73 = convergenceException72.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (-1L), (double) (byte) 100, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 1L);
        double[] doubleArray18 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, (double) (byte) -1);
        double[] doubleArray24 = new double[] { 97.0d, (short) 100, (-1.0d) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) '#');
        double double27 = pointCostPair26.getCost();
        double double28 = pointCostPair26.getCost();
        double[] doubleArray29 = pointCostPair26.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair30 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray18, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 100.0, -1.0]");
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 1);
        double double21 = pointCostPair20.getCost();
        double[] doubleArray22 = pointCostPair20.getPoint();
        double[] doubleArray23 = pointCostPair20.getPoint();
        double[] doubleArray24 = pointCostPair20.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("", objArray11);
        java.lang.Class<?> wildcardClass14 = costException13.getClass();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { wildcardClass14, 'a', (-1.0f), "not positive definite matrix", costException26 };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = costException40.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray32, (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException45);
        convergenceException42.addSuppressed((java.lang.Throwable) costException46);
        java.lang.Throwable throwable48 = null;
        // The following exception was thrown during execution in test generation
        try {
            convergenceException42.addSuppressed(throwable48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (byte) 1, (double) (byte) 1, 35.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 1.0d);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        double[] doubleArray27 = pointCostPair26.getPoint();
        double[] doubleArray28 = pointCostPair26.getPoint();
        double[] doubleArray29 = pointCostPair26.getPoint();
        double[] doubleArray30 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray30, (double) 100.0f);
        double double33 = pointCostPair32.getCost();
        double double34 = pointCostPair32.getCost();
        double[] doubleArray35 = pointCostPair32.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray35, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray8, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100L, 35.0d, (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = null;
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray9, 0.0d);
        double[] doubleArray14 = pointCostPair13.getPoint();
        double double15 = pointCostPair13.getCost();
        double[] doubleArray16 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) (-1.0f));
        double[] doubleArray21 = pointCostPair20.getPoint();
        double double22 = pointCostPair20.getCost();
        double[] doubleArray23 = pointCostPair20.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair26 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray8, doubleArray23, (int) (byte) 1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException4, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.String str10 = convergenceException9.getPattern();
        java.lang.String str11 = convergenceException9.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray21);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException23);
        java.lang.Object[] objArray25 = costException23.getArguments();
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException(throwable31);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException32, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException("", objArray36);
        java.lang.Class<?> wildcardClass39 = costException38.getClass();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("hi!", objArray49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException51);
        java.lang.Object[] objArray53 = new java.lang.Object[] { wildcardClass39, 'a', (-1.0f), "not positive definite matrix", costException51 };
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("hi!", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException54);
        costException23.addSuppressed((java.lang.Throwable) convergenceException55);
        java.lang.Object[] objArray57 = convergenceException55.getArguments();
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray57);
        costException13.addSuppressed((java.lang.Throwable) costException58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        java.lang.Object[] objArray61 = costException13.getArguments();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) (short) -1, (double) (byte) 100, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException14);
        java.lang.Object[] objArray17 = costException14.getArguments();
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException22);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray35);
        java.lang.Object[] objArray38 = costException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray38);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("hi!", objArray47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray47);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException49);
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray38, (java.lang.Throwable) costException52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException53);
        java.lang.String str56 = convergenceException25.getPattern();
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException(throwable60);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException61, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray65);
        java.lang.String str67 = convergenceException66.getPattern();
        java.lang.String str68 = convergenceException66.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException66);
        java.lang.Throwable[] throwableArray70 = convergenceException69.getSuppressed();
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException69);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException69);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str56, "org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, (double) (short) 1, (double) 0, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = new double[] {};
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = new double[] {};
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray9, doubleArray10, doubleArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair15 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray12, 0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1, 52.0d, (double) (byte) 0, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) (-1L), (double) '#', (double) 0.0f);
        java.lang.Class<?> wildcardClass5 = nelderMead4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException5);
        java.lang.String str7 = convergenceException6.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        java.lang.String str13 = notPositiveDefiniteMatrixException9.getPattern();
        java.lang.Throwable[] throwableArray14 = notPositiveDefiniteMatrixException9.getSuppressed();
        java.lang.String str15 = notPositiveDefiniteMatrixException9.getPattern();
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException9);
        java.lang.String str17 = costException16.getPattern();
        convergenceException6.addSuppressed((java.lang.Throwable) costException16);
        java.lang.Class<?> wildcardClass19 = costException16.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!" + "'", str7, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "not positive definite matrix" + "'", str13, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 1, 35.0d, (double) 'a', (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray19);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray19);
        java.lang.Object[] objArray23 = convergenceException22.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.String str4 = convergenceException2.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException2);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException7);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) (byte) 0, (double) (short) 0, (double) 0.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { '#', (short) 1, 97.0d, 32.0d, 52.0d };
        double[] doubleArray19 = new double[] { '#', (short) 1, 97.0d, 32.0d, 52.0d };
        double[] doubleArray25 = new double[] { '#', (short) 1, 97.0d, 32.0d, 52.0d };
        double[] doubleArray31 = new double[] { '#', (short) 1, 97.0d, 32.0d, 52.0d };
        double[] doubleArray37 = new double[] { '#', (short) 1, 97.0d, 32.0d, 52.0d };
        double[][] doubleArray38 = new double[][] { doubleArray13, doubleArray19, doubleArray25, doubleArray31, doubleArray37 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray38, 0, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 1.0, 97.0, 32.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 1.0, 97.0, 32.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 1.0, 97.0, 32.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 1.0, 97.0, 32.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 97.0, 32.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) '#', (double) (short) 1, (double) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) (byte) -1, (double) 0L, 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (short) 10, 1, (byte) 1, 0.0f, 0, '#' };
        double[][] doubleArray15 = new double[][] { doubleArray14 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair18 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, doubleArray15, (int) (short) 1, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, 1.0, 0.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 0, 35.0d, (double) (byte) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException12);
        java.lang.Object[] objArray16 = convergenceException15.getArguments();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        java.lang.Object[] objArray30 = costException29.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray30);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException41);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray30, (java.lang.Throwable) costException44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray16, (java.lang.Throwable) costException46);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray16);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray16);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) 10L, (double) ' ', (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[] doubleArray21 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[] doubleArray28 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[] doubleArray35 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[] doubleArray42 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[] doubleArray49 = new double[] { (short) 100, (short) 0, (short) -1, 1, 'a', (byte) 0 };
        double[][] doubleArray50 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, 1, convergenceChecker7, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0, 1.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', (double) 100, 97.0d, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray12 = new double[] { 10L, 100, 32.0d, 32.0d };
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair16 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, doubleArray13, (int) (byte) -1, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0, 32.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        java.lang.Object[] objArray10 = costException9.getArguments();
        java.lang.Throwable[] throwableArray11 = costException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException16 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException16.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException17);
        java.lang.String str21 = notPositiveDefiniteMatrixException17.getPattern();
        java.lang.Throwable[] throwableArray22 = notPositiveDefiniteMatrixException17.getSuppressed();
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) costException31);
        java.lang.Throwable[] throwableArray34 = convergenceException33.getSuppressed();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException33);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        java.lang.Object[] objArray37 = costException35.getArguments();
        java.lang.Object[] objArray38 = costException35.getArguments();
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException("hi!", objArray38);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("hi!", objArray47);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException49);
        java.lang.Object[] objArray51 = costException49.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray51);
        java.lang.Throwable[] throwableArray53 = convergenceException52.getSuppressed();
        java.lang.String str54 = convergenceException52.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray38, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException57);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "not positive definite matrix" + "'", str21, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str54, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException9);
        java.lang.Throwable[] throwableArray12 = costException9.getSuppressed();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        costException9.addSuppressed((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException9);
        java.lang.String str17 = convergenceException16.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 0.0d);
        double[] doubleArray5 = pointCostPair4.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 0.0d);
        double double8 = pointCostPair7.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("", objArray11);
        java.lang.Class<?> wildcardClass14 = costException13.getClass();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { wildcardClass14, 'a', (-1.0f), "not positive definite matrix", costException26 };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", objArray28);
        java.lang.Object[] objArray30 = convergenceException29.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException("hi!", objArray39);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray39);
        java.lang.Object[] objArray42 = costException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray42);
        java.lang.Object[] objArray44 = convergenceException43.getArguments();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray30, (java.lang.Throwable) convergenceException46);
        java.lang.Object[] objArray50 = convergenceException49.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.String str14 = convergenceException13.getPattern();
        java.lang.String str15 = convergenceException13.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException16);
        java.lang.Object[] objArray18 = convergenceException16.getArguments();
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        java.lang.String str25 = convergenceException23.getPattern();
        java.lang.Object[] objArray26 = convergenceException23.getArguments();
        java.lang.Throwable[] throwableArray27 = convergenceException23.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray27);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.String str40 = convergenceException39.getPattern();
        java.lang.String str41 = convergenceException39.getPattern();
        java.lang.Object[] objArray42 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray18, (java.lang.Throwable) convergenceException39);
        java.lang.Throwable[] throwableArray45 = convergenceException44.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) costException47);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        double[] doubleArray3 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (-1L));
        double[] doubleArray10 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (double) (byte) 0);
        double[] doubleArray13 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 0.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray11);
        java.lang.Object[] objArray14 = costException13.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray18, throwable19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray18);
        java.lang.String str22 = costException21.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException21);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str22, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.Object[] objArray6 = notPositiveDefiniteMatrixException4.getArguments();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray6, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException35);
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray6, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray6);
        java.lang.String str42 = costException41.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException" + "'", str42, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException");
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("hi!", objArray24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray24);
        java.lang.Object[] objArray27 = costException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray31 = convergenceException30.getSuppressed();
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray31);
        java.lang.Object[] objArray33 = costException32.getArguments();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1), (double) 0, 32.0d, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1), 100L, (-1.0f), 'a', 10.0d };
        double[] doubleArray19 = new double[] { (-1), 100L, (-1.0f), 'a', 10.0d };
        double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, -1.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, -1.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException12);
        java.lang.Throwable[] throwableArray14 = costException12.getSuppressed();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException18 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException18.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException19);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException18);
        java.lang.Throwable[] throwableArray22 = costException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException25);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException34, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.optimization.CostException costException40 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException39);
        java.lang.Throwable[] throwableArray41 = convergenceException39.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray41);
        costException28.addSuppressed((java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) convergenceException42);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double[] doubleArray11 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (-1));
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) -1);
        double double16 = pointCostPair15.getCost();
        double double17 = pointCostPair15.getCost();
        double[] doubleArray18 = pointCostPair15.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) '4', (double) 100L, (double) (byte) -1, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 100);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double[] doubleArray14 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray14, (double) 10L);
        double double17 = pointCostPair16.getCost();
        double[] doubleArray18 = pointCostPair16.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray18, 0.0d);
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray29 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 0);
        double double34 = pointCostPair33.getCost();
        double double35 = pointCostPair33.getCost();
        double[] doubleArray36 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray36, (double) '4');
        double[] doubleArray39 = pointCostPair38.getPoint();
        double double40 = pointCostPair38.getCost();
        double[] doubleArray41 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, (int) 'a', convergenceChecker7, doubleArray23, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException4);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException8 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray9 = notPositiveDefiniteMatrixException8.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException10.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.String str15 = notPositiveDefiniteMatrixException11.getPattern();
        java.lang.Throwable[] throwableArray16 = notPositiveDefiniteMatrixException11.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray9, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException(throwable21);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException22, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.String str28 = convergenceException27.getPattern();
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException30);
        java.lang.Object[] objArray32 = convergenceException30.getArguments();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) notPositiveDefiniteMatrixException11);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException36 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray37 = notPositiveDefiniteMatrixException36.getArguments();
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException36);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException38);
        java.lang.String str40 = costException39.getPattern();
        java.lang.Object[] objArray52 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("hi!", objArray52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray52);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray52);
        java.lang.Object[] objArray58 = convergenceException57.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException59 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray66 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("hi!", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray66);
        notPositiveDefiniteMatrixException59.addSuppressed((java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray58, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray58);
        costException39.addSuppressed((java.lang.Throwable) convergenceException71);
        org.apache.commons.math.optimization.CostException costException73 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException71);
        java.lang.Throwable[] throwableArray74 = convergenceException71.getSuppressed();
        costException35.addSuppressed((java.lang.Throwable) convergenceException71);
        java.lang.String str76 = convergenceException71.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException71);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException77);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "not positive definite matrix" + "'", str15, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "not positive definite matrix" + "'", str40, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.ConvergenceException" + "'", str76, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray33 = convergenceException31.getArguments();
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray35 = convergenceException31.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException31);
        java.lang.Object[] objArray46 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("hi!", objArray46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray46);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray46);
        java.lang.String str52 = convergenceException51.getPattern();
        java.lang.Object[] objArray53 = convergenceException51.getArguments();
        convergenceException31.addSuppressed((java.lang.Throwable) convergenceException51);
        java.lang.Object[] objArray55 = convergenceException51.getArguments();
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException57);
        java.lang.String str59 = convergenceException57.toString();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "not positive definite matrix" + "'", str52, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str59, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException15);
        java.lang.Object[] objArray17 = convergenceException15.getArguments();
        java.lang.Throwable[] throwableArray18 = convergenceException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) convergenceException15);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: ", objArray20);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException22 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray23 = notPositiveDefiniteMatrixException22.getArguments();
        java.lang.String str24 = notPositiveDefiniteMatrixException22.getPattern();
        java.lang.Object[] objArray25 = notPositiveDefiniteMatrixException22.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray20, (java.lang.Throwable) notPositiveDefiniteMatrixException22);
        java.lang.Object[] objArray27 = notPositiveDefiniteMatrixException22.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "not positive definite matrix" + "'", str24, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) 0, (double) (byte) 100, (double) (byte) 100);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 10, 10, (-1L), 97.0d, 0.0d, (short) 1 };
        double[] doubleArray21 = new double[] { 10, 10, (-1L), 97.0d, 0.0d, (short) 1 };
        double[] doubleArray28 = new double[] { 10, 10, (-1L), 97.0d, 0.0d, (short) 1 };
        double[] doubleArray35 = new double[] { 10, 10, (-1L), 97.0d, 0.0d, (short) 1 };
        double[] doubleArray42 = new double[] { 10, 10, (-1L), 97.0d, 0.0d, (short) 1 };
        double[][] doubleArray43 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair46 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray43, (int) (short) -1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, -1.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, -1.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 10.0, -1.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, -1.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 10.0, -1.0, 97.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray5);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("hi!", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException20);
        java.lang.Throwable[] throwableArray23 = costException20.getSuppressed();
        java.lang.Object[] objArray24 = costException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) convergenceException26);
        costException9.addSuppressed((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException9);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) 'a', 35.0d, (double) '#');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, 32.0d, (double) '#', (double) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 'a');
        double[] doubleArray27 = pointCostPair26.getPoint();
        double double28 = pointCostPair26.getCost();
        double[] doubleArray29 = pointCostPair26.getPoint();
        double[] doubleArray30 = pointCostPair26.getPoint();
        double[] doubleArray31 = pointCostPair26.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (short) 1);
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) 100);
        double[] doubleArray39 = pointCostPair38.getPoint();
        double[] doubleArray40 = pointCostPair38.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 10L);
        double double43 = pointCostPair42.getCost();
        double[] doubleArray44 = pointCostPair42.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray44, 0.0d);
        double double47 = pointCostPair46.getCost();
        double[] doubleArray48 = pointCostPair46.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, doubleArray31, doubleArray48, 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 97.0d + "'", double28 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) 10.0f, (double) (short) 1, (-1.0d));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        java.lang.Throwable[] throwableArray10 = notPositiveDefiniteMatrixException5.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) costException19);
        java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed();
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException23);
        java.lang.Object[] objArray25 = costException23.getArguments();
        java.lang.Object[] objArray26 = costException23.getArguments();
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException37);
        java.lang.Object[] objArray39 = costException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray39);
        java.lang.Throwable[] throwableArray41 = convergenceException40.getSuppressed();
        java.lang.String str42 = convergenceException40.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray26, (java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray44 = convergenceException40.getSuppressed();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray44);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.optimization.CostException: not positive definite matrix" + "'", str42, "org.apache.commons.math.optimization.CostException: not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 0L, (double) (byte) 1, (double) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (-1L), 1 };
        double[] doubleArray13 = new double[] { (-1L), 1 };
        double[] doubleArray16 = new double[] { (-1L), 1 };
        double[][] doubleArray17 = new double[][] { doubleArray10, doubleArray13, doubleArray16 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair18 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray12 = convergenceException11.getSuppressed();
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException11);
        java.lang.String str14 = convergenceException8.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str14, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double[] doubleArray9 = pointCostPair7.getPoint();
        double[] doubleArray10 = pointCostPair7.getPoint();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) 100.0f);
        double double14 = pointCostPair13.getCost();
        double double15 = pointCostPair13.getCost();
        double[] doubleArray16 = pointCostPair13.getPoint();
        double double17 = pointCostPair13.getCost();
        double[] doubleArray18 = pointCostPair13.getPoint();
        double[] doubleArray19 = pointCostPair13.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) ' ', (double) 10, (double) 100.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        double[] doubleArray23 = pointCostPair22.getPoint();
        double[] doubleArray24 = pointCostPair22.getPoint();
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair27 = new org.apache.commons.math.optimization.PointCostPair(doubleArray25, (double) (byte) 1);
        double[] doubleArray28 = pointCostPair27.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair31 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray24, doubleArray28, (int) (byte) 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException12);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException14);
        java.lang.Throwable[] throwableArray16 = costException14.getSuppressed();
        java.lang.Object[] objArray29 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("hi!", objArray29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray29);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        java.lang.Object[] objArray43 = costException42.getArguments();
        java.lang.Throwable[] throwableArray44 = costException42.getSuppressed();
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray29, (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) convergenceException47);
        java.lang.Object[] objArray49 = convergenceException47.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray49);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray49);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 32.0d, (double) '4', (double) '4');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, randomVectorGenerator8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.String str13 = convergenceException12.getPattern();
        java.lang.String str14 = convergenceException12.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException12);
        java.lang.Throwable[] throwableArray16 = convergenceException15.getSuppressed();
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray16);
        java.lang.Class<?> wildcardClass19 = costException18.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray3 = notPositiveDefiniteMatrixException2.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException5 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException4.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException5);
        java.lang.String str9 = notPositiveDefiniteMatrixException5.getPattern();
        java.lang.Throwable[] throwableArray10 = notPositiveDefiniteMatrixException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray3, (java.lang.Throwable) notPositiveDefiniteMatrixException5);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray3);
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException12);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "not positive definite matrix" + "'", str9, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) -1, (double) 0, (-1.0d), (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) ' ', 100.0d, (double) 1.0f, (double) (byte) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[][] doubleArray8 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, (double) (byte) 10, (double) 'a', (double) (short) 10);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray14 = new double[] { 1L, 100, 100.0d, (-1), 100.0f, (short) 0 };
        double[] doubleArray21 = new double[] { 1L, 100, 100.0d, (-1), 100.0f, (short) 0 };
        double[] doubleArray28 = new double[] { 1L, 100, 100.0d, (-1), 100.0f, (short) 0 };
        double[] doubleArray35 = new double[] { 1L, 100, 100.0d, (-1), 100.0f, (short) 0 };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair39 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray36, (int) (byte) 0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0, 100.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0, 100.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 100.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0, 100.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        java.lang.String str8 = notPositiveDefiniteMatrixException4.getPattern();
        java.lang.Throwable[] throwableArray9 = notPositiveDefiniteMatrixException4.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException("hi!", objArray16);
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException18);
        java.lang.Throwable[] throwableArray21 = convergenceException20.getSuppressed();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException22);
        java.lang.Object[] objArray24 = costException22.getArguments();
        java.lang.Object[] objArray25 = costException22.getArguments();
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Throwable) costException26);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "not positive definite matrix" + "'", str8, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray3 = convergenceException2.getSuppressed();
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException("", (java.lang.Object[]) throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (byte) 1, (double) (-1L), (double) 1);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (byte) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (-1));
        double[] doubleArray32 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray32, 10.0d);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double[] doubleArray36 = pointCostPair34.getPoint();
        double[] doubleArray37 = pointCostPair34.getPoint();
        double[] doubleArray38 = pointCostPair34.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair40 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, (double) ' ');
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray38, 0.0d);
        double[] doubleArray43 = pointCostPair42.getPoint();
        double[] doubleArray44 = pointCostPair42.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, doubleArray20, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(throwable12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException14);
        java.lang.String str16 = costException15.getPattern();
        java.lang.Throwable[] throwableArray17 = costException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException15);
        costException10.addSuppressed((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException10);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable[] throwableArray10 = costException8.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException11 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException11.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray14 = notPositiveDefiniteMatrixException12.getArguments();
        costException8.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException12);
        java.lang.Object[] objArray16 = costException8.getArguments();
        java.lang.Object[] objArray28 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("hi!", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.optimization.CostException costException32 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray28);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray16, (java.lang.Throwable) costException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray16);
        java.lang.Class<?> wildcardClass38 = convergenceException37.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        double[] doubleArray4 = new double[] { '4', 0.0d, (short) 1, 52.0d };
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray4, (double) 10);
        double double7 = pointCostPair6.getCost();
        double[] doubleArray8 = pointCostPair6.getPoint();
        double[] doubleArray9 = pointCostPair6.getPoint();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[52.0, 0.0, 1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, 0.0, 1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[52.0, 0.0, 1.0, 52.0]");
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        java.lang.String str12 = costException10.getPattern();
        java.lang.Throwable[] throwableArray13 = costException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray13);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException24, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("", objArray28);
        java.lang.Class<?> wildcardClass31 = costException30.getClass();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException43);
        java.lang.Object[] objArray45 = new java.lang.Object[] { wildcardClass31, 'a', (-1.0f), "not positive definite matrix", costException43 };
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException53 = new org.apache.commons.math.optimization.CostException("hi!", objArray52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException53);
        java.lang.Throwable[] throwableArray55 = costException53.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray45, (java.lang.Throwable) costException53);
        java.lang.Throwable[] throwableArray57 = convergenceException56.getSuppressed();
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("Convergence failed", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) costException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) costException58);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 10, 35.0d, (double) 0L, (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 100, 0.0d, (double) (short) 1, (double) 1.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 32.0d, (double) (byte) -1, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) ' ', convergenceChecker7, randomVectorGenerator8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException5);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException12, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException21);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double double9 = pointCostPair7.getCost();
        double double10 = pointCostPair7.getCost();
        double[] doubleArray11 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (byte) 1);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray17, (double) (byte) 10);
        double[] doubleArray20 = pointCostPair19.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) 0L);
        double double23 = pointCostPair22.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray10);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException17 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray18 = notPositiveDefiniteMatrixException17.getArguments();
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray18);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException19);
        java.lang.String str21 = costException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray10, (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        java.lang.Object[] objArray24 = convergenceException22.getArguments();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str21, "org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("hi!", objArray21);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.String str25 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray13, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray29 = convergenceException27.getArguments();
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray35 = convergenceException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = convergenceException34.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Object[]) throwableArray36);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        java.lang.Object[] objArray46 = costException45.getArguments();
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("", objArray46);
        convergenceException37.addSuppressed((java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray29, (java.lang.Throwable) costException47);
        org.apache.commons.math.optimization.CostException costException51 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray29);
        java.lang.Throwable[] throwableArray52 = costException51.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException9 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException9.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException10);
        java.lang.String str14 = notPositiveDefiniteMatrixException10.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray16 = new java.lang.Object[] { notPositiveDefiniteMatrixException10, notPositiveDefiniteMatrixException15 };
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray16, throwable17);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException19 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException20 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException19.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException20);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) notPositiveDefiniteMatrixException20);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray33);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException35);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.optimization.CostException costException39 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray16, (java.lang.Throwable) convergenceException40);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray16, throwable43);
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray16);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray16, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray16);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException("hi!", objArray58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray16, (java.lang.Throwable) costException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "not positive definite matrix" + "'", str14, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        java.lang.Object[] objArray5 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException("hi!", objArray5);
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException6);
        java.lang.Throwable[] throwableArray9 = costException6.getSuppressed();
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException6);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException14.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        java.lang.Object[] objArray17 = notPositiveDefiniteMatrixException15.getArguments();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray17, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException46);
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException("hi!", objArray57);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException58);
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException58);
        java.lang.Object[] objArray69 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = costException70.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException73);
        costException58.addSuppressed((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException73);
        costException6.addSuppressed((java.lang.Throwable) convergenceException73);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) -1, (double) 'a', 0.0d, (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 32.0d, 0.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        double[] doubleArray16 = pointCostPair15.getPoint();
        double[] doubleArray17 = pointCostPair15.getPoint();
        double[] doubleArray18 = pointCostPair15.getPoint();
        double[] doubleArray19 = pointCostPair15.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray19, (double) 100.0f);
        double double22 = pointCostPair21.getCost();
        double double23 = pointCostPair21.getCost();
        double[] doubleArray24 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) 100L);
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 100);
        double double36 = pointCostPair35.getCost();
        double[] doubleArray37 = pointCostPair35.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray24, doubleArray37, (int) (short) -1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 100, 52.0d, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) 0);
        double double27 = pointCostPair26.getCost();
        double[] doubleArray28 = pointCostPair26.getPoint();
        double[] doubleArray34 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, 10.0d);
        double[] doubleArray37 = pointCostPair36.getPoint();
        double[] doubleArray38 = pointCostPair36.getPoint();
        double[] doubleArray39 = pointCostPair36.getPoint();
        double[] doubleArray40 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) 100.0f);
        double double43 = pointCostPair42.getCost();
        double double44 = pointCostPair42.getCost();
        double[] doubleArray45 = pointCostPair42.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray45, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair49 = new org.apache.commons.math.optimization.PointCostPair(doubleArray45, 10.0d);
        double[] doubleArray50 = pointCostPair49.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray28, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (short) 1, (double) (byte) -1, (double) (byte) 100, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray5 = notPositiveDefiniteMatrixException4.getArguments();
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) costException11);
        java.lang.Class<?> wildcardClass13 = costException11.getClass();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 0, (double) 1.0f, 52.0d, (double) (-1L));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        double[] doubleArray13 = pointCostPair12.getPoint();
        double double14 = pointCostPair12.getCost();
        double[] doubleArray15 = pointCostPair12.getPoint();
        double[] doubleArray16 = pointCostPair12.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, (double) 1L);
        double[] doubleArray24 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, 10.0d);
        double[] doubleArray31 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray31, (double) 10);
        double[] doubleArray34 = pointCostPair33.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray34, (double) 100.0f);
        double[] doubleArray37 = pointCostPair36.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray37, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair40 = nelderMead4.minimize(costFunction5, 0, convergenceChecker7, doubleArray16, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException9);
        java.lang.Object[] objArray11 = costException9.getArguments();
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException(throwable13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        convergenceException14.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray11, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException23 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException24 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException23.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException24);
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException23);
        java.lang.Throwable[] throwableArray27 = costException26.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException");
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray32);
        costException26.addSuppressed((java.lang.Throwable) costException34);
        convergenceException20.addSuppressed((java.lang.Throwable) costException34);
        java.lang.Class<?> wildcardClass37 = convergenceException20.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(throwable6);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException7, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray11);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray11);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray12);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException(throwable19);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException20, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.String str26 = convergenceException25.getPattern();
        java.lang.String str27 = convergenceException25.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException28);
        java.lang.String str30 = costException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException31);
        costException13.addSuppressed((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException32);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 52.0d, 1.0d, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("hi!", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray10);
        java.lang.Object[] objArray13 = costException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray13, throwable15);
        java.lang.String str17 = convergenceException16.getPattern();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray26);
        java.lang.Object[] objArray29 = costException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray29, throwable31);
        convergenceException16.addSuppressed((java.lang.Throwable) convergenceException32);
        java.lang.Throwable[] throwableArray34 = convergenceException16.getSuppressed();
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray34);
        java.lang.Object[] objArray36 = costException35.getArguments();
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray36);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix" + "'", str17, "org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(10.0d, (double) 100, 0.0d, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray8, (double) 'a');
        double[] doubleArray17 = pointCostPair16.getPoint();
        double[] doubleArray23 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray23, 10.0d);
        double[] doubleArray26 = pointCostPair25.getPoint();
        double[] doubleArray27 = pointCostPair25.getPoint();
        double[] doubleArray28 = pointCostPair25.getPoint();
        double[] doubleArray29 = pointCostPair25.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 100.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) 100L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair39 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (-1L));
        org.apache.commons.math.optimization.PointCostPair pointCostPair41 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (short) 100);
        double[] doubleArray42 = pointCostPair41.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray42, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair45 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, doubleArray17, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException10 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray11 = notPositiveDefiniteMatrixException10.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException12 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException13 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException12.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.String str17 = notPositiveDefiniteMatrixException13.getPattern();
        java.lang.Throwable[] throwableArray18 = notPositiveDefiniteMatrixException13.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray11, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException(throwable23);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException24, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.String str30 = convergenceException29.getPattern();
        java.lang.String str31 = convergenceException29.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException32.getArguments();
        notPositiveDefiniteMatrixException13.addSuppressed((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) notPositiveDefiniteMatrixException13);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        convergenceException38.addSuppressed((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Object[] objArray44 = convergenceException43.getArguments();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException52 = new org.apache.commons.math.optimization.CostException("hi!", objArray51);
        java.lang.Object[] objArray53 = costException52.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray44, (java.lang.Throwable) convergenceException54);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable56);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException66 = new org.apache.commons.math.optimization.CostException("hi!", objArray65);
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray65);
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException67);
        org.apache.commons.math.optimization.CostException costException69 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException67);
        org.apache.commons.math.optimization.CostException costException70 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException69);
        org.apache.commons.math.optimization.CostException costException71 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException69);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException71);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException73 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException74 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException73.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException74);
        convergenceException72.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException74);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray44, (java.lang.Throwable) notPositiveDefiniteMatrixException74);
        java.lang.Object[] objArray86 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException87 = new org.apache.commons.math.optimization.CostException("hi!", objArray86);
        org.apache.commons.math.optimization.CostException costException88 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray86);
        java.lang.Object[] objArray89 = costException88.getArguments();
        org.apache.commons.math.optimization.CostException costException90 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: hi!", objArray89);
        convergenceException78.addSuppressed((java.lang.Throwable) costException90);
        org.apache.commons.math.optimization.CostException costException92 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException78);
        java.lang.Object[] objArray93 = costException92.getArguments();
        java.lang.String str94 = costException92.getPattern();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "not positive definite matrix" + "'", str17, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.optimization.CostException: " + "'", str94, "org.apache.commons.math.optimization.CostException: ");
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) 100L, 1.0d, (double) 'a');
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair13 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray11, (double) (short) -1);
        double[] doubleArray21 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 10.0d);
        double[] doubleArray24 = pointCostPair23.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray24, (double) (-1.0f));
        double[] doubleArray27 = pointCostPair26.getPoint();
        double double28 = pointCostPair26.getCost();
        double double29 = pointCostPair26.getCost();
        double[] doubleArray30 = pointCostPair26.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair33 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray11, doubleArray30, (int) '4', (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100.0f, (double) 10, 100.0d, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException0 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException0.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException1);
        java.lang.Object[] objArray5 = convergenceException4.getArguments();
        java.lang.String str6 = convergenceException4.getPattern();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException(throwable1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray4 = convergenceException3.getSuppressed();
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("hi!", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray13);
        java.lang.Object[] objArray16 = costException15.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray19 = convergenceException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        double double11 = pointCostPair10.getCost();
        double double12 = pointCostPair10.getCost();
        double[] doubleArray13 = pointCostPair10.getPoint();
        double[] doubleArray14 = pointCostPair10.getPoint();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 97.0d + "'", double11 == 97.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 97.0d + "'", double12 == 97.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray9);
        java.lang.Object[] objArray12 = costException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException11);
        java.lang.Object[] objArray14 = costException11.getArguments();
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray14);
        java.lang.Object[] objArray17 = convergenceException16.getArguments();
        java.lang.String str18 = convergenceException16.getPattern();
        java.lang.Throwable[] throwableArray19 = convergenceException16.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException" + "'", str18, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException");
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, 35.0d, (double) (short) 1, 10.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 1, convergenceChecker7, randomVectorGenerator8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 10, (double) 'a', (double) '4', (double) 100L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (byte) -1, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("", throwable1);
        java.lang.Object[] objArray3 = convergenceException2.getArguments();
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray17);
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: hi!", objArray17);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException(throwable27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException(throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException30);
        convergenceException28.addSuppressed((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray17, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray17);
        convergenceException2.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException(throwable16);
        java.lang.Throwable[] throwableArray18 = convergenceException17.getSuppressed();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = costException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray14, (java.lang.Throwable) costException27);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(throwable33);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException(throwable35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException36);
        convergenceException34.addSuppressed((java.lang.Throwable) convergenceException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException34);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException41 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException42 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException41.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        java.lang.Throwable[] throwableArray46 = notPositiveDefiniteMatrixException42.getSuppressed();
        convergenceException40.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException42);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("hi!", objArray14, (java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("hi!", objArray55);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray55);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException57);
        java.lang.Object[] objArray59 = costException57.getArguments();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException(throwable65);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException66, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray70);
        org.apache.commons.math.optimization.CostException costException72 = new org.apache.commons.math.optimization.CostException("", objArray70);
        java.lang.Class<?> wildcardClass73 = costException72.getClass();
        java.lang.Object[] objArray83 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException84 = new org.apache.commons.math.optimization.CostException("hi!", objArray83);
        org.apache.commons.math.optimization.CostException costException85 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException85);
        java.lang.Object[] objArray87 = new java.lang.Object[] { wildcardClass73, 'a', (-1.0f), "not positive definite matrix", costException85 };
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("hi!", objArray87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException88);
        costException57.addSuppressed((java.lang.Throwable) convergenceException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException57);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray14, (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: Convergence failed", objArray14);
        org.apache.commons.math.optimization.CostException costException94 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException93);
        java.lang.Class<?> wildcardClass95 = convergenceException93.getClass();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(97.0d, 0.0d, (double) (short) 0, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 0, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, 32.0d, (double) (byte) -1, (double) (-1.0f));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) 10, (double) 1, 1.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        double[] doubleArray21 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair23 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair25 = new org.apache.commons.math.optimization.PointCostPair(doubleArray21, 10.0d);
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair36 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair38 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair41 = nelderMead4.minimize(costFunction5, (int) (short) -1, convergenceChecker7, doubleArray21, doubleArray26, 10, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 'a', (double) 1.0f, (double) (byte) -1, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { ' ' };
        double[] doubleArray11 = new double[] { ' ' };
        double[] doubleArray13 = new double[] { ' ' };
        double[] doubleArray15 = new double[] { ' ' };
        double[] doubleArray17 = new double[] { ' ' };
        double[] doubleArray19 = new double[] { ' ' };
        double[][] doubleArray20 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair21 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, (double) (short) 0);
        double double10 = pointCostPair9.getCost();
        double double11 = pointCostPair9.getCost();
        double[] doubleArray12 = pointCostPair9.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair20 = new org.apache.commons.math.optimization.PointCostPair(doubleArray12, (double) (-1));
        double double21 = pointCostPair20.getCost();
        double double22 = pointCostPair20.getCost();
        double double23 = pointCostPair20.getCost();
        double double24 = pointCostPair20.getCost();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException18 = new org.apache.commons.math.optimization.CostException("hi!", objArray17);
        org.apache.commons.math.optimization.CostException costException19 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray17);
        java.lang.Object[] objArray20 = costException19.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("hi!", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray23 = convergenceException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray35);
        java.lang.Object[] objArray38 = costException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        convergenceException24.addSuppressed((java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException42);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        java.lang.Object[] objArray1 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = costException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException14 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException15 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException14.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException15);
        org.apache.commons.math.optimization.CostException costException17 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.optimization.CostException costException21 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException18);
        java.lang.String str24 = costException23.getPattern();
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException(throwable31);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException32, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.String str38 = convergenceException37.getPattern();
        java.lang.String str39 = convergenceException37.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.optimization.CostException costException41 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException40);
        java.lang.String str42 = costException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException41);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException43);
        java.lang.Object[] objArray45 = convergenceException44.getArguments();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException47 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException48 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException47.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException48);
        java.lang.String str52 = notPositiveDefiniteMatrixException48.getPattern();
        java.lang.Throwable[] throwableArray53 = notPositiveDefiniteMatrixException48.getSuppressed();
        java.lang.Object[] objArray60 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("hi!", objArray60);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) costException62);
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException62);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: not positive definite matrix", objArray45, (java.lang.Throwable) costException62);
        org.apache.commons.math.optimization.CostException costException67 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException62);
        java.lang.String str68 = costException62.getPattern();
        costException23.addSuppressed((java.lang.Throwable) costException62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray1, (java.lang.Throwable) costException62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "not positive definite matrix" + "'", str24, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "not positive definite matrix" + "'", str52, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException14);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException3);
        java.lang.String str20 = convergenceException19.getPattern();
        java.lang.String str21 = convergenceException19.getPattern();
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.optimization.CostException costException23 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) costException23);
        java.lang.Throwable[] throwableArray25 = convergenceException24.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str20, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str21, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        double[] doubleArray3 = new double[] { 10.0f, 10.0f, (short) -1 };
        org.apache.commons.math.optimization.PointCostPair pointCostPair5 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair9 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair11 = new org.apache.commons.math.optimization.PointCostPair(doubleArray3, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException(throwable8);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException9, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("", objArray13);
        java.lang.Class<?> wildcardClass16 = costException15.getClass();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException("hi!", objArray26);
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { wildcardClass16, 'a', (-1.0f), "not positive definite matrix", costException28 };
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException42 = new org.apache.commons.math.optimization.CostException("hi!", objArray41);
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray41);
        java.lang.Object[] objArray44 = costException43.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("hi!", objArray44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray44, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) convergenceException47);
        java.lang.Throwable[] throwableArray49 = convergenceException47.getSuppressed();
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException(throwable54);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException55, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException68 = new org.apache.commons.math.optimization.CostException("hi!", objArray67);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException(throwable69);
        java.lang.String str71 = convergenceException70.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray67, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray59, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) convergenceException73);
        java.lang.Object[] objArray75 = convergenceException74.getArguments();
        org.apache.commons.math.optimization.CostException costException76 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: ", objArray75);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(0.0d, (double) (byte) 100, (double) 0L, (double) (short) -1);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(throwable7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException8, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("", objArray12);
        java.lang.Class<?> wildcardClass15 = costException14.getClass();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException26 = new org.apache.commons.math.optimization.CostException("hi!", objArray25);
        org.apache.commons.math.optimization.CostException costException27 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException27);
        java.lang.Object[] objArray29 = new java.lang.Object[] { wildcardClass15, 'a', (-1.0f), "not positive definite matrix", costException27 };
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = convergenceException30.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Object[]) throwableArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException33.getArguments();
        java.lang.Object[] objArray46 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("hi!", objArray46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray46);
        org.apache.commons.math.optimization.CostException costException50 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray46);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException(throwable51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException52);
        org.apache.commons.math.optimization.CostException costException54 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray55 = convergenceException53.getArguments();
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: not positive definite matrix", objArray46, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray46);
        java.lang.String str60 = convergenceException59.getPattern();
        convergenceException33.addSuppressed((java.lang.Throwable) convergenceException59);
        java.lang.Throwable[] throwableArray62 = convergenceException33.getSuppressed();
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray62);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str60, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(throwableArray62);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException7 = new org.apache.commons.math.optimization.CostException("hi!", objArray6);
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray6);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException8);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(throwable15);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException16, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("", objArray20);
        java.lang.Class<?> wildcardClass23 = costException22.getClass();
        java.lang.Object[] objArray33 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("hi!", objArray33);
        org.apache.commons.math.optimization.CostException costException35 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException35);
        java.lang.Object[] objArray37 = new java.lang.Object[] { wildcardClass23, 'a', (-1.0f), "not positive definite matrix", costException35 };
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        costException9.addSuppressed((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Throwable[] throwableArray42 = convergenceException38.getSuppressed();
        java.lang.String str43 = convergenceException38.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException1 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException1.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.optimization.CostException costException4 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException2);
        java.lang.String str6 = notPositiveDefiniteMatrixException2.getPattern();
        java.lang.Throwable[] throwableArray7 = notPositiveDefiniteMatrixException2.getSuppressed();
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) costException16);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        java.lang.Object[] objArray27 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException31);
        java.lang.Object[] objArray33 = costException31.getArguments();
        convergenceException18.addSuppressed((java.lang.Throwable) costException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException18);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "not positive definite matrix" + "'", str6, "not positive definite matrix");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        java.lang.Object[] objArray14 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException15 = new org.apache.commons.math.optimization.CostException("hi!", objArray14);
        org.apache.commons.math.optimization.CostException costException16 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) costException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException16);
        java.lang.Throwable[] throwableArray19 = costException16.getSuppressed();
        java.lang.Object[] objArray20 = costException16.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray20);
        org.apache.commons.math.optimization.CostException costException22 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: ", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: hi!", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException32);
        java.lang.Object[] objArray34 = convergenceException32.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray34);
        org.apache.commons.math.optimization.CostException costException36 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!", objArray34);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException", objArray34);
        java.lang.String str38 = costException37.getPattern();
        java.lang.Throwable[] throwableArray39 = costException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray20, (java.lang.Throwable) costException37);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException" + "'", str38, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException");
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        java.lang.Object[] objArray7 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException8 = new org.apache.commons.math.optimization.CostException("hi!", objArray7);
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray7);
        java.lang.Object[] objArray10 = costException9.getArguments();
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray10);
        java.lang.Throwable[] throwableArray12 = costException11.getSuppressed();
        java.lang.Object[] objArray13 = costException11.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, -1, 10, 0.0]");
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1.0f), (double) (byte) -1, (double) 10L, (double) (-1));
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray9 = new double[] { 1L };
        double[] doubleArray11 = new double[] { 1L };
        double[] doubleArray13 = new double[] { 1L };
        double[] doubleArray15 = new double[] { 1L };
        double[] doubleArray17 = new double[] { 1L };
        double[] doubleArray19 = new double[] { 1L };
        double[][] doubleArray20 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair23 = nelderMead4.minimize(costFunction5, (int) (byte) 10, convergenceChecker7, doubleArray20, (int) (byte) 0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException2 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException2.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray8 = convergenceException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!", (java.lang.Object[]) throwableArray8);
        java.lang.Throwable[] throwableArray10 = convergenceException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (byte) 0, (double) 10L, (double) (byte) -1, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, randomVectorGenerator8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(100.0d, (double) 1L, 0.0d, (double) 10.0f);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray11 = new double[] { 32.0d, 52.0d, '4' };
        double[] doubleArray15 = new double[] { 32.0d, 52.0d, '4' };
        double[][] doubleArray16 = new double[][] { doubleArray11, doubleArray15 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair19 = nelderMead4.minimize(costFunction5, (int) (byte) 1, convergenceChecker7, doubleArray16, 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, 52.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[32.0, 52.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        java.lang.Object[] objArray12 = costException10.getArguments();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException(throwable18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException19, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("", objArray23);
        java.lang.Class<?> wildcardClass26 = costException25.getClass();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("hi!", objArray36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { wildcardClass26, 'a', (-1.0f), "not positive definite matrix", costException38 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException41);
        costException10.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException(throwable44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException46);
        convergenceException42.addSuppressed((java.lang.Throwable) costException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) costException47);
        java.lang.Object[] objArray50 = convergenceException49.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException51);
        java.lang.Throwable[] throwableArray53 = convergenceException51.getSuppressed();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray4 = convergenceException3.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        double[] doubleArray5 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair7 = new org.apache.commons.math.optimization.PointCostPair(doubleArray5, 10.0d);
        double[] doubleArray8 = pointCostPair7.getPoint();
        double double9 = pointCostPair7.getCost();
        double double10 = pointCostPair7.getCost();
        double[] doubleArray11 = pointCostPair7.getPoint();
        double double12 = pointCostPair7.getCost();
        double double13 = pointCostPair7.getCost();
        double double14 = pointCostPair7.getCost();
        double double15 = pointCostPair7.getCost();
        double[] doubleArray16 = pointCostPair7.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray16, 0.0d);
        double[] doubleArray19 = pointCostPair18.getPoint();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair6 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 10L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair8 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, 97.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair10 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (-1.0f));
        org.apache.commons.math.optimization.PointCostPair pointCostPair16 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 1.0f);
        org.apache.commons.math.optimization.PointCostPair pointCostPair18 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        double double19 = pointCostPair18.getCost();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10.0f, (double) (byte) 0, (double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        double double18 = pointCostPair17.getCost();
        double double19 = pointCostPair17.getCost();
        double[] doubleArray20 = pointCostPair17.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair22 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray20, (double) (short) -1);
        double[] doubleArray25 = pointCostPair24.getPoint();
        double double26 = pointCostPair24.getCost();
        double double27 = pointCostPair24.getCost();
        double[] doubleArray28 = pointCostPair24.getPoint();
        double[] doubleArray29 = pointCostPair24.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair31 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, 0.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair33 = new org.apache.commons.math.optimization.PointCostPair(doubleArray29, (double) (-1L));
        double[] doubleArray40 = new double[] { '#', 0, ' ', (byte) 100, (byte) 1, (-1.0f) };
        org.apache.commons.math.optimization.PointCostPair pointCostPair42 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair44 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, (double) (short) 10);
        org.apache.commons.math.optimization.PointCostPair pointCostPair46 = new org.apache.commons.math.optimization.PointCostPair(doubleArray40, 100.0d);
        double double47 = pointCostPair46.getCost();
        double[] doubleArray48 = pointCostPair46.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair50 = new org.apache.commons.math.optimization.PointCostPair(doubleArray48, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair51 = nelderMead4.minimize(costFunction5, (-1), convergenceChecker7, doubleArray29, doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 0.0, 32.0, 100.0, 1.0, -1.0]");
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) 100.0f, (double) 100, 97.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, 10, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) (-1L), (double) (short) 100, 0.0d, (double) 1L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 100);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (byte) -1);
        double[] doubleArray20 = pointCostPair19.getPoint();
        double[] doubleArray26 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray26, (double) (short) 0);
        double double31 = pointCostPair30.getCost();
        double double32 = pointCostPair30.getCost();
        double[] doubleArray33 = pointCostPair30.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair35 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) '4');
        org.apache.commons.math.optimization.PointCostPair pointCostPair37 = new org.apache.commons.math.optimization.PointCostPair(doubleArray33, (double) (short) -1);
        double double38 = pointCostPair37.getCost();
        double[] doubleArray39 = pointCostPair37.getPoint();
        double[] doubleArray40 = pointCostPair37.getPoint();
        double[] doubleArray41 = pointCostPair37.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair44 = nelderMead4.minimize(costFunction5, (int) (byte) 0, convergenceChecker7, doubleArray20, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(1.0d, (double) 10, (double) (short) 1, 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray13 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair15 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair17 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair19 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair21 = new org.apache.commons.math.optimization.PointCostPair(doubleArray13, (double) 0.0f);
        double[] doubleArray22 = pointCostPair21.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair24 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, 1.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair26 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (short) -1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair28 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 1L);
        org.apache.commons.math.optimization.PointCostPair pointCostPair30 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) 'a');
        org.apache.commons.math.optimization.PointCostPair pointCostPair32 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) '#');
        org.apache.commons.math.optimization.PointCostPair pointCostPair34 = new org.apache.commons.math.optimization.PointCostPair(doubleArray22, (double) (byte) 1);
        double[] doubleArray35 = pointCostPair34.getPoint();
        double[] doubleArray41 = new double[] { (-1L), (short) -1, (short) 100, 0, 1.0f };
        org.apache.commons.math.optimization.PointCostPair pointCostPair43 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, 10.0d);
        org.apache.commons.math.optimization.PointCostPair pointCostPair45 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) (short) 0);
        org.apache.commons.math.optimization.PointCostPair pointCostPair47 = new org.apache.commons.math.optimization.PointCostPair(doubleArray41, (double) 0);
        double[] doubleArray48 = pointCostPair47.getPoint();
        double[] doubleArray49 = pointCostPair47.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair52 = nelderMead4.minimize(costFunction5, (int) '4', convergenceChecker7, doubleArray35, doubleArray49, 10, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 100.0, 0.0, 1.0]");
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 1L, (double) 1, (double) (-1L), 0.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        double[] doubleArray10 = new double[] { (short) 10, (byte) -1 };
        double[] doubleArray13 = new double[] { (short) 10, (byte) -1 };
        double[] doubleArray16 = new double[] { (short) 10, (byte) -1 };
        double[] doubleArray19 = new double[] { (short) 10, (byte) -1 };
        double[] doubleArray22 = new double[] { (short) 10, (byte) -1 };
        double[] doubleArray25 = new double[] { (short) 10, (byte) -1 };
        double[][] doubleArray26 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair29 = nelderMead4.minimize(costFunction5, (int) '#', convergenceChecker7, doubleArray26, (int) '4', 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException9 = new org.apache.commons.math.optimization.CostException("hi!", objArray8);
        org.apache.commons.math.optimization.CostException costException10 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray8);
        org.apache.commons.math.optimization.CostException costException11 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", (java.lang.Throwable) costException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException13);
        java.lang.String str15 = convergenceException14.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!" + "'", str15, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead(52.0d, (double) (short) 1, (double) 1.0f, 52.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (short) 10, convergenceChecker7, randomVectorGenerator8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math.optimization.PointCostPair pointCostPair2 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) (byte) 1);
        org.apache.commons.math.optimization.PointCostPair pointCostPair4 = new org.apache.commons.math.optimization.PointCostPair(doubleArray0, (double) 100);
        double[] doubleArray5 = pointCostPair4.getPoint();
        double[] doubleArray6 = pointCostPair4.getPoint();
        double double7 = pointCostPair4.getCost();
        double double8 = pointCostPair4.getCost();
        double[] doubleArray9 = pointCostPair4.getPoint();
        double[] doubleArray10 = pointCostPair4.getPoint();
        org.apache.commons.math.optimization.PointCostPair pointCostPair12 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, (-1.0d));
        org.apache.commons.math.optimization.PointCostPair pointCostPair14 = new org.apache.commons.math.optimization.PointCostPair(doubleArray10, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException2);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException13 = new org.apache.commons.math.optimization.CostException("hi!", objArray12);
        org.apache.commons.math.optimization.CostException costException14 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray12);
        java.lang.Object[] objArray15 = costException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("hi!", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException16);
        java.lang.Throwable[] throwableArray18 = convergenceException16.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray21 = convergenceException19.getSuppressed();
        java.lang.Object[] objArray32 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException33 = new org.apache.commons.math.optimization.CostException("hi!", objArray32);
        org.apache.commons.math.optimization.CostException costException34 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray32);
        java.lang.Object[] objArray35 = costException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray35);
        org.apache.commons.math.optimization.CostException costException37 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray35);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException45 = new org.apache.commons.math.optimization.CostException("hi!", objArray44);
        org.apache.commons.math.optimization.CostException costException46 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray44);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.optimization.CostException costException48 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException46);
        org.apache.commons.math.optimization.CostException costException49 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray35, (java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException49);
        convergenceException19.addSuppressed((java.lang.Throwable) costException49);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.optimization.CostException: not positive definite matrix", (java.lang.Throwable) convergenceException19);
        java.lang.Object[] objArray54 = convergenceException19.getArguments();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 10L, (double) (byte) 10, (double) 1.0f, 32.0d);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair10 = nelderMead4.minimize(costFunction5, (int) (byte) 100, convergenceChecker7, randomVectorGenerator8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException(throwable10);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException11, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        java.lang.String str17 = convergenceException16.getPattern();
        java.lang.String str18 = convergenceException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.optimization.CostException costException20 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException19);
        java.lang.String str21 = costException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) costException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: not positive definite matrix", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray26 = convergenceException24.getArguments();
        java.lang.Object[] objArray27 = convergenceException24.getArguments();
        org.apache.commons.math.optimization.CostException costException28 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", objArray27);
        org.apache.commons.math.optimization.CostException costException29 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray27);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray27);
        org.apache.commons.math.optimization.CostException costException31 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray27);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException43 = new org.apache.commons.math.optimization.CostException("hi!", objArray42);
        org.apache.commons.math.optimization.CostException costException44 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray42);
        java.lang.Object[] objArray45 = costException44.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("hi!", objArray45);
        org.apache.commons.math.optimization.CostException costException47 = new org.apache.commons.math.optimization.CostException("org.apache.commons.math.ConvergenceException: ", objArray45);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException55 = new org.apache.commons.math.optimization.CostException("hi!", objArray54);
        org.apache.commons.math.optimization.CostException costException56 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray54);
        org.apache.commons.math.optimization.CostException costException57 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException56);
        org.apache.commons.math.optimization.CostException costException58 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException56);
        org.apache.commons.math.optimization.CostException costException59 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray45, (java.lang.Throwable) costException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) costException59);
        java.lang.String str62 = costException59.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException", objArray27, (java.lang.Throwable) costException59);
        java.lang.String str64 = costException59.getPattern();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "not positive definite matrix" + "'", str62, "not positive definite matrix");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "not positive definite matrix" + "'", str64, "not positive definite matrix");
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.String str5 = convergenceException3.getPattern();
        java.lang.Object[] objArray6 = convergenceException3.getArguments();
        java.lang.String str7 = convergenceException3.getPattern();
        java.lang.Object[] objArray8 = convergenceException3.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray8);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException(throwable11);
        java.lang.Throwable[] throwableArray13 = convergenceException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: hi!", (java.lang.Throwable) convergenceException12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException", objArray8, (java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = convergenceException14.getSuppressed();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        org.apache.commons.math.optimization.NelderMead nelderMead4 = new org.apache.commons.math.optimization.NelderMead((double) 100, (double) (-1L), (double) (short) 0, (double) 0L);
        org.apache.commons.math.optimization.CostFunction costFunction5 = null;
        org.apache.commons.math.optimization.ConvergenceChecker convergenceChecker7 = null;
        org.apache.commons.math.random.RandomVectorGenerator randomVectorGenerator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.PointCostPair pointCostPair9 = nelderMead4.minimize(costFunction5, (int) (short) 100, convergenceChecker7, randomVectorGenerator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException(throwable5);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, 0.0f, convergenceException6, (byte) 0, (byte) 1, 100.0f };
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException("", objArray10);
        java.lang.Class<?> wildcardClass13 = costException12.getClass();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException25);
        java.lang.Object[] objArray27 = new java.lang.Object[] { wildcardClass13, 'a', (-1.0f), "not positive definite matrix", costException25 };
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.optimization.CostException costException30 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException29);
        java.lang.String str31 = costException30.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 0.0, org.apache.commons.math.ConvergenceException, 0, 1, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[class org.apache.commons.math.optimization.CostException, a, -1.0, not positive definite matrix, org.apache.commons.math.optimization.CostException: hi!]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.optimization.CostException: hi!" + "'", str31, "org.apache.commons.math.optimization.CostException: hi!");
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException3 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException4 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException3.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException4);
        org.apache.commons.math.optimization.CostException costException6 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException3);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) costException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException7);
        java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.optimization.CostException costException12 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) convergenceException11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) costException12);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException24 = new org.apache.commons.math.optimization.CostException("hi!", objArray23);
        org.apache.commons.math.optimization.CostException costException25 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray23);
        java.lang.Object[] objArray26 = costException25.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", (java.lang.Throwable) convergenceException27);
        java.lang.Throwable[] throwableArray29 = convergenceException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException35 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException36 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException35.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException36);
        org.apache.commons.math.optimization.CostException costException38 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) notPositiveDefiniteMatrixException36);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException36);
        java.lang.String str40 = notPositiveDefiniteMatrixException36.getPattern();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException41 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        java.lang.Object[] objArray42 = new java.lang.Object[] { notPositiveDefiniteMatrixException36, notPositiveDefiniteMatrixException41 };
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("not positive definite matrix", objArray42, throwable43);
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException45 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        org.apache.commons.math.random.NotPositiveDefiniteMatrixException notPositiveDefiniteMatrixException46 = new org.apache.commons.math.random.NotPositiveDefiniteMatrixException();
        notPositiveDefiniteMatrixException45.addSuppressed((java.lang.Throwable) notPositiveDefiniteMatrixException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) notPositiveDefiniteMatrixException46);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray42, (java.lang.Throwable) notPositiveDefiniteMatrixException46);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 10L, (-1L), 10, 0.0d };
        org.apache.commons.math.optimization.CostException costException60 = new org.apache.commons.math.optimization.CostException("hi!", objArray59);
        org.apache.commons.math.optimization.CostException costException61 = new org.apache.commons.math.optimization.CostException("not positive definite matrix", objArray59);
        org.apache.commons.math.optimization.CostException costException62 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException61);
        org.apache.commons.math.optimization.CostException costException63 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException61);
        org.apache.commons.math.optimization.CostException costException64 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException63);
        org.apache.commons.math.optimization.CostException costException65 = new org.apache.commons.math.optimization.CostException((java.lang.Throwable) costException63);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) costException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("hi!", objArray42, (java.lang.Throwable) convergenceException66);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray42, throwable69);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.String str72 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.optimization.CostException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException27);
        costException12.addSuppressed((java.lang.Throwable) convergenceException27);
        java.lang.Object[] objArray75 = costException12.getArguments();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "not positive definite matrix" + "'", str40, "not positive definite matrix");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix, org.apache.commons.math.random.NotPositiveDefiniteMatrixException: not positive definite matrix]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, -1, 10, 0.0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest32 {

    public static boolean debug = false;

    @Test
    public void test16001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField30 = julianChronology10.millis();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = julianChronology10.add(readablePeriod31, 1645514267617L, 22676659);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = julianChronology10.add(readablePeriod36, 722L, 22487955);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property44.addWrapFieldToCopy((int) '#');
        int[] intArray47 = localDateTime46.getValues();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusDays(0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.withHourOfDay(0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        int int53 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfSecond();
        int int55 = localDateTime51.getYearOfEra();
        int int56 = localDateTime51.getEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514741682L + "'", long25 == 1645514741682L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514267617L + "'", long34 == 1645514267617L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 722L + "'", long39 == 722L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 12, 31, 82560087]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1969 + "'", int55 == 1969);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test16002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime18.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime18.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long26 = dateTime18.getMillis();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime18.toGregorianCalendar();
        java.lang.String str28 = dateTime18.toString();
        org.joda.time.DateTime dateTime30 = dateTime18.minusMinutes(3);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate32 = dateTime30.toLocalDate();
        org.joda.time.DateTime dateTime34 = dateTime30.plusDays(64955);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514741702L + "'", long26 == 1645514741702L);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T06:21:41.702-01:04" + "'", str28, "2022-02-22T06:21:41.702-01:04");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test16003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = property8.getName();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.roundHalfEven();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plus(readablePeriod34);
        org.joda.time.DateTime dateTime36 = localDateTime33.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime.Property property39 = dateTime27.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime11.property(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType37.getRangeDurationType();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minuteOfHour" + "'", str10, "minuteOfHour");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
    }

    @Test
    public void test16004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        int int5 = property3.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        int int7 = localDateTime6.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDateTime6.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
    }

    @Test
    public void test16005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.era();
        org.joda.time.Chronology chronology82 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField83 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField86 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology10.weekyearOfCentury();
        long long92 = dateTimeField90.roundHalfCeiling((long) 29);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 954240000L + "'", long92 == 954240000L);
    }

    @Test
    public void test16006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test16007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16007");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = nameProvider0.getName(locale1, "-0001-01-01T00:00:00.056", "UTC");
        java.util.Locale locale7 = new java.util.Locale("52", "minuteOfHour");
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.lang.String str13 = nameProvider0.getShortName(locale9, "-84125007", "26156026");
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setRegion("IT");
        java.util.Locale.Builder builder18 = builder14.setLanguage("");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str24 = locale20.getExtension('x');
        java.lang.String str25 = locale20.getISO3Country();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology37);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology37.millisOfDay();
        org.joda.time.DurationField durationField41 = julianChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology37.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = dateTimeField42.getAsShortText((long) (byte) 10, locale44);
        java.util.Locale.Builder builder46 = builder26.setLocale(locale44);
        java.lang.String str47 = locale44.getVariant();
        java.lang.String str48 = locale20.getDisplayLanguage(locale44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology59.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property66.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = localDateTime68.getFieldTypes();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.lang.String str76 = locale72.getDisplayVariant(locale74);
        java.lang.String str77 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) localDateTime68, locale72);
        java.lang.String str78 = locale72.getDisplayCountry();
        java.lang.String str79 = locale20.getDisplayVariant(locale72);
        java.util.Locale.Builder builder80 = builder18.setLocale(locale72);
        java.lang.String str83 = nameProvider0.getName(locale72, "22456", "1900");
        java.lang.String str84 = locale72.getDisplayVariant();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale7.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MINUTEOFHOUR" + "'", str10, "MINUTEOFHOUR");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22" + "'", str45, "22");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English" + "'", str48, "English");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "82560056" + "'", str77, "82560056");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test16008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.secondOfDay();
        java.lang.String str23 = dateTimeField22.getName();
        long long25 = dateTimeField22.roundHalfFloor(1646551370331L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "secondOfDay" + "'", str23, "secondOfDay");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1646551370000L + "'", long25 == 1646551370000L);
    }

    @Test
    public void test16009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        int int12 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.minusWeeks((int) '4');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        int int29 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusMillis(59);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusYears(0);
        int int35 = localDateTime34.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusYears(363);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 41 + "'", int35 == 41);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test16010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.plus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded((long) (byte) 1, 353);
        org.joda.time.Instant instant23 = instant18.plus(0L);
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology46);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology46.centuryOfEra();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology46);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str53 = dateTimeFieldType52.toString();
        int int54 = dateTime51.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime56 = dateTime51.plusDays(5);
        org.joda.time.DateTime.Property property57 = dateTime56.weekyear();
        boolean boolean58 = dateTimeZone33.equals((java.lang.Object) dateTime56);
        int int59 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime56.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "yearOfCentury" + "'", str53, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone60);
    }

    @Test
    public void test16011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.secondOfDay();
        org.joda.time.Instant instant13 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Chronology chronology17 = gJChronology11.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.era();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology30);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology30.year();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology30.dayOfMonth();
        long long38 = dateTimeField36.remainder(11139811200000L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(1645514157380L, dateTimeZone48);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.hourOfDay();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime56.getZone();
        java.lang.String str62 = dateTimeZone60.getNameKey((long) 10);
        org.joda.time.Chronology chronology63 = gJChronology52.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology52.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.year();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(100L);
        int int80 = localDateTime79.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.withFields((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.minusMillis((int) (short) 1);
        long long87 = chronology73.set((org.joda.time.ReadablePartial) localDateTime85, 1645514156466L);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.yearOfCentury();
        boolean boolean89 = gJChronology52.equals((java.lang.Object) localDateTime85);
        org.joda.time.LocalDateTime.Property property90 = localDateTime85.yearOfCentury();
        org.joda.time.LocalDateTime.Property property91 = localDateTime85.hourOfDay();
        java.util.Locale locale96 = new java.util.Locale("days", "0035-12-31T23:00:00.001-01:00", "1970");
        java.lang.String str97 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime85, 2022, locale96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = dateTimeField18.getAsText(974, locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 974");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 82560000L + "'", long38 == 82560000L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 600960099L + "'", long87 == 600960099L);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertEquals(locale96.toString(), "days_0035-12-31T23:00:00.001-01:00_1970");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "2022" + "'", str97, "2022");
    }

    @Test
    public void test16012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16012");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.DurationField durationField34 = julianChronology33.weeks();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology45);
        long long48 = julianChronology33.set((org.joda.time.ReadablePartial) localDateTime46, (long) 100);
        org.joda.time.DurationField durationField49 = julianChronology33.years();
        org.joda.time.DurationField durationField50 = julianChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology33.weekOfWeekyear();
        org.joda.time.DateTime dateTime53 = dateTime22.toDateTime((org.joda.time.Chronology) julianChronology33);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime56.getZone();
        java.lang.String str62 = dateTimeZone60.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField65 = julianChronology64.dayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime68.getZone();
        java.lang.String str74 = dateTimeZone72.getNameKey(100L);
        org.joda.time.Chronology chronology75 = julianChronology64.withZone(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField76 = julianChronology64.minuteOfDay();
        long long82 = julianChronology64.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField83 = julianChronology64.hourOfDay();
        org.joda.time.DurationField durationField84 = julianChronology64.months();
        long long88 = julianChronology64.add(2142L, 1677050413027L, 229);
        org.joda.time.DateTimeZone dateTimeZone89 = julianChronology64.getZone();
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime22.toMutableDateTime(dateTimeZone89);
        org.joda.time.MutableDateTime mutableDateTime91 = org.joda.time.MutableDateTime.now(dateTimeZone89);
        mutableDateTime91.setTime(1677027840000L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514741950L + "'", long48 == 1645514741950L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(julianChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-46489900L) + "'", long82 == (-46489900L));
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 384044544585325L + "'", long88 == 384044544585325L);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(mutableDateTime91);
    }

    @Test
    public void test16013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay20 = dateTime19.toTimeOfDay();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property21.roundHalfEvenCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test16014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (-59024505420000L), 22635485);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.secondOfDay();
        boolean boolean31 = property23.equals((java.lang.Object) property30);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMillis((int) (short) 1);
        int[] intArray41 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime39, 15L);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology10.yearOfEra();
        long long44 = dateTimeField42.roundCeiling((long) 231584);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-59024505420000L) + "'", long19 == (-59024505420000L));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1969, 12, 18, 82560015]");
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1127040000L + "'", long44 == 1127040000L);
    }

    @Test
    public void test16015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16015");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMillis((int) (short) 1);
        long long22 = chronology8.set((org.joda.time.ReadablePartial) localDateTime20, 1645514156466L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime30.minuteOfHour();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.secondOfDay();
        boolean boolean43 = dateTime30.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        mutableDateTime46.setDate((org.joda.time.ReadableInstant) mutableDateTime52);
        mutableDateTime46.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime46.year();
        mutableDateTime38.setTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 10);
        java.lang.String str69 = dateTimeZone65.getName((long) 3);
        mutableDateTime46.setZoneRetainFields(dateTimeZone65);
        org.joda.time.Chronology chronology71 = chronology8.withZone(dateTimeZone65);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(1677050148384L, (org.joda.time.Chronology) julianChronology72);
        org.joda.time.DateTimeField dateTimeField74 = julianChronology72.weekyearOfCentury();
        org.joda.time.DurationField durationField75 = julianChronology72.halfdays();
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology72);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.millisOfDay();
        mutableDateTime76.setWeekyear((-152232));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 600960099L + "'", long22 == 600960099L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-01:04" + "'", str69, "-01:04");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(julianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test16016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16016");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight52 = dateTime51.toDateMidnight();
        int int53 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime37.plus(readablePeriod54);
        org.joda.time.Instant instant57 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.plus(readableDuration58);
        org.joda.time.Instant instant62 = instant57.withDurationAdded(1677050154549L, 16);
        int int63 = dateTime55.compareTo((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTime dateTime65 = dateTime55.minusYears(82800);
        int int66 = dateTime55.getDayOfWeek();
        org.joda.time.DateTime.Property property67 = dateTime55.dayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test16017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16017");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 365, chronology7);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(1L, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfSecond();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) 'x');
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime38.getFieldTypes();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale42.getDisplayVariant(locale44);
        java.lang.String str47 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale42);
        java.lang.String str48 = dateTime16.toString("52", locale42);
        java.lang.String str50 = locale42.getExtension('a');
        java.lang.String str51 = locale42.toLanguageTag();
        java.util.Set<java.lang.Character> charSet52 = locale42.getExtensionKeys();
        java.lang.String str53 = dateTimeField12.getAsShortText(1663, locale42);
        java.lang.String str54 = locale42.getCountry();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "82560056" + "'", str47, "82560056");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "52" + "'", str48, "52");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1663" + "'", str53, "1663");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test16018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16018");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(22959559, 66171, 65754549, 10, 22877538, 1430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22877538 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test16020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16020");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = property8.add(22498359);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setTime((int) (byte) 10, 22757, 25434549, 2077);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22757 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test16021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DurationField durationField19 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField21 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test16022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime2.property(dateTimeFieldType21);
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.era();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str3, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test16023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.DurationField durationField26 = julianChronology25.weeks();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology37);
        long long40 = julianChronology25.set((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DurationField durationField41 = julianChronology25.years();
        org.joda.time.DurationField durationField42 = julianChronology25.centuries();
        boolean boolean43 = julianChronology11.equals((java.lang.Object) julianChronology25);
        java.lang.String str44 = julianChronology11.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = julianChronology11.getZone();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514742169L + "'", long40 == 1645514742169L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str44, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test16024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime15.minus((long) 513);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test16025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology10.add(readablePeriod17, 687L, 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 687L + "'", long20 == 687L);
    }

    @Test
    public void test16026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        int int17 = dateTimeField16.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test16027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        long long83 = julianChronology10.add(readablePeriod80, (long) 26450385, 22716870);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 26450385L + "'", long83 == 26450385L);
    }

    @Test
    public void test16028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16028");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readablePeriod21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(100L);
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        int int41 = mutableDateTime38.getMinuteOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readablePeriod50);
        int int52 = mutableDateTime38.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.plus(readablePeriod53);
        org.joda.time.DateTime dateTime56 = dateTime51.plusYears(1);
        org.joda.time.DateTime dateTime59 = dateTime51.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime60 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime61 = dateTime26.withFields((org.joda.time.ReadablePartial) localDateTime34);
        int int62 = localDateTime34.getMillisOfDay();
        long long64 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime34, (long) 6);
        org.joda.time.DurationField durationField65 = julianChronology11.weeks();
        org.joda.time.DurationField durationField66 = julianChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology11.halfdayOfDay();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(1645514235671L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField69 = julianChronology11.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1376 + "'", int41 == 1376);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 82560100 + "'", int62 == 82560100);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1728000100L + "'", long64 == 1728000100L);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test16029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) 'u');
        org.joda.time.DateTime dateTime36 = dateTime34.minusHours(0);
        org.joda.time.DateTime.Property property37 = dateTime34.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test16030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = julianChronology10.add(readablePeriod26, 1677050148384L, 292278993);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1677050148384L + "'", long29 == 1677050148384L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test16031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        mutableDateTime2.addYears((int) 'x');
        mutableDateTime2.addWeekyears(26176590);
        java.lang.String str9 = mutableDateTime2.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime2.year();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime2.dayOfMonth();
        mutableDateTime2.setWeekyear(22621254);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26178679-12-27T22:56:00.001-01:04" + "'", str9, "26178679-12-27T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test16032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(69);
        org.joda.time.Chronology chronology19 = julianChronology10.withZone(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, 41547);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 41547");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test16033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField22 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test16034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.DurationField durationField43 = julianChronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.secondOfMinute();
        boolean boolean62 = julianChronology42.equals((java.lang.Object) chronology52);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey(100L);
        long long73 = dateTimeZone69.nextTransition((long) (short) 0);
        int int75 = dateTimeZone69.getStandardOffset(36070100L);
        java.lang.String str77 = dateTimeZone69.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.Chronology chronology79 = chronology52.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime80 = dateTime29.withChronology(chronology52);
        org.joda.time.DateTime dateTime82 = dateTime29.withYearOfEra(6);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime85 = dateTime83.plus((long) 'x');
        org.joda.time.DateTime dateTime87 = dateTime85.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime88 = dateTime85.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property89 = dateTime88.secondOfDay();
        org.joda.time.DateTime dateTime90 = property89.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime90.getZone();
        org.joda.time.DateTime dateTime92 = dateTime82.withZone(dateTimeZone91);
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime94 = org.joda.time.MutableDateTime.now(dateTimeZone93);
        java.lang.String str96 = dateTimeZone93.getNameKey(1645514398297L);
        org.joda.time.DateTime dateTime97 = dateTime82.toDateTime(dateTimeZone93);
        long long98 = dateTime82.getMillis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3840000) + "'", int75 == (-3840000));
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-01:04" + "'", str77, "-01:04");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
// flaky:         org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(dateTime97);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-61946294399900L) + "'", long98 == (-61946294399900L));
    }

    @Test
    public void test16035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16035");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        mutableDateTime23.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime23.setZone(dateTimeZone39);
        boolean boolean41 = strSet3.equals((java.lang.Object) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime23.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundCeiling();
        mutableDateTime43.setYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.era();
        org.joda.time.DurationField durationField47 = property46.getLeapDurationField();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
    }

    @Test
    public void test16036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test16037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField30 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.dayOfWeek();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100L);
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTime dateTime47 = dateTime32.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds(20);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plus(readableDuration50);
        boolean boolean52 = julianChronology10.equals((java.lang.Object) localDateTime49);
        int int53 = localDateTime49.getMinuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514742432L + "'", long25 == 1645514742432L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 56 + "'", int53 == 56);
    }

    @Test
    public void test16038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16038");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514326977L);
        org.joda.time.DateTime dateTime3 = dateTime1.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime5 = dateTime3.withWeekyear(28);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test16039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (byte) -1);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = dateTimeZone15.getShortName(1677050183994L, locale19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone15);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getCountry();
        java.lang.String str26 = locale24.getDisplayScript();
        java.util.Locale locale28 = new java.util.Locale("56");
        java.lang.String str29 = locale24.getDisplayCountry(locale28);
        java.lang.String str30 = dateTimeZone15.getName(1677050296471L, locale24);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "52_MINUTEOFHOUR");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:04" + "'", str20, "-01:04");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale28.toString(), "56");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-01:04" + "'", str30, "-01:04");
    }

    @Test
    public void test16040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16040");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 22);
        boolean boolean3 = timeZone0.observesDaylightTime();
        timeZone0.setRawOffset(22654609);
        int int7 = timeZone0.getOffset(3619045L);
        timeZone0.setRawOffset(82560056);
        timeZone0.setID("1970-01-08T00:00:00.220");
        timeZone0.setRawOffset(26430087);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.lang.String str15 = timeZone14.getID();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.lang.String str17 = timeZone16.getID();
        int int19 = timeZone16.getOffset(0L);
        timeZone16.setID("2022-02-22T07:16:14.947Z");
        boolean boolean22 = timeZone14.hasSameRules(timeZone16);
        int int24 = timeZone14.getOffset(0L);
        boolean boolean25 = timeZone0.hasSameRules(timeZone14);
        java.lang.String str26 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+07:20");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22715781 + "'", int2 == 22715781);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22654609 + "'", int7 == 22654609);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+06:18");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[Etc/UTC]" + "'", str15, "GJChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+06:18");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GJChronology[Etc/UTC]" + "'", str17, "GJChronology[Etc/UTC]");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22715781 + "'", int19 == 22715781);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22715781 + "'", int24 == 22715781);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT+07:20" + "'", str26, "GMT+07:20");
    }

    @Test
    public void test16041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16041");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder9.setLanguage("GBR");
        java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("82800052");
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.minuteOfHour();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime38.getFieldTypes();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale42.getDisplayVariant(locale44);
        java.lang.String str47 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale42);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale48.getDisplayScript(locale50);
        java.lang.String str54 = locale42.getDisplayLanguage(locale48);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        java.lang.String str66 = mutableDateTime65.toString();
        mutableDateTime65.setDate((long) (short) 100);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = mutableDateTime71.getZone();
        mutableDateTime65.setZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime62.toDateTime(dateTimeZone75);
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = dateTime62.toString("0", locale80);
        java.lang.String str82 = locale48.getDisplayVariant(locale80);
        java.lang.String str83 = property17.getAsShortText(locale48);
        java.util.Locale.Builder builder84 = builder13.setLocale(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder86 = builder13.setVariant("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "82560056" + "'", str47, "82560056");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str66, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "31" + "'", str83, "31");
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test16042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readableDuration28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(100L);
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime31.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime31.minusMonths((int) (byte) 1);
        boolean boolean46 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.secondOfMinute();
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusDays((int) ' ');
        boolean boolean59 = localDateTime48.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        boolean boolean60 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime27.minusYears(69);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy(1971);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "42" + "'", str64, "42");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test16043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.halfdayOfDay();
        boolean boolean15 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test16044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        int int19 = dateTimeZone16.getOffsetFromLocal(63812819828009L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3840000) + "'", int19 == (-3840000));
    }

    @Test
    public void test16045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime7.withCenturyOfEra(457087);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = dateTime29.isEqual(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusSeconds(0);
        long long34 = dateTime33.getMillis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1442365783428342589L + "'", long34 == 1442365783428342589L);
    }

    @Test
    public void test16046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMillis(6);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime15.getZone();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.Chronology chronology25 = gJChronology23.withUTC();
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) gJChronology23);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.era();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test16047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) 'u');
        org.joda.time.DateTime dateTime35 = property30.withMinimumValue();
        org.joda.time.DateTime dateTime36 = property30.withMinimumValue();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.era();
        boolean boolean39 = property30.equals((java.lang.Object) gJChronology37);
        org.joda.time.DateTime dateTime40 = property30.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test16048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology16.minuteOfDay();
        long long34 = julianChronology16.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        boolean boolean35 = property3.equals((java.lang.Object) 0);
        java.lang.String str36 = property3.getAsString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        int int42 = mutableDateTime39.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.yearOfCentury();
        mutableDateTime39.setSecondOfDay(436);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Calendar calendar48 = mutableDateTime39.toCalendar(locale46);
        java.lang.String str49 = property3.getAsText(locale46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        int int55 = mutableDateTime52.getMinuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfCentury();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readablePeriod64);
        int int66 = mutableDateTime52.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.plus(readablePeriod67);
        org.joda.time.DateTime dateTime70 = dateTime65.plusYears(1);
        org.joda.time.DateTime dateTime73 = dateTime65.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime75 = dateTime65.minusYears(99);
        org.joda.time.DateTime dateTime77 = dateTime65.plusYears(353);
        int int78 = property3.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime80 = dateTime65.withWeekyear(26156026);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.withPeriodAdded(readablePeriod81, 22686569);
        org.joda.time.DateTime.Property property84 = dateTime83.secondOfDay();
        int int85 = dateTime83.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-46489900L) + "'", long34 == (-46489900L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "82560052" + "'", str36, "82560052");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1376 + "'", int42 == 1376);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-82123999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=7,SECOND=16,MILLISECOND=1,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "82560052" + "'", str49, "82560052");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1376 + "'", int55 == 1376);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 48 + "'", int85 == 48);
    }

    @Test
    public void test16049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfDay();
        org.joda.time.DurationField durationField22 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField24 = julianChronology10.minutes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test16050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime79.setDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology83);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        mutableDateTime84.setZone(dateTimeZone85);
        org.joda.time.Chronology chronology87 = mutableDateTime84.getChronology();
        mutableDateTime84.addHours((int) (short) 0);
        mutableDateTime84.setMillisOfSecond((int) '#');
        mutableDateTime79.setTime((org.joda.time.ReadableInstant) mutableDateTime84);
        org.joda.time.MutableDateTime.Property property93 = mutableDateTime79.yearOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test16051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime24.yearOfCentury();
        boolean boolean70 = property69.isLeap();
        org.joda.time.DurationField durationField71 = property69.getDurationField();
        org.joda.time.LocalDateTime localDateTime72 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = property69.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime74 = property69.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime75 = property69.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1376 + "'", int34 == 1376);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test16052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16052");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder0.setRegion("100");
        java.util.Locale.Builder builder24 = builder0.setLanguageTag("ko");
        java.util.Locale.Builder builder25 = builder0.clearExtensions();
        java.util.Locale.Builder builder28 = builder0.setExtension('a', "");
        java.util.Locale.Builder builder29 = builder0.clearExtensions();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.setVariant("1969-11-30T22:56:00.100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1969-11-30T22:56:00.100 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test16053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16053");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey(100L);
        long long12 = dateTimeZone8.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DurationField durationField15 = gJChronology13.weeks();
        org.joda.time.DurationField durationField16 = gJChronology13.millis();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.minuteOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(1645514305228L, (org.joda.time.Chronology) gJChronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology13.add(readablePeriod21, (-3308085895496L), 364);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(31556952000L, (org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime27 = dateTime25.plus(0L);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(22683951);
        int int30 = dateTime29.getDayOfMonth();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3308085895496L) + "'", long24 == (-3308085895496L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
    }

    @Test
    public void test16054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16054");
        java.util.Locale locale2 = new java.util.Locale("1970-01-05T11:00:00.001+59:00", "millisOfDay");
        org.junit.Assert.assertEquals(locale2.toString(), "1970-01-05t11:00:00.001+59:00_MILLISOFDAY");
    }

    @Test
    public void test16055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((-1));
        int int19 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology20 = localDateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, 1645514276493L, 381);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(chronology20);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514276493L + "'", long24 == 1645514276493L);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test16056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.secondOfDay();
        boolean boolean20 = dateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.withWeekyear(26403697);
        int int23 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTime.Property property24 = dateTime7.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test16057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        mutableDateTime12.setWeekyear(2922730);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 22757);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.DurationField durationField46 = julianChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.halfdayOfDay();
        org.joda.time.DurationField durationField48 = julianChronology45.minutes();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology45.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField49.getType();
        org.joda.time.DateTime.Property property51 = dateTime34.property(dateTimeFieldType50);
        int int52 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:04" + "'", str10, "-01:04");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test16058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16058");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.plusDays(1380);
        int int42 = dateTime41.getMonthOfYear();
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime41.monthOfYear();
        int int45 = dateTime41.getSecondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 42 + "'", int45 == 42);
    }

    @Test
    public void test16059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16059");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology17.add(readablePeriod18, 1645514170103L, 259);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = gJChronology17.getDateTimeMillis(231584, 22677137, 808, 26446196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22677137 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514170103L + "'", long21 == 1645514170103L);
    }

    @Test
    public void test16060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16060");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology12.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology12.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = julianChronology12.add(readablePeriod19, 1645514153739L, 1);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology12.clockhourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology35.dayOfYear();
        org.joda.time.DurationField durationField37 = julianChronology35.minutes();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.year();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property45.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) ' ');
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.hourOfDay();
        int[] intArray53 = julianChronology35.get((org.joda.time.ReadablePartial) localDateTime49, 1645514164504L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        java.lang.String str63 = dateTimeFieldType61.toString();
        int int64 = localDateTime49.get(dateTimeFieldType61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime49.plusWeeks(26197359);
        int int67 = localDateTime66.getDayOfYear();
        java.util.Locale locale70 = new java.util.Locale("fr");
        java.lang.String str71 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, 0, locale70);
        long long74 = dateTimeField24.add(1645514594324L, 30);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minuteOfHour" + "'", str1, "minuteOfHour");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514153739L + "'", long22 == 1645514153739L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2022, 2, 9, 22324504]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minuteOfDay" + "'", str63, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1376 + "'", int64 == 1376);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 161 + "'", int67 == 161);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645622594324L + "'", long74 == 1645622594324L);
    }

    @Test
    public void test16061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16061");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMillisOfDay((int) (byte) 1);
        java.lang.String str26 = localDateTime20.toString();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-07T22:56:00.100" + "'", str26, "1970-01-07T22:56:00.100");
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test16062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType2.getField((org.joda.time.Chronology) gJChronology18);
        int int21 = dateTimeField19.get(1674540794806L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(1645514157380L, dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) ' ');
        org.joda.time.DateTime dateTime53 = dateTime49.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes(23);
        org.joda.time.DateTime.Property property56 = dateTime53.yearOfCentury();
        int int57 = dateTime53.getWeekOfWeekyear();
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology69 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology69);
        org.joda.time.DateTimeField dateTimeField71 = julianChronology69.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField72 = julianChronology69.millisOfDay();
        org.joda.time.DurationField durationField73 = julianChronology69.centuries();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology69.hourOfDay();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = dateTimeField74.getAsShortText((long) (byte) 10, locale76);
        java.util.Locale.Builder builder78 = builder58.setLocale(locale76);
        java.lang.String str79 = locale76.getVariant();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str81 = locale80.getDisplayScript();
        java.lang.String str83 = locale80.getExtension('u');
        java.lang.String str84 = locale76.getDisplayLanguage(locale80);
        java.util.Calendar calendar85 = dateTime53.toCalendar(locale76);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.fromCalendarFields(calendar85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusHours((-608));
        int int89 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime86);
        java.util.Locale locale93 = new java.util.Locale("8", "1970-01-10T00:00:00.100");
        java.lang.String str94 = locale93.getLanguage();
        java.lang.String str95 = locale93.getDisplayVariant();
        java.lang.String str96 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime86, 778, locale93);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 381 + "'", int3 == 381);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3837978L) + "'", long16 == (-3837978L));
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 309 + "'", int21 == 309);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(julianChronology69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "22" + "'", str77, "22");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645514742957,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=21,SECOND=42,MILLISECOND=957,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 292278993 + "'", int89 == 292278993);
        org.junit.Assert.assertEquals(locale93.toString(), "8_1970-01-10T00:00:00.100");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "8" + "'", str94, "8");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "778" + "'", str96, "778");
    }

    @Test
    public void test16063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.Chronology chronology37 = chronology35.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime27.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey(100L);
        long long50 = dateTimeZone46.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.secondOfDay();
        org.joda.time.Instant instant53 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        mutableDateTime39.setMillis((org.joda.time.ReadableInstant) instant53);
        boolean boolean58 = mutableDateTime39.isAfter(1677046597282L);
        mutableDateTime39.setYear(22686569);
        mutableDateTime39.addSeconds(22496058);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(100L);
        int int68 = localDateTime67.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime74 = localDateTime70.toDateTime();
        org.joda.time.DateTime dateTime76 = dateTime74.minus((long) 7);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime79 = dateTime74.plusMillis(26197359);
        int int80 = dateTime79.getDayOfMonth();
        mutableDateTime39.setTime((org.joda.time.ReadableInstant) dateTime79);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setDateTime(43723, 873, 0, 2090, 66182, 22857196, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2090 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
    }

    @Test
    public void test16064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField81 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology10.weekyear();
        int int85 = dateTimeField82.getDifference((long) 84037292, 1646637708860L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-52) + "'", int85 == (-52));
    }

    @Test
    public void test16065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16065");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(19164);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 22650316);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:19.164" + "'", str3, "+00:00:19.164");
    }

    @Test
    public void test16066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16066");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        java.lang.String str46 = gJChronology41.toString();
        org.joda.time.DurationField durationField47 = gJChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.weekyear();
        org.joda.time.DurationField durationField50 = gJChronology41.seconds();
        long long53 = durationField50.getDifferenceAsLong(1645514535878L, 1624346337362L);
        long long56 = durationField50.getValueAsLong(1645514725085L, 1959605399040000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 381 + "'", int13 == 381);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(instant45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GJChronology[-01:04]" + "'", str46, "GJChronology[-01:04]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 21168198L + "'", long53 == 21168198L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645514725L + "'", long56 == 1645514725L);
    }

    @Test
    public void test16067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        long long45 = dateTimeZone33.getMillisKeepLocal(dateTimeZone41, (long) (byte) 10);
        mutableDateTime20.setZoneRetainFields(dateTimeZone33);
        int int48 = dateTimeZone33.getStandardOffset(2629800000L);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime17.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime51 = dateTime17.withYearOfEra(22676659);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime17);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str24, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3840000) + "'", int48 == (-3840000));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test16068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16068");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = julianChronology11.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        long long19 = dateTimeField16.remainder(1645514457754L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3392217754L + "'", long19 == 3392217754L);
    }

    @Test
    public void test16069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) (byte) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury(5);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        long long20 = property18.remainder();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundCeiling();
        boolean boolean22 = dateTime16.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.addMonths(3);
        int int25 = mutableDateTime21.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.yearOfCentury();
        int int27 = mutableDateTime21.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundCeiling();
        org.joda.time.DurationField durationField30 = property28.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNull(durationField30);
    }

    @Test
    public void test16070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean23 = dateTimeZone21.isStandardOffset(1677050149186L);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = dateTimeZone21.getShortName((long) 10, locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean29 = julianChronology10.equals((java.lang.Object) dateTimeFormatter28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        long long42 = chronology35.set((org.joda.time.ReadablePartial) localDateTime40, (long) '4');
        org.joda.time.Chronology chronology43 = chronology35.withUTC();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        long long56 = chronology49.set((org.joda.time.ReadablePartial) localDateTime54, (long) '4');
        int[] intArray58 = chronology43.get((org.joda.time.ReadablePartial) localDateTime54, 0L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        int int64 = mutableDateTime61.getMinuteOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        mutableDateTime67.setZone(dateTimeZone68);
        org.joda.time.Chronology chronology70 = mutableDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfCentury();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readablePeriod73);
        int int75 = mutableDateTime61.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.DateTime dateTime77 = dateTime74.plus(readablePeriod76);
        org.joda.time.DateTime dateTime78 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.plus(readableDuration79);
        org.joda.time.DateTime dateTime81 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property82 = dateTime80.millisOfDay();
        org.joda.time.DateTime dateTime84 = dateTime80.withYearOfCentury(53);
        org.joda.time.DateTime dateTime86 = dateTime84.withMillisOfDay(43570);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.DateTime dateTime90 = dateTime84.toDateTime(dateTimeZone89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter28.withZone(dateTimeZone89);
        java.util.Locale locale93 = java.util.Locale.forLanguageTag("\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter91.withLocale(locale93);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1376 + "'", int64 == 1376);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
    }

    @Test
    public void test16071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16071");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMillis((int) (short) 1);
        long long22 = chronology8.set((org.joda.time.ReadablePartial) localDateTime20, 1645514156466L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime30.minuteOfHour();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.secondOfDay();
        boolean boolean43 = dateTime30.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        mutableDateTime46.setDate((org.joda.time.ReadableInstant) mutableDateTime52);
        mutableDateTime46.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime46.year();
        mutableDateTime38.setTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 10);
        java.lang.String str69 = dateTimeZone65.getName((long) 3);
        mutableDateTime46.setZoneRetainFields(dateTimeZone65);
        org.joda.time.Chronology chronology71 = chronology8.withZone(dateTimeZone65);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(1677050148384L, (org.joda.time.Chronology) julianChronology72);
        org.joda.time.DateTimeField dateTimeField74 = julianChronology72.weekyearOfCentury();
        org.joda.time.DurationField durationField75 = julianChronology72.years();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology72.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 600960099L + "'", long22 == 600960099L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-01:04" + "'", str69, "-01:04");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(julianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test16072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16072");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime28 = property27.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis(26442826);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime30.getFields();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
    }

    @Test
    public void test16073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16073");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1646551296558L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        long long14 = dateTimeZone8.convertUTCToLocal((long) 2022);
        java.lang.String str16 = dateTimeZone8.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        int int31 = localDateTime26.indexOf(dateTimeFieldType29);
        java.lang.String str32 = localDateTime26.toString();
        int int33 = localDateTime26.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime26.getFields();
        boolean boolean35 = dateTimeZone8.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime36 = dateTime1.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3837978L) + "'", long14 == (-3837978L));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:04" + "'", str16, "-01:04");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 381 + "'", int30 == 381);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-0001-12-31T22:56:00.056" + "'", str32, "-0001-12-31T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test16074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.centuryOfEra();
        org.joda.time.DurationField durationField18 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.monthOfYear();
        java.lang.String str20 = julianChronology10.toString();
        org.joda.time.DurationField durationField21 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str20, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test16075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16075");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime12.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime12.withDayOfMonth(1);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean25 = dateTimeZone23.isStandardOffset(1677050149186L);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = dateTimeZone23.getShortName((long) 10, locale27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter21.withLocale(locale27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        boolean boolean31 = dateTimeFormatter30.isParser();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.secondOfMinute();
        boolean boolean39 = strSet33.remove((java.lang.Object) property38);
        org.joda.time.LocalDateTime localDateTime40 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property38.withMaximumValue();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.setRegion("IT");
        java.util.Locale locale46 = new java.util.Locale("fr");
        java.util.Locale.Builder builder47 = builder42.setLocale(locale46);
        java.util.Locale.Builder builder50 = builder47.setExtension('a', "52");
        java.util.Locale locale51 = builder50.build();
        int int52 = property38.getMaximumShortTextLength(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter30.withLocale(locale51);
        java.util.Calendar calendar54 = dateTime18.toCalendar(locale51);
        java.lang.String str55 = locale0.getDisplayLanguage(locale51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr__#a-52");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1643700343236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=21,SECOND=43,MILLISECOND=236,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais" + "'", str55, "fran\347ais");
    }

    @Test
    public void test16076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16076");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology12.year();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = julianChronology12.days();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusHours(23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusDays((int) (byte) -1);
        long long28 = julianChronology12.set((org.joda.time.ReadablePartial) localDateTime26, 15L);
        org.joda.time.DurationField durationField29 = julianChronology12.days();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType1.getField((org.joda.time.Chronology) julianChronology12);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(1645514182331L, (org.joda.time.Chronology) julianChronology12);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.era();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L);
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        int int61 = mutableDateTime58.getMinuteOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readablePeriod70);
        int int72 = mutableDateTime58.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime71.plus(readablePeriod73);
        org.joda.time.DateTime dateTime76 = dateTime71.plusYears(1);
        org.joda.time.DateTime dateTime79 = dateTime71.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime80 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime81 = dateTime46.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTime dateTime82 = dateTime81.toDateTime();
        org.joda.time.LocalDateTime localDateTime83 = dateTime82.toLocalDateTime();
        org.joda.time.DateTime.Property property84 = dateTime82.minuteOfHour();
        int int85 = dateTime82.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str87 = dateTimeFieldType86.toString();
        boolean boolean88 = dateTime82.isSupported(dateTimeFieldType86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property90 = dateTime82.property(dateTimeFieldType89);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime31.property(dateTimeFieldType89);
        boolean boolean92 = mutableDateTime31.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1646551543261L + "'", long28 == 1646551543261L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1376 + "'", int61 == 1376);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "minuteOfHour" + "'", str87, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test16077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        mutableDateTime2.addWeekyears(353);
        int int47 = mutableDateTime2.getYear();
        mutableDateTime2.addMonths(0);
        int int50 = mutableDateTime2.getRoundingMode();
        int int51 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.addDays(22960886);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "56" + "'", str43, "56");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 56 + "'", int44 == 56);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2323 + "'", int47 == 2323);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test16078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = dateTimeFormatter33.parseLocalTime("31");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514743345L + "'", long29 == 1645514743345L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test16079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.dayOfYear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime31.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int60 = localDateTime58.get(dateTimeFieldType59);
        int int61 = localDateTime56.indexOf(dateTimeFieldType59);
        java.lang.String str62 = localDateTime56.toString();
        int int63 = localDateTime56.size();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.plusWeeks(12);
        java.lang.String str66 = localDateTime65.toString();
        int int67 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        boolean boolean68 = julianChronology10.equals((java.lang.Object) localDateTime45);
        org.joda.time.DateTimeField dateTimeField69 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514743361L + "'", long25 == 1645514743361L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 381 + "'", int60 == 381);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-0001-12-31T22:56:00.056" + "'", str62, "-0001-12-31T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0000-03-24T22:56:00.056" + "'", str66, "0000-03-24T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test16080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16080");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(27);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+27:00" + "'", str2, "+27:00");
    }

    @Test
    public void test16081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.LocalDateTime.Property property64 = localDateTime33.dayOfWeek();
        int int65 = localDateTime33.getYearOfCentury();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.year();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(100L);
        int int80 = localDateTime79.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.withFields((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.minusMillis((int) (short) 1);
        long long87 = chronology73.set((org.joda.time.ReadablePartial) localDateTime85, 1645514156466L);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime90 = property88.addWrapFieldToCopy(16);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.hourOfDay();
        int int92 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime90);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1376 + "'", int40 == 1376);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82560100 + "'", int61 == 82560100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 70 + "'", int65 == 70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 600960099L + "'", long87 == 600960099L);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test16082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16082");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.dayOfWeek();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField19 = julianChronology11.minutes();
        org.joda.time.DurationField durationField20 = julianChronology11.days();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 418, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test16083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16083");
        java.util.Locale locale2 = new java.util.Locale("", "24");
        org.junit.Assert.assertEquals(locale2.toString(), "_24");
    }

    @Test
    public void test16084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getDisplayVariant(locale25);
        java.lang.String str28 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale23);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale29.getDisplayScript(locale31);
        java.lang.String str35 = locale23.getDisplayLanguage(locale29);
        boolean boolean36 = locale29.hasExtensions();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "82560056" + "'", str28, "82560056");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test16085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 2022);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.DurationField durationField46 = julianChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DurationField durationField49 = julianChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology45.hourOfDay();
        long long53 = dateTimeField50.addWrapField(1677110400000L, 22650);
        mutableDateTime34.setRounding(dateTimeField50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime34.setDate(44280100, 598, 381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 598 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1677088800000L + "'", long53 == 1677088800000L);
    }

    @Test
    public void test16086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16086");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 60);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.DurationField durationField13 = julianChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = julianChronology12.seconds();
        int int16 = julianChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks((int) (short) 10);
        int[] intArray34 = julianChronology12.get((org.joda.time.ReadablePartial) localDateTime30, (long) 53);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100L);
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime36.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime36.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100L);
        int int56 = localDateTime55.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime58);
        int int60 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.property(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getRangeDurationType();
        java.lang.String str64 = dateTimeFieldType61.toString();
        boolean boolean65 = localDateTime30.isSupported(dateTimeFieldType61);
        boolean boolean66 = localDateTime1.isSupported(dateTimeFieldType61);
        java.lang.String str67 = dateTimeFieldType61.toString();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1969, 12, 18, 82560053]");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "yearOfCentury" + "'", str64, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "yearOfCentury" + "'", str67, "yearOfCentury");
    }

    @Test
    public void test16087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology18 = julianChronology11.withUTC();
        org.joda.time.DurationField durationField19 = julianChronology11.hours();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(255600056L, (org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test16088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfSecond();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str16, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test16089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16089");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2640");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test16090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(100L);
        int int25 = localDateTime24.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property29.addWrapFieldToCopy((int) '#');
        int[] intArray32 = localDateTime31.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime24, intArray32);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology10.year();
        long long38 = julianChronology10.add(1645488009122L, 20110100L, 437);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField40 = julianChronology10.seconds();
        org.joda.time.DurationField durationField41 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1969, 12, 31, 82560087]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1654276122822L + "'", long38 == 1654276122822L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test16091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16091");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        int int12 = mutableDateTime9.getMinuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readablePeriod21);
        int int23 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime22);
        org.joda.time.DateTime dateTime28 = dateTime22.plusMillis(6);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((-84125007), 26435803, 22671408, 22641533, 22878877, 2533, 574, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22641533 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1376 + "'", int12 == 1376);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test16092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMillis(6);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime15.getZone();
        long long25 = dateTimeZone22.convertLocalToUTC(1645514419068L, false);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645518259068L + "'", long25 == 1645518259068L);
        org.junit.Assert.assertNotNull(julianChronology26);
    }

    @Test
    public void test16093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMillis((-364));
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis(26443970);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        int int25 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime24.plusYears(1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.plus(readablePeriod47);
        org.joda.time.DateTime dateTime50 = dateTime45.plusYears(1);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime dateTime53 = dateTime50.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime54 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.withPeriodAdded(readablePeriod55, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int59 = dateTime57.get(dateTimeFieldType58);
        boolean boolean60 = dateTime29.isSupported(dateTimeFieldType58);
        java.lang.String str61 = dateTimeFieldType58.getName();
        java.lang.String str62 = dateTimeFieldType58.getName();
        java.lang.String str63 = dateTimeFieldType58.getName();
        boolean boolean64 = localDateTime6.isSupported(dateTimeFieldType58);
        int int65 = localDateTime6.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1376 + "'", int14 == 1376);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1376 + "'", int35 == 1376);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1677050743614L + "'", long51 == 1677050743614L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "dayOfYear" + "'", str61, "dayOfYear");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "dayOfYear" + "'", str62, "dayOfYear");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "dayOfYear" + "'", str63, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 53 + "'", int65 == 53);
    }

    @Test
    public void test16094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DurationField durationField14 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        long long18 = dateTimeField15.getDifferenceAsLong(1645514153739L, 1677050159522L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfDay(60);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusSeconds(19);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYear(23);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.secondOfDay();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(100L);
        int int43 = localDateTime42.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime42.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime42.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(100L);
        int int62 = localDateTime61.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime64);
        int int66 = localDateTime56.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.property(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getRangeDurationType();
        mutableDateTime36.add(durationFieldType69, 365);
        boolean boolean72 = localDateTime33.isSupported(durationFieldType69);
        int int73 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DurationField durationField74 = dateTimeField15.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-292269054) + "'", int73 == (-292269054));
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test16095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readablePeriod20);
        int int22 = dateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime18.getZone();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime18.minus(readablePeriod24);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87 + "'", int22 == 87);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test16096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfWeek();
        org.joda.time.DurationField durationField18 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField20 = julianChronology10.millis();
        long long23 = durationField20.subtract((-30L), 1677050243131L);
        org.joda.time.DurationField durationField24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = durationField20.compareTo(durationField24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1677050243161L) + "'", long23 == (-1677050243161L));
    }

    @Test
    public void test16097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16097");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        int int5 = dateTimeZone1.getOffset((long) 82560001);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("IT");
        java.lang.String[] strArray11 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.DurationField durationField25 = julianChronology24.weeks();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology24.weekOfWeekyear();
        org.joda.time.Chronology chronology27 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology24.weekOfWeekyear();
        boolean boolean29 = strSet12.contains((java.lang.Object) julianChronology24);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology24.getZone();
        long long33 = dateTimeZone31.previousTransition((long) 9);
        java.lang.String str35 = dateTimeZone31.getShortName(9L);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44, (int) (short) 1);
        org.joda.time.DurationField durationField49 = julianChronology48.weeks();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology48.weekOfWeekyear();
        org.joda.time.Chronology chronology51 = julianChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology48.weekOfWeekyear();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str55 = locale53.getExtension('a');
        int int56 = dateTimeField52.getMaximumTextLength(locale53);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale53.getDisplayName(locale57);
        java.lang.String str61 = dateTimeZone31.getName(1645514157888L, locale57);
        java.lang.String str62 = locale8.getDisplayScript(locale57);
        java.util.Calendar calendar63 = dateTime6.toCalendar(locale8);
        org.joda.time.DateTime.Property property64 = dateTime6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9L + "'", long33 == 9L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:04" + "'", str35, "-01:04");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English" + "'", str58, "English");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English" + "'", str59, "English");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English" + "'", str60, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:04" + "'", str61, "-01:04");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645514743706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=25,SECOND=43,MILLISECOND=706,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test16098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) 'u');
        org.joda.time.DateTime dateTime35 = property30.withMinimumValue();
        org.joda.time.DateTime dateTime37 = property30.addToCopy(0);
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test16099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField18 = julianChronology10.seconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test16100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16100");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645514173601L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.year();
        org.joda.time.DurationField durationField33 = julianChronology28.weekyears();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DurationField durationField35 = julianChronology28.centuries();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) 1645514173601L, (org.joda.time.Chronology) julianChronology28);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        int int42 = mutableDateTime39.getMinuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readablePeriod51);
        int int53 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime52.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime52);
        org.joda.time.DateTime dateTime58 = dateTime52.plusMillis(6);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime52.getZone();
        org.joda.time.Chronology chronology60 = julianChronology28.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1376 + "'", int42 == 1376);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test16101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16101");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey(100L);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.minuteOfDay();
        long long29 = julianChronology11.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology11.clockhourOfHalfday();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(100L);
        long long41 = dateTimeZone37.nextTransition((long) (short) 0);
        int int43 = dateTimeZone37.getStandardOffset(36070100L);
        java.lang.String str45 = dateTimeZone37.getName(10800001L);
        org.joda.time.Chronology chronology46 = julianChronology11.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField47 = julianChronology11.centuries();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime50.getZone();
        java.lang.String str56 = dateTimeZone54.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology58.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology58.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology58.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone62 = julianChronology58.getZone();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.millisOfDay();
        boolean boolean67 = julianChronology11.equals((java.lang.Object) gJChronology64);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 976, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Instant instant69 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime74 = property73.roundHalfFloor();
        int int75 = instant69.compareTo((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Instant instant78 = instant69.withDurationAdded(readableDuration76, 292272992);
        org.joda.time.Instant instant80 = instant78.withMillis(1677050289252L);
        boolean boolean81 = dateTime68.isBefore((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTime.Property property82 = dateTime68.hourOfDay();
        int int83 = dateTime68.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-46489900L) + "'", long29 == (-46489900L));
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3840000) + "'", int43 == (-3840000));
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:04" + "'", str45, "-01:04");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(gJChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
    }

    @Test
    public void test16102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16102");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test16103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16103");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test16104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology14);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3837978L) + "'", long12 == (-3837978L));
        org.junit.Assert.assertNotNull(gJChronology14);
    }

    @Test
    public void test16105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks(20);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime26.minuteOfHour();
        long long32 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime26.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime26.getZone();
        org.joda.time.DateTime dateTime36 = dateTime18.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis(497);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology49.dayOfYear();
        org.joda.time.DurationField durationField51 = julianChronology49.minutes();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology49.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime38.toDateTime((org.joda.time.Chronology) julianChronology49);
        int int58 = dateTime57.getDayOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514743887L + "'", long32 == 1645514743887L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 180 + "'", int58 == 180);
    }

    @Test
    public void test16106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readablePeriod55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays((int) ' ');
        org.joda.time.DateTime dateTime62 = dateTime58.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime65 = dateTime58.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long66 = dateTime58.getMillis();
        java.util.GregorianCalendar gregorianCalendar67 = dateTime58.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime58.getZone();
        org.joda.time.Chronology chronology69 = gJChronology41.withZone(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology41.millis();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DurationField durationField72 = gJChronology41.minutes();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology41.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 381 + "'", int13 == 381);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645514743912L + "'", long66 == 1645514743912L);
        org.junit.Assert.assertNotNull(gregorianCalendar67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test16107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = julianChronology26.seconds();
        org.joda.time.DurationField durationField30 = julianChronology26.millis();
        org.joda.time.DurationField durationField31 = julianChronology26.hours();
        boolean boolean32 = julianChronology10.equals((java.lang.Object) durationField31);
        org.joda.time.DurationField durationField33 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property39.addWrapFieldToCopy((int) '#');
        int[] intArray42 = localDateTime41.getValues();
        long long44 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime41, (long) 2720);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology10.yearOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1969, 12, 31, 82560087]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1123200087L + "'", long44 == 1123200087L);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test16108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16108");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology10.add(readablePeriod17, 1645514153739L, 1);
        org.joda.time.DurationField durationField21 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.monthOfYear();
        org.joda.time.DurationField durationField23 = julianChronology10.months();
        long long27 = julianChronology10.add((long) 22666694, (long) 43601, 22624927);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(1645514157380L, dateTimeZone37);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.hourOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.Chronology chronology52 = gJChronology41.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology41.monthOfYear();
        boolean boolean55 = gJChronology41.equals((java.lang.Object) 19045L);
        org.joda.time.DurationField durationField56 = gJChronology41.minutes();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology41.weekOfWeekyear();
        boolean boolean58 = julianChronology10.equals((java.lang.Object) gJChronology41);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514153739L + "'", long20 == 1645514153739L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 986492108821L + "'", long27 == 986492108821L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16109");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.DurationField durationField19 = dateTimeField17.getRangeDurationField();
        int int21 = dateTimeField17.getLeapAmount(1645514157889L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        java.lang.String str28 = property25.getName();
        org.joda.time.LocalDateTime localDateTime29 = property25.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime36.secondOfDay();
        java.util.Locale locale47 = new java.util.Locale("IT");
        int int48 = property45.getMaximumShortTextLength(locale47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.DurationField durationField60 = julianChronology59.weeks();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology59.weekOfWeekyear();
        org.joda.time.Chronology chronology62 = julianChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology59.weekOfWeekyear();
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale64.getExtension('a');
        int int67 = dateTimeField63.getMaximumTextLength(locale64);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = locale68.getDisplayName();
        java.lang.String str71 = locale64.getDisplayName(locale68);
        java.util.Locale.setDefault(locale64);
        java.lang.String str73 = locale47.getDisplayVariant(locale64);
        java.lang.String str74 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, locale47);
        org.joda.time.LocalDateTime.Property property75 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readableDuration77);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English" + "'", str69, "English");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English" + "'", str70, "English");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English" + "'", str71, "English");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test16110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16110");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = gJChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.minuteOfHour();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillis((long) 296);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test16111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType2.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.Instant instant20 = gJChronology18.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        int int22 = mutableDateTime21.getMinuteOfDay();
        mutableDateTime21.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 381 + "'", int3 == 381);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3837978L) + "'", long16 == (-3837978L));
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1376 + "'", int22 == 1376);
    }

    @Test
    public void test16112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16112");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DurationField durationField15 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 'x');
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        java.util.Locale locale23 = new java.util.Locale("fr");
        java.lang.String str24 = locale23.getScript();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale25.getDisplayVariant(locale27);
        java.lang.String str30 = locale23.getDisplayScript(locale27);
        int int31 = property21.getMaximumShortTextLength(locale27);
        int int32 = dateTimeField16.getMaximumTextLength(locale27);
        java.lang.String str33 = locale27.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Italian" + "'", str33, "Italian");
    }

    @Test
    public void test16113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.dayOfYear();
        int int22 = property21.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        java.lang.String str25 = dateTimeField23.getAsText(0L);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str3, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 365 + "'", int22 == 365);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "365" + "'", str25, "365");
    }

    @Test
    public void test16114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16114");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean7 = dateTimeZone5.isStandardOffset(1677050149186L);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 10, locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withLocale(locale9);
        boolean boolean12 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey(100L);
        long long23 = dateTimeZone19.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.secondOfDay();
        int int26 = gJChronology24.getMinimumDaysInFirstWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear(10800001);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant32 = org.joda.time.Instant.parse("1969-12-31T22:56:22.797", dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test16115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16115");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        org.joda.time.Chronology chronology28 = julianChronology17.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology17.minuteOfDay();
        long long35 = julianChronology17.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getExtension('x');
        java.lang.String str53 = locale48.getISO3Country();
        java.lang.String str54 = dateTimeZone42.getShortName((long) 1, locale48);
        org.joda.time.Chronology chronology55 = julianChronology17.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime58.getZone();
        java.lang.String str64 = dateTimeZone62.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays((int) (short) 10);
        long long73 = julianChronology17.set((org.joda.time.ReadablePartial) localDateTime71, (long) 457087);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter6.withOffsetParsed();
        java.lang.Integer int76 = dateTimeFormatter6.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter6.withPivotYear(3270);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter78.withDefaultYear(217);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter80.withZoneUTC();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-46489900L) + "'", long35 == (-46489900L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:04" + "'", str54, "-01:04");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(julianChronology66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1646983544091L + "'", long73 == 1646983544091L);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test16116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        mutableDateTime2.addYears((int) 'x');
        mutableDateTime2.addWeekyears(26176590);
        java.lang.String str9 = mutableDateTime2.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) dateTime25);
        mutableDateTime2.add(0L);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime2.copy();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(100L);
        int int34 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime33.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(100L);
        int int53 = localDateTime52.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime55);
        int int57 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.property(dateTimeFieldType58);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime31.property(dateTimeFieldType58);
        mutableDateTime31.addDays(38152);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26178679-12-27T22:56:00.001-01:04" + "'", str9, "26178679-12-27T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test16117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfHour();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        long long18 = durationField16.getValueAsLong((long) 66174001);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1102L + "'", long18 == 1102L);
    }

    @Test
    public void test16118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16118");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology28.getZone();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField35 = gJChronology34.years();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.secondOfDay();
        org.joda.time.DurationField durationField45 = chronology41.months();
        long long46 = durationField45.getUnitMillis();
        long long48 = durationField45.getValueAsLong(1645514236425L);
        int int49 = durationField35.compareTo(durationField45);
        org.joda.time.DurationFieldType durationFieldType50 = durationField35.getType();
        boolean boolean51 = localDateTime13.isSupported(durationFieldType50);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1969-01-10T22:56:00.100" + "'", str15, "1969-01-10T22:56:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2629746000L + "'", long46 == 2629746000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 625L + "'", long48 == 625L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test16119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay((int) (byte) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withOffsetParsed();
        java.lang.Integer int26 = dateTimeFormatter23.getPivotYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.DurationField durationField38 = julianChronology37.weeks();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.Chronology chronology48 = julianChronology37.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter23.withZone(dateTimeZone45);
        int int51 = dateTimeZone45.getOffset(1677050246834L);
        long long54 = dateTimeZone45.convertLocalToUTC(1654276122822L, true);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime20, dateTimeZone45);
        long long59 = dateTimeZone45.convertLocalToUTC(1645514199921L, false, 1677050298205L);
        java.lang.String str61 = dateTimeZone45.getShortName(1645514708362L);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3840000) + "'", int51 == (-3840000));
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1654279962822L + "'", long54 == 1654279962822L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645518039921L + "'", long59 == 1645518039921L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:04" + "'", str61, "-01:04");
    }

    @Test
    public void test16120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        java.lang.Object obj16 = null;
        boolean boolean17 = julianChronology10.equals(obj16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField20 = julianChronology10.weekyears();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.year();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.Chronology chronology25 = julianChronology10.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test16121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        java.lang.String str46 = gJChronology41.toString();
        org.joda.time.DurationField durationField47 = gJChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.centuryOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        long long61 = dateTimeZone55.convertUTCToLocal((long) 2022);
        java.lang.String str63 = dateTimeZone55.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = property67.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plus(readablePeriod70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int77 = localDateTime75.get(dateTimeFieldType76);
        int int78 = localDateTime73.indexOf(dateTimeFieldType76);
        java.lang.String str79 = localDateTime73.toString();
        int int80 = localDateTime73.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray81 = localDateTime73.getFields();
        boolean boolean82 = dateTimeZone55.isLocalDateTimeGap(localDateTime73);
        java.util.TimeZone timeZone83 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.Chronology chronology85 = gJChronology41.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField86 = gJChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology41.yearOfCentury();
        org.joda.time.DurationField durationField88 = gJChronology41.years();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology41.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 381 + "'", int13 == 381);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(instant45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GJChronology[-01:04]" + "'", str46, "GJChronology[-01:04]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-3837978L) + "'", long61 == (-3837978L));
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:04" + "'", str63, "-01:04");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 381 + "'", int77 == 381);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-0001-12-31T22:56:00.056" + "'", str79, "-0001-12-31T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "GMT-01:04");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test16122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.era();
        org.joda.time.Chronology chronology82 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField83 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology10.centuryOfEra();
        org.joda.time.DurationField durationField86 = julianChronology10.minutes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test16123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16123");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T07:16:12.061");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withMonthOfYear(18914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18914 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test16124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.property(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100L);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withPeriodAdded(readablePeriod20, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean24 = localDateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime2.property(dateTimeFieldType23);
        int int26 = property25.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.DurationField durationField39 = julianChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = julianChronology38.seconds();
        int int42 = julianChronology38.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology38.millisOfDay();
        long long45 = dateTimeField43.roundHalfFloor(0L);
        long long47 = dateTimeField43.roundHalfFloor((long) 3);
        org.joda.time.DurationField durationField48 = dateTimeField43.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime27.setRounding(dateTimeField43, 26400519);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 26400519");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str3, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test16125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16125");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test16126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16126");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1645514155575L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime5.getZone();
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology13.add(readablePeriod17, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology13.minuteOfDay();
        mutableDateTime1.setRounding(dateTimeField22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        int int29 = mutableDateTime26.getMinuteOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        int int40 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology52);
        org.joda.time.DateTimeField dateTimeField54 = julianChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology52.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = julianChronology52.getZone();
        java.lang.Object obj58 = null;
        boolean boolean59 = julianChronology52.equals(obj58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology52);
        int int61 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.ReadableInstant readableInstant63 = null;
        mutableDateTime26.setDate(readableInstant63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableDateTime26.add(readablePeriod65);
        java.lang.String str67 = mutableDateTime26.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1376 + "'", int29 == 1376);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T22:56:00.001-01:04" + "'", str67, "2022-02-22T22:56:00.001-01:04");
    }

    @Test
    public void test16127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16127");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(292272992);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minus(readablePeriod12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test16128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16128");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withEra(0);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.minus(readablePeriod11);
        int int13 = dateTime12.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime12.era();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T22:59:59.999-01:00" + "'", str7, "1970-01-01T22:59:59.999-01:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test16129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16129");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        boolean boolean4 = strSet2.isEmpty();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(23);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        int int24 = dateTime20.getWeekOfWeekyear();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology36);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.millisOfDay();
        org.joda.time.DurationField durationField40 = julianChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology36.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = dateTimeField41.getAsShortText((long) (byte) 10, locale43);
        java.util.Locale.Builder builder45 = builder25.setLocale(locale43);
        java.lang.String str46 = locale43.getVariant();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str50 = locale47.getExtension('u');
        java.lang.String str51 = locale43.getDisplayLanguage(locale47);
        java.util.Calendar calendar52 = dateTime20.toCalendar(locale43);
        boolean boolean53 = strSet2.remove((java.lang.Object) locale43);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime56.getZone();
        java.lang.String str62 = dateTimeZone60.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone60, (int) (short) 1);
        org.joda.time.DurationField durationField65 = julianChronology64.weeks();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology64.halfdayOfDay();
        org.joda.time.DurationField durationField67 = julianChronology64.minutes();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology64.dayOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = mutableDateTime71.getZone();
        java.lang.String str77 = dateTimeZone75.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology79 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField80 = julianChronology79.dayOfYear();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology79.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        long long86 = julianChronology79.add(readablePeriod83, (long) (short) 1, 8);
        org.joda.time.DurationField durationField87 = julianChronology79.days();
        org.joda.time.DurationField durationField88 = julianChronology79.months();
        boolean boolean89 = julianChronology64.equals((java.lang.Object) julianChronology79);
        java.lang.String str90 = julianChronology79.toString();
        boolean boolean91 = strSet2.contains((java.lang.Object) str90);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514744470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=21,SECOND=44,MILLISECOND=470,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(julianChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(julianChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str90, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test16130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16130");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(22684553, 22790534, 12, 22699632, (-18718), 22819124);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22699632 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = julianChronology10.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
    }

    @Test
    public void test16132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16132");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(1);
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter7.getPrinter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = julianChronology21.days();
        org.joda.time.DurationField durationField26 = julianChronology21.years();
        org.joda.time.DurationField durationField27 = julianChronology21.halfdays();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-19L), (org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.Chronology chronology35 = julianChronology21.withZone(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter7.withChronology(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter38.withOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test16133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16133");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getDayOfMonth();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMinutes((-608));
        int int5 = localDateTime4.size();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(378);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withTime(22698381, 22843956, 971, 25434549);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22698381 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test16134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = property25.addToCopy(259200001L);
        org.joda.time.Interval interval28 = property25.toInterval();
        org.joda.time.DateTime dateTime29 = property25.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology41);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = julianChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime29, (org.joda.time.Chronology) julianChronology41);
        org.joda.time.DurationField durationField47 = julianChronology41.weekyears();
        org.joda.time.DurationField durationField48 = julianChronology41.weekyears();
        org.joda.time.DurationField durationField49 = julianChronology41.minutes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050744565L + "'", long21 == 1677050744565L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test16135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test16136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DurationField durationField15 = julianChronology10.weeks();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DurationField durationField17 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology33.minuteOfDay();
        boolean boolean38 = julianChronology10.equals((java.lang.Object) julianChronology33);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology10.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str16, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test16137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays((-53));
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(10800001L);
        mutableDateTime23.addHours(6);
        boolean boolean26 = dateTime20.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.centuryOfEra();
        org.joda.time.Chronology chronology28 = mutableDateTime23.getChronology();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test16138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField21 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test16139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16139");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField25 = julianChronology10.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test16140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16140");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
    }

    @Test
    public void test16141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16141");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2323);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property19.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readablePeriod22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTime dateTime32 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        long long34 = julianChronology12.set((org.joda.time.ReadablePartial) localDateTime23, 0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone44);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) localDateTime45, (long) '4');
        org.joda.time.DurationField durationField48 = chronology40.hours();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        long long61 = chronology54.set((org.joda.time.ReadablePartial) localDateTime59, (long) '4');
        org.joda.time.DurationField durationField62 = chronology54.hours();
        int int63 = durationField48.compareTo(durationField62);
        long long66 = durationField48.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType67 = durationField48.getType();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime23.withFieldAdded(durationFieldType67, (int) '#');
        int int70 = localDateTime23.getEra();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime23.minusSeconds(2);
        boolean boolean73 = dateTimeZone1.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology74 = localDateTime23.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1123200056L + "'", long34 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 52L + "'", long47 == 52L);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test16142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16142");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withPeriodAdded(readablePeriod3, 292272992);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        int int14 = mutableDateTime13.getMillisOfSecond();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "365" + "'", str10, "365");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test16143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16143");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 159);
        boolean boolean37 = dateTimeFormatter36.isPrinter();
        java.io.Writer writer38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMillis(16);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(writer38, (org.joda.time.ReadablePartial) localDateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test16144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        int int46 = gJChronology41.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology47 = gJChronology41.withUTC();
        org.joda.time.Chronology chronology48 = chronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = chronology48.get(readablePeriod50, 975027L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 381 + "'", int13 == 381);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test16145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        mutableDateTime12.setWeekyear(2922730);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        java.lang.String str18 = mutableDateTime17.toString();
        mutableDateTime17.setDate((long) (short) 100);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone27);
        int int29 = mutableDateTime17.getYearOfCentury();
        mutableDateTime17.addWeekyears((int) 'x');
        mutableDateTime17.addDays(1);
        mutableDateTime17.add((long) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.secondOfDay();
        boolean boolean43 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime46.getZone();
        java.lang.String str52 = dateTimeZone50.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology54.dayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime58.getZone();
        java.lang.String str64 = dateTimeZone62.getNameKey(100L);
        org.joda.time.Chronology chronology65 = julianChronology54.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField66 = julianChronology54.minuteOfDay();
        long long72 = julianChronology54.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField73 = julianChronology54.clockhourOfHalfday();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology79 = mutableDateTime76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime76.getZone();
        java.lang.String str82 = dateTimeZone80.getNameKey(100L);
        long long84 = dateTimeZone80.nextTransition((long) (short) 0);
        int int86 = dateTimeZone80.getStandardOffset(36070100L);
        java.lang.String str88 = dateTimeZone80.getName(10800001L);
        org.joda.time.Chronology chronology89 = julianChronology54.withZone(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime17, dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime12.toMutableDateTime(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:04" + "'", str10, "-01:04");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str18, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(julianChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-46489900L) + "'", long72 == (-46489900L));
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3840000) + "'", int86 == (-3840000));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-01:04" + "'", str88, "-01:04");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(mutableDateTime91);
    }

    @Test
    public void test16146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16146");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder8.build();
        java.util.Locale.Builder builder11 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setVariant("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test16147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16147");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology15.clockhourOfDay();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.lang.String str26 = timeZone25.getID();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.lang.String str28 = timeZone27.getID();
        int int30 = timeZone27.getOffset(0L);
        timeZone27.setID("2022-02-22T07:16:14.947Z");
        boolean boolean33 = timeZone25.hasSameRules(timeZone27);
        int int34 = timeZone25.getRawOffset();
        boolean boolean35 = julianChronology15.equals((java.lang.Object) int34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology15);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime39.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43, (int) (short) 1);
        org.joda.time.DurationField durationField48 = julianChronology47.weeks();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology47.weekOfWeekyear();
        org.joda.time.DurationField durationField50 = julianChronology47.seconds();
        int int51 = julianChronology47.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology47.yearOfCentury();
        org.joda.time.DurationField durationField53 = julianChronology47.months();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology47.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology47.weekyear();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.setRegion("IT");
        java.util.Locale locale61 = new java.util.Locale("fr");
        java.util.Locale.Builder builder62 = builder57.setLocale(locale61);
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Locale locale66 = locale64.stripExtensions();
        java.util.Locale.Builder builder67 = builder63.setLocale(locale66);
        java.lang.String str68 = dateTimeField55.getAsShortText(3600003L, locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter36.withLocale(locale66);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        java.lang.String str73 = mutableDateTime72.toString();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.dayOfMonth();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        mutableDateTime78.setZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime78.getZone();
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 10);
        java.lang.String str86 = dateTimeZone82.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime87 = org.joda.time.MutableDateTime.now(dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone82);
        mutableDateTime72.setZone(dateTimeZone82);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime72.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = dateTimeFormatter36.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime72, "2022-02-03T07:19:49.250+00:00:00.120", 23114);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT-01:04");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT-01:04" + "'", str26, "GMT-01:04");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:04");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT-01:04" + "'", str28, "GMT-01:04");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3840000) + "'", int30 == (-3840000));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3840000) + "'", int34 == (-3840000));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969" + "'", str68, "1969");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str73, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-01:04" + "'", str86, "-01:04");
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test16148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.withDayOfYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime29.getFieldTypes();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.DurationField durationField45 = julianChronology44.weeks();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology44.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = julianChronology44.seconds();
        int int48 = julianChronology44.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(100L);
        int int51 = localDateTime50.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime50.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks((int) (short) 10);
        int[] intArray66 = julianChronology44.get((org.joda.time.ReadablePartial) localDateTime62, (long) 53);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime29, intArray66);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology10.secondOfMinute();
        long long73 = julianChronology10.add(1645514570830L, 315576000000100L, 2025);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField75 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-01-10T22:56:00.100" + "'", str31, "1969-01-10T22:56:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1969, 12, 18, 82560053]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 639043045514773330L + "'", long73 == 639043045514773330L);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test16149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.halfdays();
        java.lang.String str23 = julianChronology10.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey(100L);
        long long34 = dateTimeZone30.nextTransition((long) (short) 0);
        long long36 = dateTimeZone30.previousTransition((long) 100);
        org.joda.time.Chronology chronology37 = julianChronology10.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology10.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str23, "JulianChronology[-01:04,mdfw=1]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test16150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16150");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        int int8 = dateTimeZone2.getOffsetFromLocal(9L);
        boolean boolean9 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test16151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16151");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.hourOfDay();
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = locale47.getDisplayCountry(locale48);
        java.lang.String str51 = dateTimeField45.getAsText(1677050162459L, locale48);
        boolean boolean53 = dateTimeField45.isLeap((-16400687L));
        boolean boolean55 = dateTimeField45.isLeap((-50645407352751L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 381 + "'", int13 == 381);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English (Canada)" + "'", str49, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Canada" + "'", str50, "Canada");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "6" + "'", str51, "6");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test16152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.Chronology chronology69 = localDateTime67.getChronology();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.withDurationAdded(readableDuration70, 53);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test16153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        long long83 = julianChronology10.getDateTimeMillis(99, 1, 9, (int) (byte) 100);
        org.joda.time.DurationField durationField84 = julianChronology10.minutes();
        org.joda.time.DurationField durationField85 = julianChronology10.hours();
        long long89 = julianChronology10.add((long) (-18718), 0L, 29);
        org.joda.time.DurationField durationField90 = julianChronology10.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1376 + "'", int27 == 1376);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-59042472959900L) + "'", long83 == (-59042472959900L));
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-18718L) + "'", long89 == (-18718L));
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test16154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16154");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 292278993);
        org.joda.time.Chronology chronology33 = dateTimeFormatter32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        java.lang.String str44 = dateTimeZone40.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = dateTimeFormatter32.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime45, "1985-11-22T07:19:56.857+00:00:00.120", 6960);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:04" + "'", str44, "-01:04");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test16155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        boolean boolean21 = dateTime19.isBefore((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readablePeriod28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        int int36 = localDateTime31.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) localDateTime47, (long) '4');
        org.joda.time.DateTimeField dateTimeField50 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType34.getField(chronology42);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime54.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey(100L);
        long long62 = dateTimeZone58.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.secondOfDay();
        int int65 = gJChronology63.getMinimumDaysInFirstWeek();
        boolean boolean66 = dateTimeFieldType34.isSupported((org.joda.time.Chronology) gJChronology63);
        java.lang.String str67 = dateTimeFieldType34.toString();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType34.getDurationType();
        org.joda.time.DateTime.Property property69 = dateTime19.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime71 = property69.addToCopy(36);
        org.joda.time.DateTime.Property property72 = dateTime71.centuryOfEra();
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTimeISO();
        org.joda.time.DateTime dateTime75 = dateTime73.plusMinutes(22684553);
        org.joda.time.DateTime.Property property76 = dateTime73.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1376 + "'", int5 == 1376);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 381 + "'", int35 == 381);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(gJChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "minuteOfDay" + "'", str67, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test16156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16156");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("IT", strMap1);
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet5.spliterator();
        java.util.Iterator<java.lang.String> strItor8 = strSet5.iterator();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet5.stream();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet5.stream();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet5.stream();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet5);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test16157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField15 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = julianChronology10.hours();
        org.joda.time.DurationField durationField20 = julianChronology10.months();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test16158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.dayOfYear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime31.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int60 = localDateTime58.get(dateTimeFieldType59);
        int int61 = localDateTime56.indexOf(dateTimeFieldType59);
        java.lang.String str62 = localDateTime56.toString();
        int int63 = localDateTime56.size();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.plusWeeks(12);
        java.lang.String str66 = localDateTime65.toString();
        int int67 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        boolean boolean68 = julianChronology10.equals((java.lang.Object) localDateTime45);
        int int69 = julianChronology10.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514745009L + "'", long25 == 1645514745009L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 381 + "'", int60 == 381);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-0001-12-31T22:56:00.056" + "'", str62, "-0001-12-31T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0000-03-24T22:56:00.056" + "'", str66, "0000-03-24T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test16159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology11.yearOfCentury();
        org.joda.time.DurationField durationField21 = julianChronology11.centuries();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 53, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField23 = julianChronology11.years();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test16160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withMillisOfSecond((int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime16.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((-6));
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear(26397939);
        int int39 = dateTime38.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 263979 + "'", int39 == 263979);
    }

    @Test
    public void test16161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16161");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26414931");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = localDateTime1.toString("DurationField[minutes]", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
    }

    @Test
    public void test16162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test16163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16163");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        int int8 = localDateTime6.size();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withYearOfEra(313);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test16164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16164");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(23);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        int int24 = dateTime20.getWeekOfWeekyear();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology36);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.millisOfDay();
        org.joda.time.DurationField durationField40 = julianChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology36.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = dateTimeField41.getAsShortText((long) (byte) 10, locale43);
        java.util.Locale.Builder builder45 = builder25.setLocale(locale43);
        java.lang.String str46 = locale43.getVariant();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str50 = locale47.getExtension('u');
        java.lang.String str51 = locale43.getDisplayLanguage(locale47);
        java.util.Calendar calendar52 = dateTime20.toCalendar(locale43);
        java.util.Set<java.lang.String> strSet53 = locale43.getUnicodeLocaleKeys();
        boolean boolean54 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.lang.String str59 = locale58.getCountry();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale66 = new java.util.Locale("fr");
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale58, locale60, locale62, locale63, locale66, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.String[] strArray83 = new java.lang.String[] { "70", "UTC", "English", "minuteOfDay", "JulianChronology[Etc/UTC,mdfw=1]", "35", "1970-01-01T00:00:00.001Z", "2022-02-22T07:15:58.038Z", "1900-01-08T00:00:00.100", "2022-02-22T07:15:56.026Z" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet84.spliterator();
        java.lang.String str87 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet84);
        java.util.Spliterator<java.lang.String> strSpliterator88 = strSet84.spliterator();
        boolean boolean89 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet84);
        strSet84.clear();
        java.lang.Object[] objArray91 = strSet84.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(strSet3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514745117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=21,SECOND=45,MILLISECOND=117,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "IT" + "'", str59, "IT");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test16165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getExtension('x');
        java.lang.String str46 = locale41.getISO3Country();
        java.lang.String str47 = dateTimeZone35.getShortName((long) 1, locale41);
        org.joda.time.Chronology chronology48 = julianChronology10.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone35);
        int int50 = dateTime49.getWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime49.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime54.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology62 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology62);
        org.joda.time.DateTimeField dateTimeField64 = julianChronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology62.centuryOfEra();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale68.toLanguageTag();
        java.lang.String str71 = dateTimeField66.getAsShortText(436, locale68);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = dateTimeField66.getType();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime49.withFieldAdded(durationFieldType73, 22673294);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46489900L) + "'", long28 == (-46489900L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:04" + "'", str47, "-01:04");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(julianChronology62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en" + "'", str70, "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "436" + "'", str71, "436");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
    }

    @Test
    public void test16166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.year();
        org.joda.time.DurationField durationField19 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test16167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16167");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime0.plusMonths(435);
        org.joda.time.DateTime dateTime6 = dateTime0.withWeekOfWeekyear(1);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.year();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.getID();
        long long16 = dateTimeZone12.adjustOffset(100L, true);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale20.getScript();
        java.util.Locale.setDefault(locale20);
        java.lang.String str25 = dateTimeField18.getAsShortText((int) 'x', locale20);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale30 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str33 = nameProvider26.getName(locale30, "English (Canada)", "Greenwich Mean Time");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = locale35.stripExtensions();
        java.lang.String str40 = nameProvider26.getName(locale37, "DurationField[years]", "-01:00");
        java.util.Locale locale42 = new java.util.Locale("dayOfMonth");
        java.lang.String str43 = locale37.getDisplayScript(locale42);
        java.util.Set<java.lang.Character> charSet44 = locale42.getExtensionKeys();
        java.lang.String str45 = locale42.getISO3Country();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str53 = nameProvider46.getName(locale50, "English (Canada)", "Greenwich Mean Time");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider46);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = locale55.stripExtensions();
        java.lang.String str60 = nameProvider46.getName(locale57, "DurationField[years]", "-01:00");
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str65 = nameProvider61.getName(locale62, "-0001-01-01T00:00:00.056", "UTC");
        java.lang.String str68 = nameProvider46.getShortName(locale62, "2022-02-22T07:16:50.205Z", "24");
        java.lang.String str69 = locale42.getDisplayVariant(locale62);
        java.lang.String str70 = locale20.getDisplayScript(locale62);
        java.util.Set<java.lang.String> strSet71 = locale62.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = property9.setCopy("Property[secondOfDay]", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[secondOfDay]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertEquals(locale30.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals(locale42.toString(), "dayofmonth");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertEquals(locale50.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test16168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField27 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = julianChronology10.add(readablePeriod28, 1645514396910L, 16);
        java.lang.String str32 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514396910L + "'", long31 == 1645514396910L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JulianChronology[-01:04,mdfw=1]" + "'", str32, "JulianChronology[-01:04,mdfw=1]");
    }

    @Test
    public void test16169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology16.minuteOfDay();
        long long34 = julianChronology16.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        boolean boolean35 = property3.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime36 = property3.roundHalfEvenCopy();
        int int37 = property3.getMaximumValueOverall();
        java.lang.String str38 = property3.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-46489900L) + "'", long34 == (-46489900L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 86399999 + "'", int37 == 86399999);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[millisOfDay]" + "'", str38, "Property[millisOfDay]");
    }

    @Test
    public void test16170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16170");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = localDateTime2.toString("366", locale5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        java.lang.String str12 = mutableDateTime11.toString();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfCeilingCopy();
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str21 = dateTimeFieldType20.toString();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.property(dateTimeFieldType20);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.property(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(100L);
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withPeriodAdded(readablePeriod29, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean33 = localDateTime25.isSupported(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime11.property(dateTimeFieldType32);
        org.joda.time.LocalDateTime.Property property35 = localDateTime2.property(dateTimeFieldType32);
        int int36 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property37 = localDateTime2.dayOfWeek();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        int int43 = mutableDateTime40.getMinuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readablePeriod52);
        int int54 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.plus(readablePeriod55);
        org.joda.time.DateTime dateTime58 = dateTime53.plusYears(1);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime61 = dateTime58.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property63 = dateTime58.property(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = dateTime58.minusDays(82560001);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readablePeriod66);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfSecond(378);
        boolean boolean70 = property37.equals((java.lang.Object) dateTime69);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("82800120");
        int int73 = property37.getMaximumTextLength(locale72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = locale72.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "366" + "'", str8, "366");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str12, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfHour" + "'", str21, "minuteOfHour");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1376 + "'", int43 == 1376);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1677050745232L + "'", long59 == 1677050745232L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
    }

    @Test
    public void test16171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16171");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        java.lang.String str14 = dateTimeZone6.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime24.getFields();
        boolean boolean33 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        int int39 = mutableDateTime36.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.yearOfCentury();
        mutableDateTime36.setSecondOfDay(436);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Calendar calendar45 = mutableDateTime36.toCalendar(locale43);
        mutableDateTime36.addMillis(10);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime36.yearOfCentury();
        int int49 = property48.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime51 = property48.addWrapField(24);
        org.joda.time.MutableDateTime mutableDateTime52 = property48.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.Chronology chronology54 = mutableDateTime52.getChronology();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime57.getZone();
        java.lang.String str63 = dateTimeZone61.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology65);
        org.joda.time.DateTimeField dateTimeField67 = julianChronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology65.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology65.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = julianChronology65.getZone();
        org.joda.time.DateTimeZone dateTimeZone71 = julianChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField72 = julianChronology65.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = julianChronology65.getZone();
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        mutableDateTime78.setZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime78.getZone();
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology86 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone82, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology86);
        org.joda.time.DateTimeField dateTimeField88 = julianChronology86.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology86.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology86.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField91 = julianChronology86.halfdayOfDay();
        org.joda.time.DurationField durationField92 = julianChronology86.months();
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(1645514218734L, (org.joda.time.Chronology) julianChronology86);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((java.lang.Object) dateTime93);
        boolean boolean95 = dateTimeZone73.equals((java.lang.Object) dateTime93);
        org.joda.time.MutableDateTime mutableDateTime96 = mutableDateTime52.toMutableDateTime(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3837978L) + "'", long12 == (-3837978L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:04" + "'", str14, "-01:04");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 381 + "'", int28 == 381);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-12-31T22:56:00.056" + "'", str30, "-0001-12-31T22:56:00.056");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1376 + "'", int39 == 1376);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-82123999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=7,SECOND=16,MILLISECOND=1,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(julianChronology86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mutableDateTime96);
    }

    @Test
    public void test16172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str22 = dateTimeFieldType21.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray50 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int51 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray50);
        int[] intArray53 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) localDateTime19, 0, intArray50, 20);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.Chronology chronology62 = chronology60.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) '4', chronology60);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableDateTime64.add(readablePeriod65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.roundCeiling();
        org.joda.time.DateTime dateTime69 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) mutableDateTime68);
        mutableDateTime68.setMillisOfSecond(999);
        java.lang.String str72 = mutableDateTime68.toString();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1969-12-31T22:56:01.999-01:04" + "'", str72, "1969-12-31T22:56:01.999-01:04");
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test16173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology16.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology16.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (byte) -1);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = dateTimeZone21.getShortName(1677050183994L, locale25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(456590);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456590 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str3, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:04" + "'", str26, "-01:04");
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test16174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16174");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime7.withYearOfCentury(0);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(19164);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = julianChronology41.getZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.clockhourOfHalfday();
        org.joda.time.Instant instant49 = gJChronology47.getGregorianCutover();
        org.joda.time.DurationField durationField50 = gJChronology47.years();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology47.era();
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology47.getZone();
        int int54 = dateTimeZone52.getStandardOffset(1646119106111L);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale56.getDisplayLanguage(locale57);
        java.lang.String str60 = dateTimeZone52.getName(598656701706907L, locale57);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(1645514295262L, dateTimeZone52);
        org.joda.time.DateTime dateTime62 = dateTime27.toDateTime(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T22:56:00.001-01:04" + "'", str11, "1969-12-31T22:56:00.001-01:04");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3840000) + "'", int54 == (-3840000));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanese" + "'", str59, "Japanese");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:04" + "'", str60, "-01:04");
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test16175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DurationField durationField13 = julianChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) ' ');
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.hourOfDay();
        int[] intArray29 = julianChronology11.get((org.joda.time.ReadablePartial) localDateTime25, 1645514164504L);
        org.joda.time.DurationField durationField30 = julianChronology11.days();
        org.joda.time.DurationField durationField31 = julianChronology11.weeks();
        org.joda.time.DurationField durationField32 = julianChronology11.seconds();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 376, (org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2022, 2, 9, 22324504]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test16176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        boolean boolean10 = dateTimeField7.isLeap((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        org.joda.time.DurationField durationField30 = chronology22.hours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) '4');
        org.joda.time.DurationField durationField44 = chronology36.hours();
        int int45 = durationField30.compareTo(durationField44);
        long long48 = durationField30.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType49 = durationField30.getType();
        boolean boolean50 = localDateTime16.isSupported(durationFieldType49);
        int[] intArray55 = new int[] { (short) 0, 'u', '#', (byte) 100 };
        int int56 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16, intArray55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime16.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        boolean boolean63 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.withDurationAdded(readableDuration64, (-2));
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.withPeriodAdded(readablePeriod67, 259);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 117, 35, 100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2922789 + "'", int56 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test16177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16177");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        long long18 = julianChronology10.add((-231412082946010814L), 1645514162333L, (int) 'u');
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-231219557789017853L) + "'", long18 == (-231219557789017853L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645514157380L, dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.Chronology chronology25 = gJChronology14.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology14.getZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(3155760060000L, (org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology14.centuryOfEra();
        org.joda.time.Chronology chronology29 = gJChronology14.withUTC();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        org.joda.time.Chronology chronology28 = julianChronology17.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology17.minuteOfDay();
        long long35 = julianChronology17.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getExtension('x');
        java.lang.String str53 = locale48.getISO3Country();
        java.lang.String str54 = dateTimeZone42.getShortName((long) 1, locale48);
        org.joda.time.Chronology chronology55 = julianChronology17.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime58.getZone();
        java.lang.String str64 = dateTimeZone62.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays((int) (short) 10);
        long long73 = julianChronology17.set((org.joda.time.ReadablePartial) localDateTime71, (long) 457087);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter6.withOffsetParsed();
        java.lang.Integer int76 = dateTimeFormatter6.getPivotYear();
        java.lang.StringBuffer stringBuffer77 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer77, 53L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-46729900L) + "'", long35 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(julianChronology66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1646983500384L + "'", long73 == 1646983500384L);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNull(int76);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale6, locale8, locale10, locale11, locale14, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList18);
        boolean boolean21 = dateTime0.equals((java.lang.Object) languageRangeList4);
        org.joda.time.DateTime dateTime23 = dateTime0.plusWeeks(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        mutableDateTime26.setDate((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime26.secondOfDay();
        boolean boolean36 = dateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime26.add(readableDuration37, 457087);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46, (int) (short) 1);
        org.joda.time.DurationField durationField51 = julianChronology50.weeks();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = julianChronology50.seconds();
        int int54 = julianChronology50.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology50.yearOfCentury();
        org.joda.time.DurationField durationField56 = julianChronology50.months();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology50.minuteOfHour();
        mutableDateTime26.setRounding(dateTimeField57);
        boolean boolean60 = mutableDateTime26.isAfter(1642749546955L);
        mutableDateTime26.addWeeks(41);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime26.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IT" + "'", str7, "IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(julianChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime20);
        java.lang.String str24 = localDateTime20.toString();
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-07T23:00:00.100" + "'", str24, "1970-01-07T23:00:00.100");
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = julianChronology10.get(readablePeriod18, 1677050570590L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillisOfDay(66182);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        long long18 = durationField15.getMillis(353, 1645514269493L);
        long long20 = durationField15.getValueAsLong(1645514314857L);
        org.joda.time.DurationFieldType durationFieldType21 = durationField15.getType();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11139811200000L + "'", long18 == 11139811200000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) (byte) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        int int35 = mutableDateTime23.getYearOfCentury();
        mutableDateTime23.addWeekyears((int) 'x');
        mutableDateTime23.addDays(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        org.joda.time.DurationField durationField53 = chronology45.hours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) localDateTime64, (long) '4');
        org.joda.time.DurationField durationField67 = chronology59.hours();
        int int68 = durationField53.compareTo(durationField67);
        long long71 = durationField53.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType72 = durationField53.getType();
        mutableDateTime23.add(durationFieldType72, 4);
        mutableDateTime2.add(durationFieldType72, 4);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1645514154556L);
        boolean boolean79 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTimeField dateTimeField80 = mutableDateTime2.getRoundingField();
        mutableDateTime2.addWeekyears(2000);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology84);
        java.lang.String str86 = mutableDateTime85.toString();
        mutableDateTime85.setDate((long) (short) 100);
        int int89 = mutableDateTime85.getMinuteOfHour();
        int int90 = mutableDateTime85.getSecondOfMinute();
        mutableDateTime85.add(954000000L);
        org.joda.time.MutableDateTime.Property property93 = mutableDateTime85.dayOfWeek();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime85.dayOfMonth();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str24, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69 + "'", int35 == 69);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(dateTimeField80);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str86, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey(100L);
        long long15 = dateTimeZone11.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.secondOfDay();
        boolean boolean30 = property22.equals((java.lang.Object) property29);
        org.joda.time.LocalDateTime localDateTime32 = property22.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readablePeriod35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.weekOfWeekyear();
        boolean boolean40 = gJChronology16.equals((java.lang.Object) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        boolean boolean44 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.Chronology chronology46 = gJChronology16.withZone(dateTimeZone42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(45708722, 22956, (-19410), 172, 334, dateTimeZone42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        java.lang.String str17 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField19 = dateTimeField18.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str17, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology15.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((int) (short) 10, 365, 26395331, 18930, 997, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18930 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getDisplayVariant(locale25);
        java.lang.String str28 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.centuryOfEra();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str46 = dateTimeFieldType45.toString();
        int int47 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime19.property(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime19.hourOfDay();
        int int50 = localDateTime19.getCenturyOfEra();
        int int51 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime19.minusWeeks(3);
        org.joda.time.LocalDateTime.Property property54 = localDateTime19.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "82800056" + "'", str28, "82800056");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "yearOfCentury" + "'", str46, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDurationAdded(readableDuration28, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readableDuration31);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey(100L);
        org.joda.time.Chronology chronology38 = julianChronology27.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology27.minuteOfDay();
        long long45 = julianChronology27.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 377, (org.joda.time.Chronology) julianChronology27);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey(100L);
        long long59 = dateTimeZone55.nextTransition((long) (short) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        boolean boolean62 = dateTimeZone55.isStandardOffset(1677050272848L);
        org.joda.time.Chronology chronology63 = julianChronology27.withZone(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = julianChronology27.withZone(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readablePeriod67);
        int int69 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-46729900L) + "'", long45 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.DurationField durationField25 = julianChronology24.weeks();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.Chronology chronology35 = julianChronology24.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology24.hourOfDay();
        int int38 = mutableDateTime2.get(dateTimeField37);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = dateTimeField37.set((-1968335569960L), 22651523);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22651523 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withPeriodAdded(readablePeriod38, (int) (short) 100);
        long long42 = chronology30.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime23.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.millisOfDay();
        org.joda.time.DateTime dateTime47 = property46.roundCeilingCopy();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis(26197359);
        boolean boolean50 = gJChronology11.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        org.joda.time.DateTime.Property property53 = dateTime49.property(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime56.getZone();
        java.lang.String str62 = dateTimeZone60.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField65 = julianChronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology64.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology64.clockhourOfHalfday();
        org.joda.time.DurationField durationField68 = julianChronology64.days();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology64.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType51.getField((org.joda.time.Chronology) julianChronology64);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology64);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology79 = mutableDateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfCentury();
        org.joda.time.Chronology chronology81 = chronology79.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((long) '4', chronology79);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutableDateTime83.add(readablePeriod84);
        org.joda.time.ReadableDuration readableDuration86 = null;
        mutableDateTime83.add(readableDuration86);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime83.era();
        boolean boolean89 = julianChronology64.equals((java.lang.Object) property88);
        org.joda.time.DateTimeField dateTimeField90 = julianChronology64.minuteOfHour();
        boolean boolean91 = dateTimeField90.isLenient();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(julianChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        int int64 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime33.plusDays(2025);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra(22694228);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22694228 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 3, (int) 'u');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = julianChronology10.add(readablePeriod20, 36070100L, 70);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField26 = julianChronology10.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = durationField26.getMillis(1646637686129L, 1677050403108L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1646637686129");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 36070100L + "'", long23 == 36070100L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.DurationField durationField26 = julianChronology25.weeks();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology25.weekOfWeekyear();
        org.joda.time.Chronology chronology28 = julianChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField32 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology10.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        strSet2.clear();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("IT");
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        java.lang.String[] strArray16 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray23 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray30 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray37 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[][] strArray38 = new java.lang.String[][] { strArray16, strArray23, strArray30, strArray37 };
        java.lang.String[][] strArray39 = strSet8.toArray(strArray38);
        java.lang.Object[] objArray40 = strSet8.toArray();
        java.lang.String[] strArray50 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        int int53 = strSet51.size();
        boolean boolean54 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet51);
        boolean boolean55 = strSet51.isEmpty();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.dayOfYear();
        mutableDateTime59.setDate((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime59.secondOfDay();
        java.util.Locale locale70 = new java.util.Locale("IT");
        int int71 = property68.getMaximumShortTextLength(locale70);
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        boolean boolean73 = strSet51.removeAll((java.util.Collection<java.lang.String>) strSet72);
        boolean boolean75 = strSet51.add("");
        boolean boolean76 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet51);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 'x');
        int int22 = dateTime21.getCenturyOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology34);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology34.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime43.getFieldTypes();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale47.getDisplayVariant(locale49);
        java.lang.String str52 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale47);
        java.lang.String str53 = dateTime21.toString("52", locale47);
        java.lang.String str55 = locale47.getExtension('a');
        java.lang.String str56 = locale47.toLanguageTag();
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale47.getDisplayVariant(locale60);
        java.lang.String str64 = locale60.getDisplayVariant();
        java.lang.String str65 = locale60.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = dateTimeField16.set(1677050377801L, "0540-02-23T06:20:07.501", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0540-02-23T06:20:07.501\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "82800056" + "'", str52, "82800056");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52" + "'", str53, "52");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "und" + "'", str56, "und");
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "HI!" + "'", str65, "HI!");
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int3 = mutableDateTime0.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.DurationField durationField16 = julianChronology14.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.year();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology14.weekyearOfCentury();
        org.joda.time.Chronology chronology21 = julianChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology14.monthOfYear();
        mutableDateTime0.setRounding(dateTimeField24);
        int int26 = mutableDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusHours(23);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(31);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime15.minuteOfHour();
        org.joda.time.DurationField durationField21 = property20.getLeapDurationField();
        org.joda.time.DateTime dateTime22 = property20.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(0);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime2.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 'x');
        org.joda.time.DateTime dateTime21 = dateTime17.plusMonths(435);
        boolean boolean22 = gJChronology11.equals((java.lang.Object) dateTime21);
        org.joda.time.LocalTime localTime23 = dateTime21.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime21.withMinuteOfHour(66204494);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66204494 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.secondOfDay();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant31 = instant28.withMillis(1645514220833L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant31.withDurationAdded(readableDuration32, 69999485);
        org.joda.time.MutableDateTime mutableDateTime35 = instant31.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.setDayOfMonth(83914756);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83914756 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology10.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC(1645514565548L, false, 1677050388842L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645518165548L + "'", long17 == 1645518165548L);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withMillisOfSecond((int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime16.withFields((org.joda.time.ReadablePartial) localDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = localDateTime18.toDate();
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -900 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        int int9 = mutableDateTime2.getRoundingMode();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.dayOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey(100L);
        org.joda.time.Chronology chronology31 = julianChronology20.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology20.minuteOfDay();
        long long38 = julianChronology20.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45, (int) (short) 1);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str55 = locale51.getExtension('x');
        java.lang.String str56 = locale51.getISO3Country();
        java.lang.String str57 = dateTimeZone45.getShortName((long) 1, locale51);
        org.joda.time.Chronology chronology58 = julianChronology20.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime.Property property60 = dateTime59.secondOfMinute();
        boolean boolean61 = dateTime59.isEqualNow();
        int int62 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-46729900L) + "'", long38 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-01:00" + "'", str57, "-01:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.Chronology chronology28 = julianChronology17.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology17.millisOfDay();
        long long31 = dateTimeField29.roundFloor(2022L);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        int int51 = mutableDateTime48.getMinuteOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readablePeriod60);
        int int62 = mutableDateTime48.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfCentury();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone73);
        long long76 = chronology69.set((org.joda.time.ReadablePartial) localDateTime74, (long) '4');
        org.joda.time.DurationField durationField77 = chronology69.seconds();
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime61.toMutableDateTime(chronology69);
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar80 = mutableDateTime78.toCalendar(locale79);
        java.lang.String str81 = locale34.getDisplayCountry(locale79);
        java.lang.String str82 = dateTimeField29.getAsShortText(1728000100L, locale79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter6.withLocale(locale79);
        org.joda.time.Chronology chronology84 = dateTimeFormatter6.getChronolgy();
        int int85 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.Chronology chronology86 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser87 = dateTimeFormatter6.getParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2022L + "'", long31 == 2022L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1380 + "'", int51 == 1380);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1645514700959,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=25,SECOND=0,MILLISECOND=959,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Italia" + "'", str81, "Italia");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "82800100" + "'", str82, "82800100");
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNull(chronology84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertNull(chronology86);
        org.junit.Assert.assertNull(dateTimeParser87);
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime2.copy();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology26.minuteOfDay();
        java.util.Locale locale46 = null;
        long long47 = dateTimeField43.set(1677050524630L, "734", locale46);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1677071644630L + "'", long47 == 1677071644630L);
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.year();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology17);
        org.joda.time.Chronology chronology24 = julianChronology17.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(82560053, 912, 26218854, 66399365, 38152, 285, 3600000, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66399365 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withDefaultYear(99);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withOffsetParsed();
        java.lang.Integer int25 = dateTimeFormatter22.getPivotYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32, (int) (short) 1);
        org.joda.time.DurationField durationField37 = julianChronology36.weeks();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 10);
        org.joda.time.Chronology chronology47 = julianChronology36.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter22.withZone(dateTimeZone44);
        int int50 = dateTimeZone44.getOffset(1677050246834L);
        boolean boolean52 = dateTimeZone44.isStandardOffset((long) 24);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter19.withZone(dateTimeZone44);
        java.io.Writer writer55 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime59.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology67.dayOfYear();
        org.joda.time.DurationField durationField69 = julianChronology67.minutes();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology67.yearOfEra();
        org.joda.time.DurationField durationField71 = julianChronology67.centuries();
        org.joda.time.DateTimeZone dateTimeZone72 = julianChronology67.getZone();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) julianChronology67);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withPeriodAdded(readablePeriod75, 353);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer55, (org.joda.time.ReadablePartial) localDateTime77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-01:00" + "'", str53, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(julianChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(0);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(51);
        int int18 = dateTime15.getHourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology29.year();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = julianChronology29.days();
        org.joda.time.Chronology chronology37 = julianChronology29.withUTC();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime15, (org.joda.time.Chronology) julianChronology29);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) ' ');
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology43.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime31, (org.joda.time.Chronology) julianChronology43);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = mutableDateTime51.toString("52", locale56);
        long long60 = mutableDateTime51.getMillis();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutableDateTime51.add(readablePeriod61);
        org.joda.time.DateTimeField dateTimeField63 = mutableDateTime51.getRoundingField();
        int int64 = property17.getDifference((org.joda.time.ReadableInstant) mutableDateTime51);
        int int65 = mutableDateTime51.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableDateTime51.add(readablePeriod66, 51);
        java.lang.String str69 = mutableDateTime51.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "52" + "'", str59, "52");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1642749901085L + "'", long60 == 1642749901085L);
        org.junit.Assert.assertNull(dateTimeField63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-01-08T06:25:01.085-01:00" + "'", str69, "2022-01-08T06:25:01.085-01:00");
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime2.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        mutableDateTime22.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.minuteOfHour();
        boolean boolean29 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) 3);
        mutableDateTime2.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime2.getZone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology53);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = julianChronology53.getZone();
        mutableDateTime2.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime60.getZone();
        java.lang.String str66 = dateTimeZone64.getNameKey(100L);
        long long68 = dateTimeZone64.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.secondOfDay();
        org.joda.time.Instant instant71 = gJChronology69.getGregorianCutover();
        org.joda.time.Instant instant72 = gJChronology69.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Chronology chronology75 = gJChronology69.withZone(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        mutableDateTime2.setZone(dateTimeZone74);
        int int79 = dateTimeZone74.getStandardOffset(1645514641662L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(gJChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 120 + "'", int79 == 120);
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology1.era();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1677050192045L, (org.joda.time.Chronology) gJChronology1);
        org.joda.time.DurationField durationField7 = gJChronology1.eras();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology1.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology1.weekyear();
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((-3600000));
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.secondOfDay();
        boolean boolean26 = property18.equals((java.lang.Object) property25);
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfCeiling();
        int int28 = mutableDateTime27.getEra();
        mutableDateTime27.setMillisOfSecond((int) '#');
        mutableDateTime27.setSecondOfDay(625);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        int int38 = mutableDateTime35.getMinuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readablePeriod47);
        int int49 = mutableDateTime35.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.plus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime48.plusYears(1);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property58 = dateTime53.property(dateTimeFieldType57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime27.property(dateTimeFieldType57);
        int int60 = dateTime14.get(dateTimeFieldType57);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology71 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone67, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField72 = julianChronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone75 = julianChronology71.getZone();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology71.weekyear();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology71.dayOfWeek();
        boolean boolean78 = dateTimeFieldType57.isSupported((org.joda.time.Chronology) julianChronology71);
        org.joda.time.DateTimeZone dateTimeZone79 = julianChronology71.getZone();
        long long81 = dateTimeZone79.nextTransition(0L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1380 + "'", int38 == 1380);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1677050701138L + "'", long54 == 1677050701138L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(julianChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime15.toMutableDateTime();
        mutableDateTime21.setDayOfYear(87);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        mutableDateTime21.addMinutes(544);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar27 = mutableDateTime26.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        int int30 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        mutableDateTime10.addMillis(9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDateTime30.getFieldType(0);
        boolean boolean47 = localDateTime26.isSupported(dateTimeFieldType46);
        int int48 = mutableDateTime10.get(dateTimeFieldType46);
        boolean boolean49 = localDateTime2.isSupported(dateTimeFieldType46);
        java.lang.String str50 = localDateTime2.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:00:00.052" + "'", str50, "1969-12-31T23:00:00.052");
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514701208L + "'", long25 == 1645514701208L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant19 = instant16.withDurationAdded(1645514154399L, 2922789);
        org.joda.time.MutableDateTime mutableDateTime20 = instant16.toMutableDateTimeISO();
        mutableDateTime20.setDate(1677050301950L);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        java.lang.String str24 = property23.getAsShortText();
        int int25 = property23.get();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Wed" + "'", str24, "Wed");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.setMillisOfDay((int) 'x');
        mutableDateTime2.addYears((int) 'u');
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale locale31 = new java.util.Locale("fr");
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale23, locale25, locale27, locale28, locale31, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList35);
        boolean boolean38 = dateTime17.equals((java.lang.Object) languageRangeList21);
        org.joda.time.DateTime dateTime40 = dateTime17.plusWeeks(22);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfYear();
        mutableDateTime43.setDate((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime43.secondOfDay();
        boolean boolean53 = dateTime17.isEqual((org.joda.time.ReadableInstant) mutableDateTime43);
        int int54 = dateTime17.getDayOfWeek();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime57 = dateTime17.plusMinutes(22654609);
        org.joda.time.DateTime dateTime59 = dateTime57.plusWeeks(22496494);
        org.joda.time.DateTime dateTime61 = dateTime59.plusWeeks(19365);
        org.joda.time.DateTime dateTime63 = dateTime61.withMillis(1677050300554L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "IT" + "'", str24, "IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(1645514171263L, (org.joda.time.Chronology) gJChronology26);
        int[] intArray29 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime27, 10800001L);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusYears(26207);
        java.util.Locale locale35 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "fr");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDateTime31.toString("Property[yearOfCentury]", locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1969, 12, 19, 7200001]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals(locale35.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_FR");
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.Chronology chronology37 = chronology35.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime27.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey(100L);
        long long50 = dateTimeZone46.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.secondOfDay();
        org.joda.time.Instant instant53 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.minus(readableDuration54);
        mutableDateTime39.setMillis((org.joda.time.ReadableInstant) instant53);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableDateTime39.add(readablePeriod57);
        mutableDateTime39.setMillis((long) 22660448);
        mutableDateTime39.add((long) 22953471);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundCeiling();
        java.lang.String str13 = property11.getAsString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "82801" + "'", str13, "82801");
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.dayOfYear();
        org.joda.time.DurationField durationField31 = julianChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology29.year();
        long long35 = dateTimeField33.roundCeiling(52531200000L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        java.util.Locale locale39 = new java.util.Locale("fr");
        java.lang.String str40 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime36, 70, locale39);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, locale41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.withMillisOfSecond(49);
        org.joda.time.LocalDateTime.Property property45 = localDateTime36.yearOfCentury();
        int int46 = localDateTime36.size();
        java.util.Date date47 = localDateTime36.toDate();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64198800000L + "'", long35 == 64198800000L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Feb 22 06:25:01 GMT+00:00 2022");
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(100L);
        int int8 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusMinutes(292278993);
        int int20 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        int int22 = localDateTime19.getCenturyOfEra();
        int int24 = localDateTime19.getValue(0);
        int int25 = localDateTime19.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1414 + "'", int24 == 1414);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.withMillis(64199040000L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DurationField durationField19 = julianChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology18.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(604800099L, dateTimeZone23);
        int int26 = dateTimeZone23.getStandardOffset(35000L);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) dateTime6, dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3600000) + "'", int26 == (-3600000));
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 53, dateTimeZone2);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField8 = gJChronology7.weekyears();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology7.add(readablePeriod9, 1645514348499L, 660);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = gJChronology7.getDateTimeMillis(26220886, 16, 64800172, 22688598, 26428332, 26383633, 43570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22688598 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514348499L + "'", long12 == 1645514348499L);
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfDay();
        long long18 = dateTimeField16.roundHalfFloor(1645514571450L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513200000L + "'", long18 == 1645513200000L);
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        long long24 = chronology15.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.secondOfDay();
        boolean boolean36 = property28.equals((java.lang.Object) property35);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((long) 2022);
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePartial) localDateTime38, (long) (-1));
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        int int47 = mutableDateTime44.getMinuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readablePeriod56);
        int int58 = mutableDateTime44.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.plus(readablePeriod59);
        org.joda.time.DateTime dateTime62 = dateTime57.plusYears(1);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withPeriodAdded(readablePeriod67, 1970);
        boolean boolean70 = localDateTime38.equals((java.lang.Object) readablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusMinutes((-16400687));
        int int80 = localDateTime79.size();
        boolean boolean81 = localDateTime38.isAfter((org.joda.time.ReadablePartial) localDateTime79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62689900L) + "'", long24 == (-62689900L));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1969, 12, 31, 82799999]");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1380 + "'", int47 == 1380);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1677050701402L + "'", long63 == 1677050701402L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        long long16 = julianChronology10.add(52531200000L, 1645514464486L, 92);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 151439861932712L + "'", long16 == 151439861932712L);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L);
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime();
        java.lang.String str36 = localDateTime31.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) localDateTime47, (long) '4');
        org.joda.time.Chronology chronology50 = chronology42.withUTC();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfCentury();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone60);
        long long63 = chronology56.set((org.joda.time.ReadablePartial) localDateTime61, (long) '4');
        int[] intArray65 = chronology50.get((org.joda.time.ReadablePartial) localDateTime61, 0L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        int int71 = mutableDateTime68.getMinuteOfDay();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        mutableDateTime74.setZone(dateTimeZone75);
        org.joda.time.Chronology chronology77 = mutableDateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfCentury();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.minus(readablePeriod80);
        int int82 = mutableDateTime68.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.plus(readablePeriod83);
        org.joda.time.DateTime dateTime85 = dateTime81.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.DateTime dateTime87 = dateTime85.plus(readableDuration86);
        org.joda.time.DateTime dateTime88 = localDateTime61.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int90 = dateTime87.get(dateTimeFieldType89);
        int int91 = localDateTime31.get(dateTimeFieldType89);
        int[] intArray93 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime31, 1959605395200000L);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.LocalDateTime localDateTime95 = localDateTime31.plus(readablePeriod94);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-07T23:00:00.100" + "'", str36, "1970-01-07T23:00:00.100");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1380 + "'", int71 == 1380);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 22 + "'", int90 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(intArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[64066, 2, 10, 82800000]");
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        long long31 = dateTimeZone13.getMillisKeepLocal(dateTimeZone28, (long) 'a');
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1645514162333L, dateTimeZone28);
        java.util.Date date33 = localDateTime32.toDate();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str4, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 240097L + "'", long31 == 240097L);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 06:12:02 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale26.getExtension('a');
        int int29 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        int int45 = mutableDateTime42.getMinuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        int int56 = mutableDateTime42.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone67);
        long long70 = chronology63.set((org.joda.time.ReadablePartial) localDateTime68, (long) '4');
        org.joda.time.DurationField durationField71 = chronology63.seconds();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime55.toMutableDateTime(chronology63);
        int int73 = property25.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime74 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.LocalDateTime localDateTime80 = property78.addWrapFieldToCopy((int) '#');
        int[] intArray81 = localDateTime80.getValues();
        julianChronology20.validate((org.joda.time.ReadablePartial) localDateTime74, intArray81);
        org.joda.time.DateTimeField dateTimeField83 = julianChronology20.weekyearOfCentury();
        org.joda.time.DateTime dateTime84 = dateTime5.toDateTime((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMillis(26197359);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime84.withDayOfMonth(82620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82620 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1380 + "'", int45 == 1380);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField20 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(575);
        boolean boolean24 = dateTime22.isAfter((-20018599666L));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.weekOfWeekyear();
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology35.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField40.getType();
        org.joda.time.DateTime.Property property42 = dateTime22.property(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property47 = dateTime42.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime49 = property47.addToCopy(259200001L);
        org.joda.time.DateTime dateTime50 = property47.withMinimumValue();
        org.joda.time.DateTime dateTime52 = dateTime50.plusDays(100);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime55 = dateTime52.withPeriodAdded(readablePeriod53, 0);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime52.withPeriodAdded(readablePeriod56, 23);
        int int59 = dateTime52.getDayOfMonth();
        boolean boolean60 = dateTime21.equals((java.lang.Object) int59);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1677050701524L + "'", long43 == 1677050701524L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DurationField durationField14 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfMonth();
        java.lang.String str16 = julianChronology10.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = julianChronology10.add((long) 22496494, 1645514496342L, 1645514428);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514496342 * 1645514428");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str16, "JulianChronology[-01:00,mdfw=1]");
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.centuryOfEra();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str19 = dateTimeField14.getAsShortText(436, locale16);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DurationField durationField22 = gJChronology21.centuries();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 26399230, (org.joda.time.Chronology) gJChronology21);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology21);
        int int25 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "436" + "'", str19, "436");
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2922730 + "'", int25 == 2922730);
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime20.getFieldTypes();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale24.getDisplayVariant(locale26);
        java.lang.String str29 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, locale24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology40.centuryOfEra();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str47 = dateTimeFieldType46.toString();
        int int48 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property49 = localDateTime20.property(dateTimeFieldType46);
        boolean boolean50 = gJChronology0.equals((java.lang.Object) localDateTime20);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology0.era();
        org.joda.time.DurationField durationField52 = gJChronology0.seconds();
        org.joda.time.DurationField durationField53 = gJChronology0.weekyears();
        org.joda.time.Instant instant54 = gJChronology0.getGregorianCutover();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "82800056" + "'", str29, "82800056");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "yearOfCentury" + "'", str47, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.monthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((-1));
        int int19 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plus(readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfCeilingCopy();
        int int27 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime48 = dateTime44.withField(dateTimeFieldType46, (int) (short) 0);
        int int49 = localDateTime26.indexOf(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime18.property(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((long) ' ');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusMonths((-292269054));
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYearOfEra(437);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) ' ');
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusMonths((-3600000));
        boolean boolean69 = localDateTime57.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        java.lang.String str5 = mutableDateTime4.toString();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfCeilingCopy();
        int int12 = localDateTime11.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.property(dateTimeFieldType13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.property(dateTimeFieldType13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime4.add(readablePeriod20, 1);
        int int23 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int24 = mutableDateTime4.getMillisOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        java.lang.String str29 = mutableDateTime28.toString();
        mutableDateTime28.setDate((long) (short) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        long long50 = dateTimeZone38.getMillisKeepLocal(dateTimeZone46, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        long long56 = dateTimeZone38.getMillisKeepLocal(dateTimeZone53, (long) 'a');
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(1645514162333L, dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone53);
        mutableDateTime4.setZone(dateTimeZone53);
        mutableDateTime4.setSecondOfDay(2090);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str5, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 82800001 + "'", int24 == 82800001);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str29, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 240097L + "'", long56 == 240097L);
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        java.lang.Object obj14 = null;
        boolean boolean15 = gJChronology11.equals(obj14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.years();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        long long37 = chronology30.set((org.joda.time.ReadablePartial) localDateTime35, (long) '4');
        org.joda.time.DurationField durationField38 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.secondOfMinute();
        boolean boolean40 = localDateTime18.equals((java.lang.Object) dateTimeField39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime18.minusYears(26159301);
        int[] intArray44 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime18, (long) 436);
        int int45 = localDateTime18.size();
        int int46 = localDateTime18.getWeekyear();
        int[] intArray47 = localDateTime18.getValues();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1969, 12, 18, 82800436]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 12, 31, 82800100]");
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(22657758, (int) (short) 10, 15, 0, 0, dateTimeZone17);
        long long24 = dateTimeZone17.convertLocalToUTC(1677050295262L, false, (long) 22556026);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(1677050235634L, dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(22672231, 26397939, (-874), 0, 2025, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1677053895262L + "'", long24 == 1677053895262L);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime2.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        mutableDateTime22.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.minuteOfHour();
        boolean boolean29 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime2.addWeekyears(26184569);
        mutableDateTime2.add(1645514170000L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology44.dayOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime48.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey(100L);
        org.joda.time.Chronology chronology55 = julianChronology44.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology44.minuteOfDay();
        long long62 = julianChronology44.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology44.secondOfDay();
        org.joda.time.DurationField durationField65 = julianChronology44.eras();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology44.centuryOfEra();
        mutableDateTime2.setChronology((org.joda.time.Chronology) julianChronology44);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-46729900L) + "'", long62 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        int int9 = dateTimeFormatter8.getDefaultYear();
        java.lang.Integer int10 = dateTimeFormatter8.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 630);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = dateTimeFormatter14.parseMutableDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        int int6 = mutableDateTime2.getMinuteOfHour();
        int int7 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.yearOfCentury();
        int int20 = property19.getMaximumValueOverall();
        org.joda.time.DateTime dateTime21 = property19.getDateTime();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean26 = dateTimeZone24.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str29 = dateTimeZone24.getNameKey((long) 26159301);
        java.util.TimeZone timeZone30 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime31 = dateTime21.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int45 = localDateTime43.get(dateTimeFieldType44);
        int int46 = localDateTime41.indexOf(dateTimeFieldType44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DateTimeField dateTimeField60 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType44.getField(chronology52);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime64.getZone();
        java.lang.String str70 = dateTimeZone68.getNameKey(100L);
        long long72 = dateTimeZone68.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology73.secondOfDay();
        int int75 = gJChronology73.getMinimumDaysInFirstWeek();
        boolean boolean76 = dateTimeFieldType44.isSupported((org.joda.time.Chronology) gJChronology73);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology73.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology73.getZone();
        int int80 = dateTimeZone78.getStandardOffset(60035L);
        java.lang.String str81 = dateTimeZone78.getID();
        long long83 = dateTimeZone24.getMillisKeepLocal(dateTimeZone78, (-189434604L));
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 385 + "'", int45 == 385);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(gJChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3600000) + "'", int80 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:00" + "'", str81, "-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-189434604L) + "'", long83 == (-189434604L));
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        int int47 = mutableDateTime44.getMinuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readablePeriod56);
        int int58 = mutableDateTime44.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone69);
        long long72 = chronology65.set((org.joda.time.ReadablePartial) localDateTime70, (long) '4');
        org.joda.time.DurationField durationField73 = chronology65.seconds();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime57.toMutableDateTime(chronology65);
        org.joda.time.DurationField durationField75 = chronology65.centuries();
        org.joda.time.DateTime dateTime76 = dateTime31.toDateTime(chronology65);
        org.joda.time.DateTime.Property property77 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime79 = dateTime31.plus(1677050148384L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1380 + "'", int47 == 1380);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = julianChronology55.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str69 = nameProvider62.getName(locale66, "English (Canada)", "Greenwich Mean Time");
        java.lang.String str70 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, (int) (short) 1, locale66);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((java.lang.Object) str70);
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        mutableDateTime72.addMillis(739);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertEquals(locale66.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(mutableDateTime72);
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DateTimeField dateTimeField13 = chronology5.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology5.weekyears();
        org.joda.time.DurationField durationField15 = chronology5.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(292272992);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        int int10 = property8.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusMinutes(9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 385 + "'", int13 == 385);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str15, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.millisOfSecond();
        org.joda.time.DurationField durationField17 = julianChronology11.eras();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfYear(83013651);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83013651 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        java.lang.String[] strArray3 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology16.weekOfWeekyear();
        boolean boolean21 = strSet4.contains((java.lang.Object) julianChronology16);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology16.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology16.secondOfDay();
        long long28 = julianChronology16.add(1645514167504L, (long) 16, 2);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology16.dayOfWeek();
        org.joda.time.DurationField durationField31 = julianChronology16.halfdays();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-608), (org.joda.time.Chronology) julianChronology16);
        int int33 = dateTime32.getCenturyOfEra();
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514167536L + "'", long28 == 1645514167536L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        int int17 = dateTimeField15.getMinimumValue((long) 133);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4', chronology13);
        boolean boolean18 = property3.equals((java.lang.Object) '4');
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale19.getLanguage();
        java.lang.String str23 = property3.getAsText(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = locale19.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "82800052" + "'", str23, "82800052");
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = julianChronology10.getDateTimeMillis(39600052, 37114450, 23038413, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37114450 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 53, dateTimeZone2);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        long long11 = gJChronology7.add(3155760000000L, 100L, 600);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology7.days();
        int int15 = durationField13.getValue(1645514626446L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3155760060000L + "'", long11 == 3155760060000L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19045 + "'", int15 == 19045);
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(1645514155575L);
        int int18 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.addWrapField((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDateTime(1900, 66171, 85802074, 22694228, 22783248, (-30497267), 235);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22694228 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay(23);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMillis(26159301);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.weekyear();
        boolean boolean27 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter30.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter30.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withDefaultYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime39.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology47);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology47.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = julianChronology47.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey((long) (byte) -1);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.lang.String str57 = dateTimeZone52.getShortName(1677050183994L, locale56);
        long long59 = dateTimeZone52.convertUTCToLocal((long) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter36.withZone(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone52);
        long long65 = dateTimeZone52.convertLocalToUTC(604800099L, true, 0L);
        org.joda.time.DateTime dateTime66 = localDateTime24.toDateTime(dateTimeZone52);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        long long70 = dateTimeZone52.convertLocalToUTC(1645514625177L, true);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 385 + "'", int22 == 385);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(dateTimePrinter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(julianChronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "52_MINUTEOFHOUR");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-01:00" + "'", str57, "-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-3599947L) + "'", long59 == (-3599947L));
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 608400099L + "'", long65 == 608400099L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(julianChronology67);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645518225177L + "'", long70 == 1645518225177L);
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded((-518399980L), 439);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime11.plus(1645514170843L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int23 = dateTime11.get(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.secondOfDay();
        boolean boolean35 = property27.equals((java.lang.Object) property34);
        org.joda.time.LocalDateTime localDateTime37 = property27.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int39 = localDateTime37.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46, (int) (short) 1);
        org.joda.time.DurationField durationField51 = julianChronology50.weeks();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime54.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 10);
        org.joda.time.Chronology chronology61 = julianChronology50.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField62 = julianChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology50.hourOfDay();
        org.joda.time.DurationField durationField64 = julianChronology50.minutes();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType38.getField((org.joda.time.Chronology) julianChronology50);
        org.joda.time.DateTimeField dateTimeField66 = julianChronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology50.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology50.millisOfDay();
        int int70 = dateTime11.get(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514702120L + "'", long19 == 1645514702120L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(julianChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 23102120 + "'", int70 == 23102120);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L);
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(99);
        int int29 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime41.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime41.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long49 = dateTime41.getMillis();
        java.util.GregorianCalendar gregorianCalendar50 = dateTime41.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime41.getZone();
        org.joda.time.DateTime dateTime52 = localDateTime28.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology53 = julianChronology10.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField54 = julianChronology10.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514702146L + "'", long49 == 1645514702146L);
        org.junit.Assert.assertNotNull(gregorianCalendar50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear(22);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        int int21 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        int int32 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.plus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime31.plusYears(1);
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime31.minusYears(99);
        org.joda.time.DateTime dateTime43 = dateTime31.plusWeeks(1);
        org.joda.time.DateTime dateTime44 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfMinute();
        int int46 = dateTime44.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1380 + "'", int21 == 1380);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = julianChronology10.withZone(dateTimeZone23);
        int int25 = julianChronology10.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = dateTime9.toLocalDateTime();
        int int17 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMinutes(22331);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime19.getFields();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((-1));
        int int19 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean27 = dateTimeZone25.isStandardOffset(1677050149186L);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = dateTimeZone25.getShortName((long) 10, locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter23.withLocale(locale29);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DurationField durationField47 = julianChronology43.centuries();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology43.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField48.getAsShortText((long) (byte) 10, locale50);
        java.util.Locale.Builder builder52 = builder32.setLocale(locale50);
        java.lang.String str53 = locale50.getVariant();
        java.lang.String str54 = locale50.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter31.withLocale(locale50);
        java.lang.String str56 = locale50.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = localDateTime3.toString("2058-05-24T18:22:58.561+59:00", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-01:00" + "'", str30, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "23" + "'", str51, "23");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        java.lang.String str28 = dateTimeZone24.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone24);
        org.joda.time.Chronology chronology31 = gJChronology11.withZone(dateTimeZone24);
        java.lang.String str32 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology11.dayOfWeek();
        org.joda.time.DurationField durationField34 = gJChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology11.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GJChronology[-01:00]" + "'", str32, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        long long22 = dateTimeZone18.nextTransition((long) (short) 0);
        int int24 = dateTimeZone18.getStandardOffset(36070100L);
        org.joda.time.DateTime dateTime25 = mutableDateTime10.toDateTime(dateTimeZone18);
        int int26 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.plusMinutes(22495437);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField17 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.era();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField22.add(1677050231732L, (-231412082946250814L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        long long24 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        java.util.TimeZone timeZone25 = dateTimeZone12.toTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone25);
        java.lang.String str28 = timeZone25.getID();
        java.time.ZoneId zoneId29 = timeZone25.toZoneId();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone(zoneId29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT-01:00" + "'", str28, "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField13 = julianChronology11.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int int48 = localDateTime21.getYearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        long long61 = chronology54.set((org.joda.time.ReadablePartial) localDateTime59, (long) '4');
        org.joda.time.Chronology chronology62 = chronology54.withUTC();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone72);
        long long75 = chronology68.set((org.joda.time.ReadablePartial) localDateTime73, (long) '4');
        int[] intArray77 = chronology62.get((org.joda.time.ReadablePartial) localDateTime73, 0L);
        julianChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(1645514298435L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField82 = julianChronology11.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645514208369L, chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean15 = dateTimeZone13.isStandardOffset(1677050149186L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays((int) ' ');
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime43.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long51 = dateTime43.getMillis();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime54.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey(100L);
        long long62 = dateTimeZone58.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) long51, dateTimeZone58);
        org.joda.time.DateTime dateTime64 = localDateTime31.toDateTime(dateTimeZone58);
        java.lang.String str66 = dateTimeZone58.getNameKey(1645514169594L);
        long long68 = dateTimeZone13.getMillisKeepLocal(dateTimeZone58, 1677050197282L);
        org.joda.time.DateTime dateTime69 = dateTime11.toDateTime(dateTimeZone58);
        org.joda.time.DateTime.Property property70 = dateTime11.era();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514702400L + "'", long51 == 1645514702400L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertNull(str66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1677050197282L + "'", long68 == 1677050197282L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds(22647);
        int int16 = localDateTime15.getSecondOfMinute();
        int int17 = localDateTime15.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 33 + "'", int16 == 33);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField16 = gJChronology11.eras();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        int int12 = dateTimeZone6.getOffsetFromLocal(23L);
        long long15 = dateTimeZone6.adjustOffset(1645514221233L, false);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField(22705);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22705");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514221233L + "'", long15 == 1645514221233L);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        long long26 = dateTimeZone22.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfDay();
        org.joda.time.Instant instant29 = gJChronology27.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.Instant instant32 = gJChronology30.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.secondOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(21852061483L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology30.era();
        org.joda.time.DurationField durationField37 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(10800001L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillis(0L);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.setDate(1645510606955L);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime1.add(readableDuration8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.secondOfDay();
        org.joda.time.Instant instant13 = gJChronology11.getGregorianCutover();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        org.joda.time.Chronology chronology27 = chronology19.withUTC();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        int[] intArray42 = chronology27.get((org.joda.time.ReadablePartial) localDateTime38, 0L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        int int48 = mutableDateTime45.getMinuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readablePeriod57);
        int int59 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime58.plus(readablePeriod60);
        org.joda.time.DateTime dateTime62 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.plus(readableDuration63);
        org.joda.time.DateTime dateTime65 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(100L);
        int int68 = localDateTime67.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.millisOfDay();
        org.joda.time.LocalDateTime localDateTime76 = property74.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime67.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime67.minusMonths((int) (byte) 1);
        boolean boolean82 = localDateTime38.isEqual((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.minusMillis(70);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plus(readablePeriod86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.minus(readablePeriod88);
        boolean boolean90 = gJChronology11.equals((java.lang.Object) localDateTime89);
        org.joda.time.DurationField durationField91 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField92 = gJChronology11.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1380 + "'", int48 == 1380);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        org.joda.time.Chronology chronology39 = julianChronology28.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology28.getZone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime46.getZone();
        java.lang.String str52 = dateTimeZone50.getNameKey((long) 10);
        java.lang.String str54 = dateTimeZone50.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(1677050149186L, dateTimeZone50);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.Chronology chronology60 = julianChronology28.withZone(dateTimeZone50);
        java.lang.String str61 = dateTimeZone50.getID();
        org.joda.time.Chronology chronology62 = chronology17.withZone(dateTimeZone50);
        java.lang.String str64 = dateTimeZone50.getShortName((-82799913L));
        long long66 = dateTimeZone50.nextTransition(1645510485666L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertNull(str52);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
        org.junit.Assert.assertNotNull(chronology62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-01:00" + "'", str64, "-01:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645510485666L + "'", long66 == 1645510485666L);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.addWrapField((-18718));
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekOfWeekyear();
        java.lang.String str16 = property15.getAsShortText();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "52" + "'", str16, "52");
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.clockhourOfDay();
        java.lang.String str21 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = julianChronology10.get(readablePeriod23, 1782000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str21, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime11.toGregorianCalendar();
        java.lang.String str21 = dateTime11.toString();
        org.joda.time.DateTime.Property property22 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy(2086);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey(100L);
        long long35 = dateTimeZone31.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.weekyear();
        java.lang.String str38 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.hourOfDay();
        org.joda.time.Instant instant41 = gJChronology36.getGregorianCutover();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        java.lang.String str53 = dateTimeZone49.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone49);
        org.joda.time.Chronology chronology56 = gJChronology36.withZone(dateTimeZone49);
        org.joda.time.Instant instant57 = gJChronology36.getGregorianCutover();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int61 = localDateTime59.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.plusMillis((-608));
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMonths(26181);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        boolean boolean69 = dateTimeZone67.isLocalDateTimeGap(localDateTime68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusWeeks(292272992);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        int int79 = mutableDateTime76.getMinuteOfDay();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        mutableDateTime82.setZone(dateTimeZone83);
        org.joda.time.Chronology chronology85 = mutableDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfCentury();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.DateTime dateTime89 = dateTime87.minus(readablePeriod88);
        int int90 = mutableDateTime76.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime93 = dateTime89.withField(dateTimeFieldType91, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType91.getDurationType();
        int int95 = localDateTime73.get(dateTimeFieldType91);
        boolean boolean96 = localDateTime65.isSupported(dateTimeFieldType91);
        boolean boolean97 = instant57.isSupported(dateTimeFieldType91);
        int int98 = dateTime24.get(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514702565L + "'", long19 == 1645514702565L);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T06:25:02.565-01:00" + "'", str21, "2022-02-22T06:25:02.565-01:00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GJChronology[-01:00]" + "'", str38, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-01:00" + "'", str53, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 385 + "'", int61 == 385);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(gJChronology70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1380 + "'", int79 == 1380);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-5599492) + "'", int95 == (-5599492));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2022 + "'", int98 == 2022);
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology10.add(readablePeriod17, 1645514153739L, 1);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.era();
        org.joda.time.DurationField durationField22 = julianChronology10.minutes();
        java.lang.String str23 = durationField22.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514153739L + "'", long20 == 1645514153739L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DurationField[minutes]" + "'", str23, "DurationField[minutes]");
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L);
        int int28 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        int int37 = mutableDateTime34.getMinuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        int int48 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readablePeriod49);
        org.joda.time.DateTime dateTime52 = dateTime47.plusYears(1);
        org.joda.time.DateTime dateTime55 = dateTime47.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        int int57 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime30.plusMonths(70);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, (int) '#', locale61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime30.minusWeeks(10);
        int int65 = localDateTime64.getMillisOfSecond();
        int int66 = localDateTime64.size();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1380 + "'", int37 == 1380);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "35" + "'", str62, "35");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.secondOfDay();
        boolean boolean20 = dateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime23.year();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        java.lang.String str46 = dateTimeZone42.getName((long) 3);
        mutableDateTime23.setZoneRetainFields(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime23.era();
        mutableDateTime23.addMillis(51);
        mutableDateTime23.addMillis((-3600000));
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime55.getZone();
        java.lang.String str61 = dateTimeZone59.getNameKey(100L);
        long long63 = dateTimeZone59.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.weekyear();
        java.lang.String str66 = gJChronology64.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.secondOfDay();
        long long69 = dateTimeField67.roundHalfCeiling(1645514396241L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setRounding(dateTimeField67, 82800099);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 82800099");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(gJChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GJChronology[-01:00]" + "'", str66, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645514396000L + "'", long69 == 1645514396000L);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = julianChronology16.seconds();
        int int20 = julianChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology16.yearOfCentury();
        org.joda.time.DurationField durationField22 = julianChronology16.hours();
        boolean boolean23 = property3.equals((java.lang.Object) durationField22);
        org.joda.time.DurationField durationField24 = property3.getLeapDurationField();
        java.lang.String str25 = property3.getAsString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '4');
        org.joda.time.DurationField durationField32 = chronology24.hours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        int int47 = durationField32.compareTo(durationField46);
        long long50 = durationField32.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType51 = durationField32.getType();
        mutableDateTime2.add(durationFieldType51, 4);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime58 = property54.set(0);
        org.joda.time.MutableDateTime mutableDateTime60 = property54.set("5");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField21 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.dayOfYear();
        int int23 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology24 = julianChronology10.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.setMillisOfDay((int) 'x');
        mutableDateTime2.addYears((int) 'u');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.millisOfDay();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str22 = dateTimeFieldType21.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray50 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int51 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray50);
        int[] intArray53 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) localDateTime19, 0, intArray50, 20);
        long long55 = dateTimeField14.roundFloor(7948800000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 7948800000L + "'", long55 == 7948800000L);
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DurationField durationField13 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey(100L);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology11.getZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        java.lang.String str37 = dateTimeZone33.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(1677050149186L, dateTimeZone33);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology43 = julianChronology11.withZone(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 22687855, (org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField17.set(3600000L, 26445602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26445602 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime33.withYearOfEra(22642941);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withMillisOfDay(192);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = julianChronology10.seconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.plusWeeks(3);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.plusWeeks(1439);
        int int30 = localDateTime29.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 82800100 + "'", int30 == 82800100);
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.clockhourOfHalfday();
        org.joda.time.Instant instant18 = gJChronology16.getGregorianCutover();
        org.joda.time.DurationField durationField19 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey(100L);
        long long32 = dateTimeZone28.nextTransition((long) (short) 0);
        int int34 = dateTimeZone28.getStandardOffset(36070100L);
        java.lang.String str36 = dateTimeZone28.getName(10800001L);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1312797283202074L, dateTimeZone28);
        org.joda.time.Chronology chronology38 = gJChronology16.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField39 = gJChronology16.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        java.lang.String str5 = mutableDateTime4.toString();
        mutableDateTime4.setDate((long) (short) 100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        long long26 = dateTimeZone14.getMillisKeepLocal(dateTimeZone22, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        long long32 = dateTimeZone14.getMillisKeepLocal(dateTimeZone29, (long) 'a');
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(1645514162333L, dateTimeZone29);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        boolean boolean37 = dateTimeZone29.equals((java.lang.Object) chronology36);
        long long40 = dateTimeZone29.adjustOffset((long) 15, true);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(obj0, dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str5, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 240097L + "'", long32 == 240097L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 15L + "'", long40 == 15L);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DurationField durationField15 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.year();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = julianChronology10.getDateTimeMillis(1645514568186L, 22844942, 22655433, 22497718, 22654609);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22844942 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DurationField durationField15 = julianChronology10.weeks();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DurationField durationField17 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str16, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DurationField durationField13 = chronology5.weekyears();
        org.joda.time.DurationField durationField14 = chronology5.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField20 = julianChronology10.months();
        org.joda.time.DurationField durationField21 = julianChronology10.minutes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.setSecondOfDay(8);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        int int11 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        int int19 = mutableDateTime16.getMinuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        int int30 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.plus((-61062681599999L));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        java.lang.String str36 = mutableDateTime35.toString();
        mutableDateTime35.setDate((long) (short) 100);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        mutableDateTime35.setZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime49.getZone();
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 10);
        long long57 = dateTimeZone45.getMillisKeepLocal(dateTimeZone53, (long) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime29.toDateTime(dateTimeZone53);
        boolean boolean59 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property60 = dateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1380 + "'", int19 == 1380);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str36, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusMinutes(9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 26206466, dateTimeZone26);
        java.util.TimeZone timeZone29 = dateTimeZone26.toTimeZone();
        long long32 = dateTimeZone26.adjustOffset((long) 457087, true);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime(dateTimeZone26);
        long long37 = dateTimeZone26.convertLocalToUTC(1642381440000L, false, (long) 36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property52 = dateTime47.hourOfDay();
        org.joda.time.DateTime.Property property53 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime55 = dateTime47.withYear(65);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfMonth(10);
        org.joda.time.DateTime dateTime58 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.minusMonths(19410);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 385 + "'", int13 == 385);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str15, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 457087L + "'", long32 == 457087L);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1642385040000L + "'", long37 == 1642385040000L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gJChronology61);
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        boolean boolean34 = dateTime19.equals((java.lang.Object) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology46);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology46.minuteOfDay();
        org.joda.time.DurationField durationField51 = julianChronology46.days();
        org.joda.time.DurationField durationField52 = julianChronology46.seconds();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(87725008L, (org.joda.time.Chronology) julianChronology46);
        org.joda.time.DateTime dateTime55 = dateTime19.toDateTime((org.joda.time.Chronology) julianChronology46);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.secondOfDay();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.Instant instant31 = gJChronology29.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.clockhourOfDay();
        org.joda.time.Instant instant34 = gJChronology29.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.yearOfCentury();
        org.joda.time.DurationField durationField36 = dateTimeField35.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = property52.setCopy((int) (short) 100);
        org.joda.time.DateTime dateTime56 = property52.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        java.util.Locale locale59 = new java.util.Locale("fr");
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale61.getDisplayVariant(locale63);
        java.lang.String str66 = locale59.getDisplayScript(locale63);
        java.lang.String str67 = locale63.getDisplayCountry();
        int int68 = property52.getMaximumShortTextLength(locale63);
        org.joda.time.DateTime dateTime69 = property52.withMaximumValue();
        java.lang.String str70 = property52.getName();
        org.joda.time.DateTime dateTime71 = property52.roundCeilingCopy();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Italy" + "'", str67, "Italy");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "millisOfDay" + "'", str70, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        org.joda.time.DurationField durationField41 = chronology33.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime25.toMutableDateTime(chronology33);
        int int43 = dateTime25.getWeekOfWeekyear();
        java.util.Date date44 = dateTime25.toDate();
        org.joda.time.DateTime dateTime45 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((-1));
        org.joda.time.DateTime dateTime49 = dateTime47.minusYears(2134);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime47.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 06:25:03 GMT-01:00 2022");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology13.getZone();
        org.joda.time.DurationField durationField26 = gJChronology13.minutes();
        org.joda.time.DurationField durationField27 = gJChronology13.weekyears();
        org.joda.time.DurationField durationField28 = gJChronology13.minutes();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMaximumValue();
        java.lang.String str17 = property14.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hourOfDay" + "'", str17, "hourOfDay");
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime21.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        boolean boolean71 = localDateTime21.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime21.minusSeconds(480);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime73.getFieldType(26445602);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26445602");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        java.lang.String str14 = dateTimeZone6.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime24.getFields();
        boolean boolean33 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        java.util.TimeZone timeZone34 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond(49);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey(100L);
        long long48 = dateTimeZone44.nextTransition((long) (short) 0);
        int int50 = dateTimeZone44.getStandardOffset(36070100L);
        java.lang.String str52 = dateTimeZone44.getName(10800001L);
        org.joda.time.DateTime dateTime53 = dateTime35.toDateTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime35.withZone(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385 + "'", int28 == 385);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str30, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-01:00" + "'", str52, "-01:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getDisplayVariant(locale25);
        int int28 = property22.getMaximumShortTextLength(locale23);
        java.lang.String str29 = locale23.getLanguage();
        java.lang.String str30 = dateTimeField15.getAsShortText(513, locale23);
        long long32 = dateTimeField15.roundCeiling(3392380432L);
        java.lang.String str34 = dateTimeField15.getAsText(1645514570242L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "513" + "'", str30, "513");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3392381000L + "'", long32 == 3392381000L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22970" + "'", str34, "22970");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        boolean boolean10 = dateTimeField7.isLeap((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        org.joda.time.DurationField durationField30 = chronology22.hours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) '4');
        org.joda.time.DurationField durationField44 = chronology36.hours();
        int int45 = durationField30.compareTo(durationField44);
        long long48 = durationField30.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType49 = durationField30.getType();
        boolean boolean50 = localDateTime16.isSupported(durationFieldType49);
        int[] intArray55 = new int[] { (short) 0, 'u', '#', (byte) 100 };
        int int56 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16, intArray55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime16.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        boolean boolean63 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusMillis(18);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusYears(22685127);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 117, 35, 100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2922789 + "'", int56 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.clockhourOfDay();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.lang.String str21 = timeZone20.getID();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.lang.String str23 = timeZone22.getID();
        int int25 = timeZone22.getOffset(0L);
        timeZone22.setID("2022-02-22T07:16:14.947Z");
        boolean boolean28 = timeZone20.hasSameRules(timeZone22);
        int int29 = timeZone20.getRawOffset();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) int29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT-01:00" + "'", str21, "GMT-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT-01:00" + "'", str23, "GMT-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        java.lang.String str14 = dateTimeZone6.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime24.getFields();
        boolean boolean33 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        int int36 = mutableDateTime34.getSecondOfDay();
        java.lang.Object obj37 = mutableDateTime34.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385 + "'", int28 == 385);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str30, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23103 + "'", int36 == 23103);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "2022-02-22T06:25:03.319-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "2022-02-22T06:25:03.319-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "2022-02-22T06:25:03.319-01:00");
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.property(dateTimeFieldType11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime2.add(readableDuration15, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime2.add(readablePeriod18, 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime2.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.DurationField durationField33 = julianChronology32.weeks();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology44);
        long long47 = julianChronology32.set((org.joda.time.ReadablePartial) localDateTime45, (long) 100);
        org.joda.time.DurationField durationField48 = julianChronology32.years();
        org.joda.time.DurationField durationField49 = julianChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology32.millisOfDay();
        org.joda.time.DurationField durationField52 = julianChronology32.millis();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology32.millisOfSecond();
        mutableDateTime2.setRounding(dateTimeField53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property58.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readablePeriod61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        mutableDateTime67.setZone(dateTimeZone68);
        int int70 = mutableDateTime67.getMinuteOfDay();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        mutableDateTime73.setZone(dateTimeZone74);
        org.joda.time.Chronology chronology76 = mutableDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfCentury();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.minus(readablePeriod79);
        int int81 = mutableDateTime67.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = localDateTime64.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime82.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.yearOfCentury();
        mutableDateTime83.addDays(3043);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime83.dayOfYear();
        int int88 = mutableDateTime83.getYearOfEra();
        boolean boolean90 = mutableDateTime83.isBefore(240097L);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime83);
        int int92 = mutableDateTime83.getMinuteOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514703337L + "'", long47 == 1645514703337L);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1380 + "'", int70 == 1380);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1380 + "'", int92 == 1380);
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = julianChronology11.days();
        org.joda.time.DurationField durationField16 = julianChronology11.years();
        org.joda.time.DurationField durationField17 = julianChronology11.halfdays();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-19L), (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey(100L);
        long long31 = dateTimeZone27.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(1645514171263L, (org.joda.time.Chronology) gJChronology32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(100L);
        int int40 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = property46.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTime dateTime50 = dateTime35.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds(20);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readableDuration53);
        java.util.Locale locale57 = new java.util.Locale("2022-02-22T06:14:55.025-01:04");
        java.lang.String str58 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime52, 26212427, locale57);
        int int59 = dateTimeField19.getMaximumShortTextLength(locale57);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertEquals(locale57.toString(), "2022-02-22t06:14:55.025-01:04");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "26212427" + "'", str58, "26212427");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        java.lang.String str7 = dateTime6.toString();
        int int8 = dateTime6.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime6.withMonthOfYear((-18718));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -18718 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T22:59:59.999-01:00" + "'", str7, "1970-01-01T22:59:59.999-01:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(chronology32);
        org.joda.time.DateTime.Property property35 = dateTime34.secondOfMinute();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("weekyear");
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone(zoneId38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTime dateTime41 = dateTime34.toDateTime(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050703426L + "'", long21 == 1677050703426L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withDefaultYear(99);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withOffsetParsed();
        java.lang.Integer int25 = dateTimeFormatter22.getPivotYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32, (int) (short) 1);
        org.joda.time.DurationField durationField37 = julianChronology36.weeks();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 10);
        org.joda.time.Chronology chronology47 = julianChronology36.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter22.withZone(dateTimeZone44);
        int int50 = dateTimeZone44.getOffset(1677050246834L);
        boolean boolean52 = dateTimeZone44.isStandardOffset((long) 24);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter19.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.dayOfYear();
        mutableDateTime57.setDate((org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime57.setMonthOfYear((int) (byte) 1);
        mutableDateTime57.setMillisOfDay((int) 'x');
        mutableDateTime57.addYears((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(0L);
        boolean boolean74 = mutableDateTime57.equals((java.lang.Object) 0L);
        mutableDateTime57.setSecondOfMinute((int) '4');
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime57.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = dateTimeFormatter54.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime57, "1970-01-03T11:00:00.052+59:00", 873);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-01:00" + "'", str53, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        java.lang.String str69 = localDateTime67.toString();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusMillis(1);
        int int72 = localDateTime67.getYear();
        int int73 = localDateTime67.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime67.withMillisOfDay(444);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-02T10:00:00.056" + "'", str69, "1970-01-02T10:00:00.056");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.setMillisOfDay((int) 'x');
        mutableDateTime2.addYears((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L);
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) 0L);
        int int20 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.weekyear();
        long long22 = property21.remainder();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2086 + "'", int20 == 2086);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2678400120L + "'", long22 == 2678400120L);
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readablePeriod10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) ' ');
        org.joda.time.DateTime dateTime17 = dateTime13.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(23);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        int int21 = dateTime17.getWeekOfWeekyear();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology33.millisOfDay();
        org.joda.time.DurationField durationField37 = julianChronology33.centuries();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology33.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = dateTimeField38.getAsShortText((long) (byte) 10, locale40);
        java.util.Locale.Builder builder42 = builder22.setLocale(locale40);
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str47 = locale44.getExtension('u');
        java.lang.String str48 = locale40.getDisplayLanguage(locale44);
        java.util.Calendar calendar49 = dateTime17.toCalendar(locale40);
        java.util.Locale.setDefault(category0, locale40);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfCentury();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readablePeriod59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusDays((int) ' ');
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfCentury();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.lang.String str68 = locale66.getDisplayLanguage(locale67);
        java.lang.String str69 = property65.getAsText(locale67);
        java.util.Locale.setDefault(category0, locale67);
        java.util.Locale locale71 = java.util.Locale.getDefault(category0);
        java.util.Locale locale72 = java.util.Locale.getDefault(category0);
        java.util.Locale locale73 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "23" + "'", str41, "23");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514703509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=25,SECOND=3,MILLISECOND=509,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "52" + "'", str68, "52");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "22" + "'", str69, "22");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        int int12 = localDateTime10.getEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfMinute();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField16 = gJChronology11.months();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.year();
        java.lang.String str18 = gJChronology11.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[-01:00]" + "'", str18, "GJChronology[-01:00]");
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology15.getZone();
        long long24 = dateTimeZone22.previousTransition((long) 9);
        java.lang.String str26 = dateTimeZone22.getShortName(9L);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.year();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology39.centuryOfEra();
        org.joda.time.DurationField durationField47 = julianChronology39.months();
        long long50 = durationField47.getMillis(0L, 1645514379952L);
        org.joda.time.DurationFieldType durationFieldType51 = durationField47.getType();
        mutableDateTime27.add(durationFieldType51, 31535889);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-09T07:16:46.693+00:00:00.120");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(0);
        org.joda.time.DateTime dateTime15 = dateTime11.minusDays(26207);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(12);
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology1.era();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1677050192045L, (org.joda.time.Chronology) gJChronology1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology1.add(readablePeriod7, 1645514206573L, 364);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology1.millisOfSecond();
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514206573L + "'", long10 == 1645514206573L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DurationField durationField14 = gJChronology11.years();
        int int17 = durationField14.getValue((-179878319533841L), (long) 417);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-5700) + "'", int17 == (-5700));
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime27.plus(2022L);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        org.joda.time.DurationField durationField36 = property34.getRangeDurationField();
        org.joda.time.DateTime dateTime37 = property34.withMaximumValue();
        org.joda.time.DateTime dateTime38 = property34.roundFloorCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.plus(1677050259971L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.monthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale13 = new java.util.Locale("52", "minuteOfHour");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Locale.setDefault(locale13);
        java.lang.String str17 = locale13.getDisplayVariant();
        java.lang.String str18 = locale13.getDisplayVariant();
        java.lang.String str19 = locale13.getDisplayScript();
        java.lang.String str20 = locale13.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withLocale(locale13);
        java.io.Writer writer22 = null;
        java.lang.String[] strArray25 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.DurationField durationField39 = julianChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.weekOfWeekyear();
        org.joda.time.Chronology chronology41 = julianChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology38.weekOfWeekyear();
        boolean boolean43 = strSet26.contains((java.lang.Object) julianChronology38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        mutableDateTime46.setDate((org.joda.time.ReadableInstant) mutableDateTime52);
        mutableDateTime46.setMonthOfYear((int) (byte) 1);
        mutableDateTime46.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime46.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime46.setZone(dateTimeZone62);
        boolean boolean64 = strSet26.equals((java.lang.Object) mutableDateTime46);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime46.hourOfDay();
        int int66 = mutableDateTime46.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime46.copy();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime localDateTime73 = property71.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plus(readablePeriod74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int81 = localDateTime79.get(dateTimeFieldType80);
        int int82 = localDateTime77.indexOf(dateTimeFieldType80);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType80.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.chrono.JulianChronology julianChronology85 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType80.getField((org.joda.time.Chronology) julianChronology85);
        java.lang.String str87 = dateTimeFieldType80.toString();
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType80.getDurationType();
        int int89 = mutableDateTime46.get(dateTimeFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(writer22, (org.joda.time.ReadableInstant) mutableDateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertEquals(locale13.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "52 (MINUTEOFHOUR)" + "'", str20, "52 (MINUTEOFHOUR)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 82560001 + "'", int66 == 82560001);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 385 + "'", int81 == 385);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(julianChronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "minuteOfDay" + "'", str87, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1376 + "'", int89 == 1376);
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        long long30 = dateTimeZone24.convertUTCToLocal((long) 2022);
        long long32 = dateTimeZone24.previousTransition(1645514152918L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getDisplayVariant();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = nameProvider37.getName(locale38, "-0001-01-01T00:00:00.056", "UTC");
        java.lang.String str42 = locale35.getDisplayScript(locale38);
        java.lang.String str43 = dateTimeZone24.getName(536457600052L, locale35);
        java.lang.String str44 = locale35.getDisplayLanguage();
        java.lang.String str45 = dateTimeField16.getAsText(1645514334701L, locale35);
        boolean boolean47 = locale35.equals((java.lang.Object) 1645514269247L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3597978L) + "'", long30 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514152918L + "'", long32 == 1645514152918L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italian" + "'", str44, "Italian");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "18" + "'", str45, "18");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.minuteOfDay();
        mutableDateTime3.setMillis((long) 'x');
        mutableDateTime3.addMinutes(722);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str4, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        long long13 = dateTimeField11.remainder((-233434896180000L));
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField11.add((-231412082949850814L), 1645514247249L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514247249 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 15420000L + "'", long13 == 15420000L);
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime18.getFieldType(0);
        int[] intArray36 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime18, (long) 10);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology10.dayOfWeek();
        org.joda.time.DurationField durationField39 = julianChronology10.millis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1969, 12, 18, 82800010]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PM");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology7.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-3599120L), dateTimeZone11);
        boolean boolean13 = languageRange1.equals((java.lang.Object) localDateTime12);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "pm" + "'", str3, "pm");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField20 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(1677050149186L, dateTimeZone8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMonths(38152);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T06:25:03.813" + "'", str18, "2022-02-22T06:25:03.813");
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str5 = locale1.getExtension('x');
        java.lang.String str6 = locale1.getISO3Country();
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology18.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = julianChronology18.add(readablePeriod22, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology18.yearOfCentury();
        org.joda.time.DurationField durationField27 = julianChronology18.hours();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology18.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale30.getDisplayName();
        java.lang.String str33 = dateTimeField28.getAsShortText((long) 513, locale30);
        java.lang.String str34 = locale30.getScript();
        java.util.Locale.setDefault(category0, locale30);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English" + "'", str2, "English");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        boolean boolean12 = dateTimeFormatter10.isPrinter();
        java.util.Locale locale13 = dateTimeFormatter10.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter10.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant15 = org.joda.time.Instant.parse("DateTimeField[dayOfMonth]", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(dateTimeParser14);
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.era();
        org.joda.time.Chronology chronology82 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology10.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645514157380L, dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.Chronology chronology25 = gJChronology14.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DurationField durationField28 = gJChronology14.days();
        org.joda.time.Chronology chronology29 = gJChronology14.withUTC();
        org.joda.time.Chronology chronology30 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology14.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) 22844942, (org.joda.time.Chronology) gJChronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        java.lang.String str6 = dateTimeFieldType5.toString();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "era" + "'", str6, "era");
        org.junit.Assert.assertNull(durationFieldType7);
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Japanese");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        mutableDateTime7.addMinutes((int) (short) 1);
        mutableDateTime7.addMonths((-84125007));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.clockhourOfHalfday();
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str35 = dateTimeField29.getAsShortText((int) 'a', locale34);
        java.lang.String str36 = dateTimeZone13.getName((long) (short) 1, locale34);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.lang.String str39 = dateTimeZone13.getShortName(600L);
        java.lang.String str41 = dateTimeZone13.getShortName(1645514157380L);
        mutableDateTime7.setZoneRetainFields(dateTimeZone13);
        boolean boolean43 = languageRange1.equals((java.lang.Object) mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "japanese" + "'", str2, "japanese");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "97" + "'", str35, "97");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.120" + "'", str36, "+00:00:00.120");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.120" + "'", str39, "+00:00:00.120");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.120" + "'", str41, "+00:00:00.120");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusHours(600);
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.secondOfDay();
        boolean boolean18 = property10.equals((java.lang.Object) property17);
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfCeiling();
        int int20 = mutableDateTime19.getEra();
        mutableDateTime19.setMillisOfSecond((int) '#');
        mutableDateTime19.setSecondOfDay(625);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        int int30 = mutableDateTime27.getMinuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readablePeriod39);
        int int41 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.plus(readablePeriod42);
        org.joda.time.DateTime dateTime45 = dateTime40.plusYears(1);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property50 = dateTime45.property(dateTimeFieldType49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime19.property(dateTimeFieldType49);
        java.lang.String str52 = dateTimeFieldType49.getName();
        int int53 = localDateTime1.get(dateTimeFieldType49);
        int[] intArray54 = localDateTime1.getValues();
        org.joda.time.LocalDateTime.Property property55 = localDateTime1.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 385 + "'", int3 == 385);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1380 + "'", int30 == 1380);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1677050703926L + "'", long46 == 1677050703926L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "dayOfYear" + "'", str52, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53 + "'", int53 == 53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 22, 23103926]");
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        java.lang.String str6 = property5.getAsText();
        java.lang.String str7 = property5.getName();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology19.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 66, (org.joda.time.Chronology) julianChronology19);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundCeilingCopy();
        int int28 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYearOfCentury(82560);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82560 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        int int27 = mutableDateTime26.getRoundingMode();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.hourOfDay();
        java.lang.String str19 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekyear();
        boolean boolean22 = julianChronology10.equals((java.lang.Object) 1677050256342L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str19, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime37.hourOfDay();
        int int43 = dateTime37.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = dateTime37.toLocalDateTime();
        boolean boolean45 = property27.equals((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime localDateTime46 = property27.roundHalfCeilingCopy();
        long long47 = property27.remainder();
        org.joda.time.DurationField durationField48 = property27.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime49 = property27.withMaximumValue();
        int int50 = localDateTime49.getYear();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 601200100L + "'", long47 == 601200100L);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1999 + "'", int50 == 1999);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.DurationField durationField64 = julianChronology10.weeks();
        org.joda.time.DurationField durationField65 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology10.clockhourOfHalfday();
        boolean boolean71 = dateTimeField69.isLeap(1645514401151L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property14.setCopy(22844942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22844942 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        int int21 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        int int32 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.plus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime31.plusYears(1);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime41 = dateTime36.minusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime36.withPeriodAdded(readablePeriod42, 364);
        int int45 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1380 + "'", int21 == 1380);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1677050704068L + "'", long37 == 1677050704068L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(60);
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks(457087);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromDateFields(date13);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromDateFields(date13);
        boolean boolean17 = timeZone0.inDaylightTime(date13);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Dec 31 23:00:00 GMT-01:00 6068");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology11.minutes();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DurationField durationField16 = gJChronology11.seconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime.Property property69 = localDateTime21.era();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getDisplayVariant();
        org.joda.time.tz.NameProvider nameProvider72 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str76 = nameProvider72.getName(locale73, "-0001-01-01T00:00:00.056", "UTC");
        java.lang.String str77 = locale70.getDisplayScript(locale73);
        java.lang.String str78 = property69.getAsText(locale73);
        java.lang.String str79 = locale73.getISO3Language();
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder80.setRegion("IT");
        java.util.Locale.Builder builder83 = builder80.clear();
        java.util.Locale locale84 = builder80.build();
        java.lang.String str85 = locale73.getDisplayScript(locale84);
        java.util.Locale.setDefault(locale73);
        java.lang.String str87 = locale73.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(nameProvider72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u897f\u5143" + "'", str78, "\u897f\u5143");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "zho" + "'", str79, "zho");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u4e2d\u6587" + "'", str87, "\u4e2d\u6587");
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.withMillisOfSecond((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.withYear(22718322);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime1.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(100L);
        int int39 = localDateTime38.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        int int48 = mutableDateTime45.getMinuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readablePeriod57);
        int int59 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime58.plus(readablePeriod60);
        org.joda.time.DateTime dateTime63 = dateTime58.plusYears(1);
        org.joda.time.DateTime dateTime66 = dateTime58.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime67 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime68 = dateTime33.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfDay();
        boolean boolean70 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = dateTime68.withDayOfWeek(22654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22654 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1380 + "'", int48 == 1380);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition(974907L);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(obj0, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean11 = dateTimeZone9.isStandardOffset(1677050149186L);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int15 = dateTimeZone9.getOffset(1645517782563L);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (-61913980799900L));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 974907L + "'", long6 == 974907L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61913977199900L) + "'", long19 == (-61913977199900L));
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        org.joda.time.DurationField durationField41 = chronology33.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime25.toMutableDateTime(chronology33);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        java.lang.Object obj16 = null;
        boolean boolean17 = julianChronology10.equals(obj16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField20 = julianChronology10.weekyears();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime21.setSecondOfDay(508);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale6, locale8, locale10, locale11, locale14, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList18);
        boolean boolean21 = dateTime0.equals((java.lang.Object) languageRangeList4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap22);
        java.lang.String[] strArray26 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.DurationField durationField40 = julianChronology39.weeks();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.weekOfWeekyear();
        org.joda.time.Chronology chronology42 = julianChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.weekOfWeekyear();
        boolean boolean44 = strSet27.contains((java.lang.Object) julianChronology39);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap46);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IT" + "'", str7, "IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(0);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded(readableDuration19, 904);
        int int22 = dateTime18.getEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) '#');
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        java.lang.String str18 = property16.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "era" + "'", str18, "era");
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        int int5 = property3.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readableDuration7);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.secondOfMinute();
        boolean boolean7 = strSet1.remove((java.lang.Object) property6);
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology21.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfCeilingCopy();
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str33 = dateTimeFieldType32.toString();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        int int43 = dateTimeField42.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L);
        int int46 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime54);
        int[] intArray61 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int62 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55, intArray61);
        int[] intArray64 = dateTimeField25.addWrapField((org.joda.time.ReadablePartial) localDateTime30, 0, intArray61, 20);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) '4', chronology71);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutableDateTime75.add(readablePeriod76);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime75.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime79 = property78.roundCeiling();
        org.joda.time.DateTime dateTime80 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) mutableDateTime79);
        int int81 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime30.minusWeeks(2922789);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime30.minusDays(22770803);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "minuteOfHour" + "'", str33, "minuteOfHour");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(1, 22705733, 456590, 288, 26156026);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 288 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PM");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology12.year();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.dayOfWeek();
        org.joda.time.DurationField durationField20 = julianChronology12.halfdays();
        org.joda.time.DurationField durationField21 = julianChronology12.halfdays();
        boolean boolean22 = languageRange1.equals((java.lang.Object) julianChronology12);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        long long17 = dateTimeZone11.convertUTCToLocal((long) 2022);
        long long19 = dateTimeZone11.previousTransition(1645514152918L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.lang.String str21 = dateTimeZone11.toString();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(22674702, 549, 22650316, 86399362, 394, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399362 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3597978L) + "'", long17 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514152918L + "'", long19 == 1645514152918L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getExtension('a');
        int int19 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.DurationField durationField61 = chronology53.seconds();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime45.toMutableDateTime(chronology53);
        int int63 = property15.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime64 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = property68.addWrapFieldToCopy((int) '#');
        int[] intArray71 = localDateTime70.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime64, intArray71);
        org.joda.time.DateTimeField dateTimeField73 = julianChronology10.weekyearOfCentury();
        java.lang.String str74 = julianChronology10.toString();
        org.joda.time.DurationField durationField75 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(dateTimeField73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str74, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.clockhourOfHalfday();
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str23 = dateTimeField17.getAsShortText((int) 'a', locale22);
        java.lang.String str24 = dateTimeZone1.getName((long) (short) 1, locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) mutableDateTime33);
        mutableDateTime27.setMonthOfYear((int) (byte) 1);
        mutableDateTime27.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime27.yearOfCentury();
        int int41 = mutableDateTime27.getMinuteOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property56 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime57 = property56.withMaximumValue();
        mutableDateTime27.setTime((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = dateTimeZone1.equals((java.lang.Object) dateTime57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.util.TimeZone timeZone61 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.120" + "'", str24, "+00:00:00.120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1380 + "'", int41 == 1380);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        int int15 = property3.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime16 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property3.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime17.getValue(2089);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2089");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PM");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        java.lang.String str9 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "pm" + "'", str2, "pm");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "pm" + "'", str5, "pm");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "pm" + "'", str9, "pm");
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("70");
        int int3 = timeZone1.getOffset((-1510249326200L));
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey(100L);
        long long14 = dateTimeZone10.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.secondOfDay();
        org.joda.time.Instant instant17 = gJChronology15.getGregorianCutover();
        org.joda.time.Instant instant18 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Chronology chronology21 = gJChronology15.withZone(dateTimeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        boolean boolean23 = timeZone1.hasSameRules(timeZone22);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.secondOfDay();
        boolean boolean25 = property17.equals((java.lang.Object) property24);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        boolean boolean35 = gJChronology11.equals((java.lang.Object) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        boolean boolean39 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.Chronology chronology41 = gJChronology11.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMillis((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime49.minuteOfHour();
        long long55 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime49.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        org.joda.time.Chronology chronology59 = gJChronology11.withZone(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645514704562L + "'", long55 == 1645514704562L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        java.lang.String str22 = mutableDateTime21.toString();
        mutableDateTime21.setDate((long) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, (long) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime15.toDateTime(dateTimeZone39);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.getDisplayLanguage();
        java.lang.String str48 = locale46.getISO3Language();
        java.lang.String str50 = locale46.getExtension('x');
        java.lang.String str51 = locale46.getISO3Country();
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime55.getZone();
        java.lang.String str61 = dateTimeZone59.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology63);
        org.joda.time.DateTimeField dateTimeField65 = julianChronology63.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology63.millisOfDay();
        org.joda.time.DurationField durationField67 = julianChronology63.centuries();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology63.hourOfDay();
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = dateTimeField68.getAsShortText((long) (byte) 10, locale70);
        java.util.Locale.Builder builder72 = builder52.setLocale(locale70);
        java.lang.String str73 = locale70.getVariant();
        java.lang.String str74 = locale46.getDisplayLanguage(locale70);
        java.lang.String str75 = dateTimeZone39.getName((long) 625, locale46);
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.lang.String str79 = locale46.getDisplayName(locale77);
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleAttributes();
        strSet80.clear();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str22, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u82f1\u6587" + "'", str47, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(julianChronology63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "23" + "'", str71, "23");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English" + "'", str74, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "inglese" + "'", str79, "inglese");
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(1);
        int int8 = dateTimeFormatter7.getDefaultYear();
        boolean boolean9 = dateTimeFormatter7.isOffsetParsed();
        boolean boolean10 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        java.util.Locale locale14 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter13.getPrinter();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNull(dateTimePrinter15);
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.addMillis((int) '4');
        mutableDateTime2.addHours(26184569);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.year();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology39.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology39.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime27, (org.joda.time.Chronology) julianChronology39);
        int int48 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        boolean boolean49 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime47.add(589L);
        org.joda.time.DateTime dateTime52 = mutableDateTime47.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str11, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        long long32 = dateTimeZone20.getMillisKeepLocal(dateTimeZone28, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        long long38 = dateTimeZone20.getMillisKeepLocal(dateTimeZone35, (long) 'a');
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 10800);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeFormatter42.parseMillis("\ub300\ub9cc");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str11, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 240097L + "'", long38 == 240097L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology10.days();
        long long18 = julianChronology10.add(979430400000L, (long) 671, 20);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField22 = julianChronology10.millis();
        long long24 = durationField22.getMillis(1968);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 979430413420L + "'", long18 == 979430413420L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1968L + "'", long24 == 1968L);
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(904);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        java.lang.String str14 = dateTimeZone8.getName((long) 3043);
        long long16 = dateTimeZone8.convertUTCToLocal(1645514206955L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 13714453725377394L);
        long long22 = dateTimeZone8.convertLocalToUTC((long) 353, false, 3155760060000L);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        int int25 = dateTimeZone8.getOffset(1645514457475L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645510606955L + "'", long16 == 1645510606955L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 13714453728978298L + "'", long18 == 13714453728978298L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3600353L + "'", long22 == 3600353L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        java.lang.String str14 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField17 = julianChronology10.millis();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str14, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645514157380L, dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology14.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(1645514156466L, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) ' ');
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.hourOfDay();
        int[] intArray28 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime24, 1645514164504L);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 9, 22564504]");
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology27.clockhourOfHalfday();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str36 = dateTimeField30.getAsShortText((int) 'a', locale35);
        java.lang.String str37 = dateTimeZone14.getName((long) (short) 1, locale35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) mutableDateTime46);
        mutableDateTime40.setMonthOfYear((int) (byte) 1);
        mutableDateTime40.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime40.yearOfCentury();
        int int54 = mutableDateTime40.getMinuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readablePeriod63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime68 = dateTime64.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property69 = dateTime64.hourOfDay();
        org.joda.time.DateTime dateTime70 = property69.withMaximumValue();
        mutableDateTime40.setTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = dateTimeZone14.equals((java.lang.Object) dateTime70);
        org.joda.time.Chronology chronology73 = julianChronology10.withZone(dateTimeZone14);
        long long75 = dateTimeZone14.nextTransition((long) 22684553);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.120" + "'", str37, "+00:00:00.120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1380 + "'", int54 == 1380);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 22684553L + "'", long75 == 22684553L);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        long long48 = julianChronology26.set((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        long long61 = chronology54.set((org.joda.time.ReadablePartial) localDateTime59, (long) '4');
        org.joda.time.DurationField durationField62 = chronology54.hours();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone72);
        long long75 = chronology68.set((org.joda.time.ReadablePartial) localDateTime73, (long) '4');
        org.joda.time.DurationField durationField76 = chronology68.hours();
        int int77 = durationField62.compareTo(durationField76);
        long long80 = durationField62.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType81 = durationField62.getType();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime37.withFieldAdded(durationFieldType81, (int) '#');
        org.joda.time.LocalDateTime.Property property84 = localDateTime37.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getDurationType();
        boolean boolean87 = localDateTime37.isSupported(dateTimeFieldType85);
        int int88 = dateTime15.get(dateTimeFieldType85);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.DateTime dateTime91 = dateTime15.withPeriodAdded(readablePeriod89, (int) (byte) 10);
        org.joda.time.DateTime dateTime93 = dateTime91.minusMillis(0);
        long long94 = dateTime91.getMillis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514704789L + "'", long13 == 1645514704789L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1123200056L + "'", long48 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 52L + "'", long80 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645514404789L + "'", long94 == 1645514404789L);
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long14 = dateTimeZone6.previousTransition(1645514152918L);
        java.lang.String str16 = dateTimeZone6.getNameKey(3600000L);
        java.lang.String str18 = dateTimeZone6.getNameKey((long) 31535889);
        boolean boolean20 = dateTimeZone6.isStandardOffset(1678697132228050L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, 1645514547473L, 908);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 908");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514152918L + "'", long14 == 1645514152918L);
// flaky:         org.junit.Assert.assertNull(str16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology11.getZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology17.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(1677050334065L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.millisOfSecond();
        org.joda.time.Chronology chronology22 = gJChronology17.withUTC();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTime dateTime25 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (byte) 1);
        boolean boolean29 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths(671);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, 2);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime50.plusMonths((int) 'a');
        boolean boolean61 = dateTime50.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plus(readablePeriod68);
        org.joda.time.DateTime dateTime70 = localDateTime67.toDateTime();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withDurationAdded(readableDuration71, 20);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = property77.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plus(readablePeriod80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int87 = localDateTime85.get(dateTimeFieldType86);
        int int88 = localDateTime83.indexOf(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType86.getDurationType();
        int int90 = localDateTime67.get(dateTimeFieldType86);
        boolean boolean91 = dateTime50.isSupported(dateTimeFieldType86);
        int int92 = localDateTime31.get(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 385 + "'", int87 == 385);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1380 + "'", int90 == 1380);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1380 + "'", int92 == 1380);
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey(100L);
        long long17 = dateTimeZone13.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.weekyear();
        org.joda.time.DurationField durationField20 = gJChronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.secondOfMinute();
        org.joda.time.Chronology chronology22 = gJChronology18.withUTC();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = gJChronology18.add(readablePeriod23, (long) 220, 51);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((int) 'a', 0, 352, 495, 439, 3043, 22760, (org.joda.time.Chronology) gJChronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 495 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 220L + "'", long26 == 220L);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22496058, (-5599492), 188, 66174001, 379, 45708722, 22316026);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66174001 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfHour();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.hourOfDay();
        int int20 = dateTimeField17.getDifference((long) 26414201, 1645892206955L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-457184) + "'", int20 == (-457184));
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime11.withDayOfMonth(1);
        org.joda.time.DateTime dateTime19 = dateTime11.plus(1645518022331L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) '4', chronology26);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.millisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey(100L);
        long long42 = dateTimeZone38.nextTransition((long) (short) 0);
        int int44 = dateTimeZone38.getStandardOffset(36070100L);
        org.joda.time.DateTime dateTime45 = mutableDateTime30.toDateTime(dateTimeZone38);
        mutableDateTime30.addYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfCeilingCopy();
        int int53 = localDateTime52.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str55 = dateTimeFieldType54.toString();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.property(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType57.getDurationType();
        int int60 = mutableDateTime30.get(dateTimeFieldType57);
        boolean boolean61 = dateTime19.isSupported(dateTimeFieldType57);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.era();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        long long70 = gJChronology62.add(1645514212526L, (long) 26189286, 22674088);
        org.joda.time.DurationField durationField71 = gJChronology62.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFieldType57, (org.joda.time.Chronology) gJChronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3600000) + "'", int44 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "minuteOfHour" + "'", str55, "minuteOfHour");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(gJChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 595463689633694L + "'", long70 == 595463689633694L);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = julianChronology11.seconds();
        int int15 = julianChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField16 = julianChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setRegion("IT");
        java.util.Locale.Builder builder22 = builder18.setLanguage("");
        java.util.Locale.Builder builder23 = builder18.clear();
        boolean boolean24 = julianChronology11.equals((java.lang.Object) builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) (short) -1);
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((-1));
        int int37 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        long long39 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime36, 1645514184130L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.secondOfDay();
        boolean boolean51 = property43.equals((java.lang.Object) property50);
        org.joda.time.LocalDateTime localDateTime53 = property43.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withWeekyear(22);
        boolean boolean56 = localDateTime36.isEqual((org.joda.time.ReadablePartial) localDateTime53);
        int int57 = localDateTime53.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1646119505061L + "'", long39 == 1646119505061L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 82802074 + "'", int57 == 82802074);
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.clockhourOfHalfday();
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale27.getISO3Language();
        java.lang.String str31 = locale27.getExtension('x');
        java.lang.String str32 = locale27.getISO3Country();
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale34.getDisplayVariant(locale36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale43.getExtension('a');
        int int46 = property42.getMaximumShortTextLength(locale43);
        java.lang.String str47 = locale43.getISO3Country();
        java.lang.String str48 = locale36.getDisplayVariant(locale43);
        java.util.Locale.setDefault(category26, locale36);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime52.getZone();
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.dayOfYear();
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale63.getISO3Language();
        java.lang.String str67 = locale63.getExtension('x');
        java.lang.String str68 = locale63.getISO3Country();
        java.util.Locale.setDefault(category62, locale63);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale70.getDisplayVariant(locale72);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str81 = locale79.getExtension('a');
        int int82 = property78.getMaximumShortTextLength(locale79);
        java.lang.String str83 = locale79.getISO3Country();
        java.lang.String str84 = locale72.getDisplayVariant(locale79);
        java.util.Locale.setDefault(category62, locale72);
        int int86 = dateTimeField61.getMaximumShortTextLength(locale72);
        java.util.Locale.setDefault(category26, locale72);
        int int88 = dateTimeField25.getMaximumTextLength(locale72);
        java.util.Set<java.lang.String> strSet89 = locale72.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u82f1\u6587" + "'", str28, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u82f1\u6587" + "'", str64, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfDay();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime14 = property11.add(3043);
        boolean boolean15 = property11.isLeap();
        org.joda.time.MutableDateTime mutableDateTime16 = property11.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(100L);
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime19.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusYears(540);
        int int36 = localDateTime31.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withSecondOfMinute(23);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean47 = dateTime45.isSupported(dateTimeFieldType46);
        java.lang.String str48 = dateTimeFieldType46.toString();
        java.lang.String str49 = dateTimeFieldType46.toString();
        boolean boolean50 = localDateTime31.isSupported(dateTimeFieldType46);
        int int51 = mutableDateTime17.get(dateTimeFieldType46);
        java.lang.Object obj52 = mutableDateTime17.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "minuteOfDay" + "'", str48, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minuteOfDay" + "'", str49, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1430 + "'", int51 == 1430);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1969-12-31T23:50:44.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1969-12-31T23:50:44.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1969-12-31T23:50:44.000-01:00");
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField14 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        long long5 = dateTimeZone0.convertLocalToUTC((-84125007375L), false, 20110100L);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime9.setMonthOfYear((int) (byte) 1);
        mutableDateTime9.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.yearOfCentury();
        int int23 = mutableDateTime9.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime52.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfCentury();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.roundHalfEven();
        mutableDateTime56.setHourOfDay(1);
        int int59 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime62.getZone();
        java.lang.String str68 = dateTimeZone66.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone66, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField71 = julianChronology70.dayOfYear();
        org.joda.time.DateTimeField dateTimeField72 = julianChronology70.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology70.yearOfEra();
        int int74 = dateTimeField73.getMaximumValue();
        mutableDateTime9.setRounding(dateTimeField73);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        mutableDateTime79.setZone(dateTimeZone80);
        org.joda.time.Chronology chronology82 = mutableDateTime79.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = mutableDateTime79.getZone();
        java.lang.String str85 = dateTimeZone83.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology87 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone83, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime88 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology87);
        org.joda.time.DateTimeField dateTimeField89 = julianChronology87.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology87.millisOfDay();
        org.joda.time.DateTimeField dateTimeField91 = julianChronology87.minuteOfDay();
        org.joda.time.DurationField durationField92 = julianChronology87.days();
        org.joda.time.DateTimeField dateTimeField93 = julianChronology87.secondOfDay();
        org.joda.time.DateTimeField dateTimeField94 = julianChronology87.dayOfWeek();
        org.joda.time.DurationField durationField95 = julianChronology87.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime((java.lang.Object) gJChronology76, (org.joda.time.Chronology) julianChronology87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GJChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-84125007375L) + "'", long5 == (-84125007375L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1380 + "'", int23 == 1380);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(julianChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292272992 + "'", int74 == 292272992);
        org.junit.Assert.assertNotNull(gJChronology76);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(julianChronology87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = localDateTime20.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.secondOfDay();
        boolean boolean37 = property29.equals((java.lang.Object) property36);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra(435);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMonths(26159301);
        org.joda.time.DateTime dateTime46 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = gJChronology47.add(readablePeriod48, (-7279199901L), 13);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.secondOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-7279199901L) + "'", long51 == (-7279199901L));
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = julianChronology10.millis();
        org.joda.time.DurationField durationField17 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField20 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        boolean boolean5 = property3.isLeap();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        int int7 = property3.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundHalfEvenCopy();
        int int9 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField17 = julianChronology10.centuries();
        org.joda.time.DurationField durationField18 = julianChronology10.eras();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField43 = julianChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology26.weekyear();
        int int47 = dateTimeField45.getMaximumValue((long) 22830168);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292272992 + "'", int47 == 292272992);
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setSecondOfDay(436);
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar11 = mutableDateTime2.toCalendar(locale9);
        mutableDateTime2.addMillis(10);
        mutableDateTime2.setMillisOfDay(83982);
        java.util.Date date16 = mutableDateTime2.toDate();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-82363999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=7,SECOND=16,MILLISECOND=1,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 00:01:23 GMT-01:00 1969");
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField12 = gJChronology11.days();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addWrapFieldToCopy((int) '#');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusDays(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withHourOfDay(0);
        int int24 = localDateTime23.getDayOfWeek();
        long long26 = gJChronology11.set((org.joda.time.ReadablePartial) localDateTime23, (long) 625);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology11.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = gJChronology11.add(0L, 1645532214436L, 45708722);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645532214436 * 45708722");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-82799913L) + "'", long26 == (-82799913L));
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DurationField durationField14 = gJChronology11.millis();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        int int21 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        int int32 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime31.plus((-61062681599999L));
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.DateTime dateTime36 = property35.getDateTime();
        java.lang.String str37 = property35.toString();
        boolean boolean38 = gJChronology11.equals((java.lang.Object) property35);
        org.joda.time.DurationField durationField39 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology11.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1380 + "'", int21 == 1380);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[dayOfMonth]" + "'", str37, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology19 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField20 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime13.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTime dateTime25 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (byte) 1);
        boolean boolean29 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(100L);
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withPeriodAdded(readablePeriod52, (int) (short) 100);
        long long56 = chronology44.set((org.joda.time.ReadablePartial) localDateTime48, (long) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime37.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.withDurationAdded(readableDuration58, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readableDuration61);
        boolean boolean63 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime5.plusMillis(292272992);
        org.joda.time.LocalDateTime.Property property66 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime.Property property67 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = property67.addToCopy(66202926);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology23.millisOfDay();
        long long28 = dateTimeField26.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField26.getType();
        int int30 = dateTime9.get(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        int int45 = localDateTime40.indexOf(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        org.joda.time.DateTimeField dateTimeField59 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType43.getField(chronology51);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey(100L);
        long long71 = dateTimeZone67.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.secondOfDay();
        int int74 = gJChronology72.getMinimumDaysInFirstWeek();
        boolean boolean75 = dateTimeFieldType43.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DurationField durationField76 = gJChronology72.weekyears();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType29.getField((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology72.clockhourOfHalfday();
        org.joda.time.DurationField durationField80 = gJChronology72.minutes();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(1677054228403L, (org.joda.time.Chronology) gJChronology72);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 23L + "'", long28 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23105487 + "'", int30 == 23105487);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 385 + "'", int44 == 385);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.era();
        org.joda.time.Chronology chronology82 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField83 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField86 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology10.minuteOfHour();
        int int88 = dateTimeField87.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey(100L);
        long long17 = dateTimeZone13.nextTransition((long) (short) 0);
        int int19 = dateTimeZone13.getOffsetFromLocal(23L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        long long22 = dateTimeZone13.nextTransition(1646982992454L);
        boolean boolean23 = dateTimeZone13.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(600, 457375, 86399362, 633, 66171450, 999, 69, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 633 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3600000) + "'", int19 == (-3600000));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1646982992454L + "'", long22 == 1646982992454L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField20 = julianChronology10.years();
        org.joda.time.DurationField durationField21 = julianChronology10.centuries();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology33.dayOfYear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey(100L);
        org.joda.time.Chronology chronology44 = julianChronology33.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology33.minuteOfDay();
        long long51 = julianChronology33.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField52 = julianChronology33.clockhourOfHalfday();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime55.getZone();
        java.lang.String str61 = dateTimeZone59.getNameKey(100L);
        long long63 = dateTimeZone59.nextTransition((long) (short) 0);
        int int65 = dateTimeZone59.getStandardOffset(36070100L);
        java.lang.String str67 = dateTimeZone59.getName(10800001L);
        org.joda.time.Chronology chronology68 = julianChronology33.withZone(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(1677050192045L, dateTimeZone59);
        long long71 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime69, 1645514543407L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-46729900L) + "'", long51 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3600000) + "'", int65 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-01:00" + "'", str67, "-01:00");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1678173392045L + "'", long71 == 1678173392045L);
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime37.hourOfDay();
        int int43 = dateTime37.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = dateTime37.toLocalDateTime();
        boolean boolean45 = property27.equals((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.plusWeeks((-18718));
        int int49 = localDateTime48.getMillisOfSecond();
        int int50 = localDateTime48.getYearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 598 + "'", int49 == 598);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 63 + "'", int50 == 63);
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645514173601L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.year();
        org.joda.time.DurationField durationField33 = julianChronology28.weekyears();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DurationField durationField35 = julianChronology28.centuries();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) 1645514173601L, (org.joda.time.Chronology) julianChronology28);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        int int42 = mutableDateTime39.getMinuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readablePeriod51);
        int int53 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime52.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime52);
        org.joda.time.DateTime dateTime58 = dateTime52.plusMillis(6);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime52.getZone();
        org.joda.time.Chronology chronology60 = julianChronology28.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology28.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1380 + "'", int42 == 1380);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = localDateTime3.getField(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((-212380955L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((-1));
        int int19 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int20 = localDateTime3.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime20.withWeekyear((-1));
        org.joda.time.LocalDateTime.Property property80 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property81 = localDateTime20.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = property81.setCopy("GJChronology[+00:00:00.120]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GJChronology[+00:00:00.120]\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.lang.String str3 = timeZone2.getID();
        int int5 = timeZone2.getOffset(0L);
        timeZone2.setID("2022-02-22T07:16:14.947Z");
        boolean boolean8 = timeZone0.hasSameRules(timeZone2);
        int int10 = timeZone0.getOffset(20L);
        timeZone0.setID("\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str17 = locale13.getExtension('x');
        java.lang.String str18 = locale13.getISO3Country();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology30);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology30.millisOfDay();
        org.joda.time.DurationField durationField34 = julianChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.hourOfDay();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = dateTimeField35.getAsShortText((long) (byte) 10, locale37);
        java.util.Locale.Builder builder39 = builder19.setLocale(locale37);
        java.lang.String str40 = locale37.getVariant();
        java.lang.String str41 = locale13.getDisplayLanguage(locale37);
        java.lang.String str42 = timeZone0.getDisplayName(locale37);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT-01:00" + "'", str1, "GMT-01:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT-01:00" + "'", str3, "GMT-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u82f1\u6587" + "'", str14, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "23" + "'", str38, "23");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT-01:00" + "'", str42, "GMT-01:00");
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("English");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime17.withDurationAdded(1L, 292278993);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plus((long) 'x');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundCeilingCopy();
        boolean boolean30 = dateTime17.equals((java.lang.Object) dateTime29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime17.withPeriodAdded(readablePeriod31, 26444414);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        boolean boolean13 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime10);
        int int14 = mutableDateTime10.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.hourOfDay();
        mutableDateTime10.setMillisOfDay(159);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L);
        int int28 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withPeriodAdded(readablePeriod31, (int) (short) 100);
        long long35 = chronology23.set((org.joda.time.ReadablePartial) localDateTime27, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.minusMillis(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        java.lang.String str42 = mutableDateTime41.toString();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.dayOfMonth();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        java.lang.String str55 = dateTimeZone51.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone51);
        mutableDateTime41.setZone(dateTimeZone51);
        org.joda.time.DateTime dateTime59 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean60 = mutableDateTime10.isEqual((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = dateTimeFormatter63.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter63.getParser();
        boolean boolean66 = dateTimeFormatter63.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter63.withDefaultYear(1);
        int int69 = dateTimeFormatter68.getDefaultYear();
        java.lang.String[] strArray72 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        mutableDateTime77.setZone(dateTimeZone78);
        org.joda.time.Chronology chronology80 = mutableDateTime77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = mutableDateTime77.getZone();
        java.lang.String str83 = dateTimeZone81.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology85 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone81, (int) (short) 1);
        org.joda.time.DurationField durationField86 = julianChronology85.weeks();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology85.weekOfWeekyear();
        org.joda.time.Chronology chronology88 = julianChronology85.withUTC();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology85.weekOfWeekyear();
        boolean boolean90 = strSet73.contains((java.lang.Object) julianChronology85);
        org.joda.time.DateTimeField dateTimeField91 = julianChronology85.minuteOfHour();
        org.joda.time.DurationField durationField92 = julianChronology85.months();
        org.joda.time.DateTimeField dateTimeField93 = julianChronology85.halfdayOfDay();
        org.joda.time.DurationField durationField94 = julianChronology85.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter68.withChronology((org.joda.time.Chronology) julianChronology85);
        boolean boolean96 = dateTimeFormatter68.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = mutableDateTime10.toString(dateTimeFormatter68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str42, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(dateTimePrinter64);
        org.junit.Assert.assertNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
// flaky:         org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(julianChronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        long long26 = dateTimeZone22.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfDay();
        org.joda.time.Instant instant29 = gJChronology27.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.Instant instant32 = gJChronology30.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.secondOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(21852061483L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology30.year();
        org.joda.time.DurationField durationField37 = gJChronology30.days();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey(100L);
        long long48 = dateTimeZone44.nextTransition((long) (short) 0);
        int int50 = dateTimeZone44.getStandardOffset(36070100L);
        java.lang.String str52 = dateTimeZone44.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.Chronology chronology54 = gJChronology30.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology30.millisOfDay();
        int int57 = dateTimeField55.get(19045L);
        org.joda.time.DurationField durationField58 = dateTimeField55.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-01:00" + "'", str52, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 82819045 + "'", int57 == 82819045);
        org.junit.Assert.assertNull(durationField58);
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26178679);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1645514653191L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 26397219, dateTimeZone1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        org.joda.time.Chronology chronology25 = julianChronology14.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology14.centuryOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(1646551063510L, (org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology14.dayOfWeek();
        long long31 = dateTimeField28.getDifferenceAsLong(1645514262801L, 1677050288513L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setRounding(dateTimeField28, 292272992);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 292272992");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-365L) + "'", long31 == (-365L));
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.hourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology23.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone30.convertLocalToUTC((long) 2, true, 1645514173601L);
        org.joda.time.Chronology chronology35 = julianChronology23.withZone(dateTimeZone30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        long long48 = dateTimeZone42.convertUTCToLocal((long) 2022);
        long long50 = dateTimeZone30.getMillisKeepLocal(dateTimeZone42, 2022L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) julianChronology10, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.JulianChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3597978L) + "'", long48 == (-3597978L));
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3602022L + "'", long50 == 3602022L);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(1677049200000L);
        mutableDateTime36.addMillis(26226805);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey(100L);
        long long49 = dateTimeZone45.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.secondOfDay();
        boolean boolean64 = property56.equals((java.lang.Object) property63);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plus(readablePeriod69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.weekOfWeekyear();
        boolean boolean74 = gJChronology50.equals((java.lang.Object) localDateTime70);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        boolean boolean78 = dateTimeZone76.isLocalDateTimeGap(localDateTime77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        org.joda.time.Chronology chronology80 = gJChronology50.withZone(dateTimeZone76);
        mutableDateTime36.setZoneRetainFields(dateTimeZone76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter34.withZone(dateTimeZone76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter34.withOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514705848L + "'", long29 == 1645514705848L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(gJChronology79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField21 = julianChronology10.millis();
        long long24 = durationField21.getDifferenceAsLong(1645514213045L, 52L);
        long long27 = durationField21.subtract(1645514392663L, 0L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514212993L + "'", long24 == 1645514212993L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514392663L + "'", long27 == 1645514392663L);
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(82560001);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy(26402873);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime28.getFields();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.plus(readablePeriod47);
        org.joda.time.DateTime dateTime49 = dateTime45.withEarlierOffsetAtOverlap();
        boolean boolean51 = dateTime49.isBefore((long) 'a');
        org.joda.time.DateTime dateTime53 = dateTime49.plusYears(2000);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime57.getZone();
        java.lang.String str63 = dateTimeZone61.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61, (int) (short) 1);
        org.joda.time.DurationField durationField66 = julianChronology65.weeks();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology65.weekOfWeekyear();
        org.joda.time.DurationField durationField68 = julianChronology65.seconds();
        int int69 = julianChronology65.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField70 = julianChronology65.seconds();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType54.getField((org.joda.time.Chronology) julianChronology65);
        int int72 = dateTime49.get(dateTimeFieldType54);
        boolean boolean73 = localDateTime28.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean78 = dateTimeZone76.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) 86399999, dateTimeZone76);
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        org.joda.time.Chronology chronology82 = gJChronology81.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology81.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology81.yearOfCentury();
        java.lang.Object obj85 = null;
        boolean boolean86 = gJChronology81.equals(obj85);
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType54.getField((org.joda.time.Chronology) gJChronology81);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 23105 + "'", int72 == 23105);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(gJChronology81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(22812, 0, 0, 9, 22662802, 66399365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22662802 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology11.millis();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField17 = julianChronology11.millis();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        java.lang.String str17 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.era();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str17, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) 26159301);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        timeZone7.setRawOffset(365);
        timeZone7.setRawOffset(491);
        java.time.ZoneId zoneId12 = timeZone7.toZoneId();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId12);
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        java.time.ZoneId zoneId10 = timeZone9.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        int int14 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((int) (byte) 1);
        int int17 = localDateTime11.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy((int) '#');
        int[] intArray24 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusDays(0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        org.joda.time.DurationField durationField40 = chronology32.hours();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone50);
        long long53 = chronology46.set((org.joda.time.ReadablePartial) localDateTime51, (long) '4');
        org.joda.time.DurationField durationField54 = chronology46.hours();
        int int55 = durationField40.compareTo(durationField54);
        long long58 = durationField54.getValueAsLong((long) 4, 1645514152918L);
        int int60 = durationField54.getValue((long) 12);
        org.joda.time.DurationFieldType durationFieldType61 = durationField54.getType();
        boolean boolean62 = localDateTime23.isSupported(durationFieldType61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime23.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime71 = localDateTime70.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean73 = dateTime71.isSupported(dateTimeFieldType72);
        java.lang.String str74 = dateTimeFieldType72.toString();
        org.joda.time.LocalDateTime.Property property75 = localDateTime64.property(dateTimeFieldType72);
        boolean boolean76 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime64.withYearOfEra(22702127);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 29 + "'", int14 == 29);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 29 + "'", int17 == 29);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "minuteOfDay" + "'", str74, "minuteOfDay");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (short) -1);
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((-1));
        int int28 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100L);
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.era();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime.Property property46 = dateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = dateTime8.toLocalDateTime();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1645514155575L);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = julianChronology14.add(readablePeriod18, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology14.minuteOfDay();
        mutableDateTime2.setRounding(dateTimeField23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = julianChronology35.seconds();
        int int39 = julianChronology35.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField40 = julianChronology35.weekyears();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = julianChronology35.add(readablePeriod41, (long) 3, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone45 = julianChronology35.getZone();
        long long48 = dateTimeZone45.adjustOffset((long) 8, false);
        mutableDateTime2.setZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime52.getZone();
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.dayOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime64.getZone();
        java.lang.String str70 = dateTimeZone68.getNameKey(100L);
        org.joda.time.Chronology chronology71 = julianChronology60.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField72 = julianChronology60.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone73 = julianChronology60.getZone();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        mutableDateTime78.setZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime78.getZone();
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 10);
        java.lang.String str86 = dateTimeZone82.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime87 = org.joda.time.MutableDateTime.now(dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime(1677050149186L, dateTimeZone82);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(dateTimeZone82);
        org.joda.time.Chronology chronology92 = julianChronology60.withZone(dateTimeZone82);
        long long94 = dateTimeZone82.nextTransition(628992031738L);
        long long96 = dateTimeZone82.convertUTCToLocal(1646118985632L);
        mutableDateTime2.setZone(dateTimeZone82);
        org.joda.time.DateTime dateTime98 = new org.joda.time.DateTime(1645514170843L, dateTimeZone82);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 8L + "'", long48 == 8L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertNull(str84);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-01:00" + "'", str86, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 628992031738L + "'", long94 == 628992031738L);
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1646115385632L + "'", long96 == 1646115385632L);
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.withMillisOfDay(22);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        java.lang.Appendable appendable10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime31.getFieldTypes();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale35.getDisplayVariant(locale37);
        java.lang.String str40 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology51);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology51.centuryOfEra();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology51);
        org.joda.time.DateTime dateTime56 = dateTime54.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str58 = dateTimeFieldType57.toString();
        int int59 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property60 = localDateTime31.property(dateTimeFieldType57);
        boolean boolean61 = gJChronology11.equals((java.lang.Object) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "82800056" + "'", str40, "82800056");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "yearOfCentury" + "'", str58, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        java.lang.String str28 = dateTimeZone24.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone24);
        org.joda.time.Chronology chronology31 = gJChronology11.withZone(dateTimeZone24);
        java.lang.String str32 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology11.dayOfWeek();
        org.joda.time.Chronology chronology34 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology11.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GJChronology[-01:00]" + "'", str32, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "82800052" + "'", str4, "82800052");
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:17:09.326");
        java.lang.String str2 = timeZone1.getID();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime5.getZone();
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.clockhourOfHalfday();
        org.joda.time.Instant instant21 = gJChronology19.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.minus(1645514352811L);
        java.util.Date date24 = instant21.toDate();
        boolean boolean25 = timeZone1.inDaylightTime(date24);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Oct 15 00:00:00 GMT+00:00 1582");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute(6);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime7.toYearMonthDay();
        org.joda.time.DateTime dateTime12 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime7.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.hourOfHalfday();
        java.lang.String str19 = gJChronology11.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[-01:00]" + "'", str19, "GJChronology[-01:00]");
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis((int) '4');
        java.util.GregorianCalendar gregorianCalendar25 = dateTime22.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar25);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = julianChronology25.add(readablePeriod29, (long) (short) 1, 8);
        org.joda.time.DurationField durationField33 = julianChronology25.days();
        org.joda.time.DurationField durationField34 = julianChronology25.months();
        boolean boolean35 = julianChronology10.equals((java.lang.Object) julianChronology25);
        org.joda.time.DurationField durationField36 = julianChronology10.years();
        org.joda.time.DurationFieldType durationFieldType37 = durationField36.getType();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        java.util.Locale locale2 = new java.util.Locale("52", "minuteOfHour");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.lang.String str6 = locale5.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "52_MINUTEOFHOUR" + "'", str6, "52_MINUTEOFHOUR");
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.property(dateTimeFieldType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology20.getZone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime52.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime59 = dateTime52.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long60 = dateTime52.getMillis();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey(100L);
        long long71 = dateTimeZone67.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((java.lang.Object) long60, dateTimeZone67);
        org.joda.time.DateTime dateTime73 = localDateTime40.toDateTime(dateTimeZone67);
        java.lang.String str75 = dateTimeZone67.getNameKey(1645514169594L);
        org.joda.time.Chronology chronology76 = julianChronology20.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 1900);
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale81.getScript();
        java.lang.String str84 = locale81.getScript();
        java.util.Locale.setDefault(locale81);
        java.lang.String str87 = locale81.getExtension('x');
        java.lang.String str88 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime79, 2720, locale81);
        java.util.Locale.setDefault(locale81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime90 = property8.set("seconds", locale81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"seconds\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514706303L + "'", long60 == 1645514706303L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2720" + "'", str88, "2720");
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField22 = julianChronology10.months();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField27 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = julianChronology10.add(readablePeriod28, 1645514396910L, 16);
        org.joda.time.DurationField durationField32 = julianChronology10.hours();
        int int34 = durationField32.getValue(0L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514396910L + "'", long31 == 1645514396910L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 378);
        int int2 = mutableDateTime1.getRoundingMode();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = julianChronology14.seconds();
        int int18 = julianChronology14.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField19 = julianChronology14.seconds();
        org.joda.time.DurationField durationField20 = julianChronology14.months();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.minuteOfDay();
        org.joda.time.DurationField durationField36 = julianChronology31.days();
        org.joda.time.DurationField durationField37 = julianChronology31.seconds();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(100L);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withPeriodAdded(readablePeriod45, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean49 = localDateTime41.isSupported(dateTimeFieldType48);
        java.util.Locale locale52 = new java.util.Locale("IT");
        java.lang.String str53 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 19, locale52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean57 = dateTimeZone55.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime58 = localDateTime41.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology59 = julianChronology14.withZone(dateTimeZone55);
        java.lang.String str61 = dateTimeZone55.getShortName(1645514378390L);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(1677050512404L, dateTimeZone55);
        mutableDateTime1.setZone(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "19" + "'", str53, "19");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.DurationField durationField39 = julianChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = julianChronology38.seconds();
        int int42 = julianChronology38.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField43 = julianChronology38.weekyears();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = julianChronology38.add(readablePeriod44, (long) 3, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone48 = julianChronology38.getZone();
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.Chronology chronology50 = julianChronology10.withZone(dateTimeZone48);
        java.lang.String str51 = dateTimeZone48.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMillis((int) (short) 1);
        boolean boolean27 = julianChronology10.equals((java.lang.Object) localDateTime26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        java.lang.String str14 = dateTimeZone6.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime24.getFields();
        boolean boolean33 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        java.util.TimeZone timeZone34 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond(49);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey(100L);
        long long48 = dateTimeZone44.nextTransition((long) (short) 0);
        int int50 = dateTimeZone44.getStandardOffset(36070100L);
        java.lang.String str52 = dateTimeZone44.getName(10800001L);
        org.joda.time.DateTime dateTime53 = dateTime35.toDateTime(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime35.toGregorianCalendar();
        org.joda.time.DateTime dateTime55 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385 + "'", int28 == 385);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str30, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-01:00" + "'", str52, "-01:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(1645514184);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withPivotYear(3);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        java.lang.String str17 = julianChronology10.toString();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = julianChronology10.getDateTimeMillis(0L, 2355, 26382899, 0, 22814527);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2355 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str17, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DurationField durationField13 = julianChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean24 = dateTimeZone22.isStandardOffset(1677050149186L);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = dateTimeZone22.getShortName((long) 10, locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter20.withLocale(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withOffsetParsed();
        boolean boolean30 = julianChronology11.equals((java.lang.Object) dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = dateTimeFormatter29.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter34.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withOffsetParsed();
        java.lang.Integer int37 = dateTimeFormatter34.getPivotYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44, (int) (short) 1);
        org.joda.time.DurationField durationField49 = julianChronology48.weeks();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime52.getZone();
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 10);
        org.joda.time.Chronology chronology59 = julianChronology48.withZone(dateTimeZone56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter34.withZone(dateTimeZone56);
        int int62 = dateTimeZone56.getOffset(1677050246834L);
        boolean boolean64 = dateTimeZone56.isStandardOffset((long) 24);
        long long67 = dateTimeZone56.convertLocalToUTC(1677050269587L, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter29.withZone(dateTimeZone56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant69 = org.joda.time.Instant.parse("-1", dateTimeFormatter29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3600000) + "'", int62 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1677053869587L + "'", long67 == 1677053869587L);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1645514280734L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfCeilingCopy();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.setRegion("IT");
        java.util.Locale locale26 = new java.util.Locale("fr");
        java.util.Locale.Builder builder27 = builder22.setLocale(locale26);
        java.lang.String str28 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, 51, locale26);
        int int29 = mutableDateTime1.get(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "51" + "'", str28, "51");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        long long26 = dateTimeZone22.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.weekyear();
        java.lang.String str29 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.hourOfDay();
        org.joda.time.Instant instant32 = gJChronology27.getGregorianCutover();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        java.lang.String str44 = dateTimeZone40.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone40);
        org.joda.time.Chronology chronology47 = gJChronology27.withZone(dateTimeZone40);
        boolean boolean48 = julianChronology10.equals((java.lang.Object) chronology47);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology10.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[-01:00]" + "'", str29, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:00" + "'", str44, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) '4', chronology36);
        int int41 = mutableDateTime40.getCenturyOfEra();
        boolean boolean42 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.hourOfDay();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.year();
        int int45 = mutableDateTime40.getEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField32 = julianChronology26.months();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology26.dayOfMonth();
        org.joda.time.Chronology chronology36 = julianChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setRounding(dateTimeField38, (-27425236));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: -27425236");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        java.lang.String str17 = julianChronology10.toString();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        long long20 = durationField18.getMillis(73);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str17, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4380000L + "'", long20 == 4380000L);
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        java.lang.String[] strArray3 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology16.weekOfWeekyear();
        boolean boolean21 = strSet4.contains((java.lang.Object) julianChronology16);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology16.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology16.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter26.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter26.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withPivotYear(16);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter31.withLocale(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter31.getZone();
        long long38 = dateTimeZone36.convertUTCToLocal((long) 82560001);
        org.joda.time.Chronology chronology39 = julianChronology16.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(31231569976L, dateTimeZone36);
        java.lang.String str41 = dateTimeZone36.getID();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNull(dateTimePrinter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 82560001L + "'", long38 == 82560001L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(22948070);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DurationField durationField13 = julianChronology11.minutes();
        org.joda.time.DurationField durationField14 = julianChronology11.halfdays();
        org.joda.time.Chronology chronology15 = julianChronology11.withUTC();
        mutableDateTime0.setChronology((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.millisOfSecond();
        org.joda.time.DurationField durationField18 = julianChronology11.hours();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.year();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale26.getExtension('a');
        int int29 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        int int45 = mutableDateTime42.getMinuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        int int56 = mutableDateTime42.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone67);
        long long70 = chronology63.set((org.joda.time.ReadablePartial) localDateTime68, (long) '4');
        org.joda.time.DurationField durationField71 = chronology63.seconds();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime55.toMutableDateTime(chronology63);
        int int73 = property25.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime74 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.LocalDateTime localDateTime80 = property78.addWrapFieldToCopy((int) '#');
        int[] intArray81 = localDateTime80.getValues();
        julianChronology20.validate((org.joda.time.ReadablePartial) localDateTime74, intArray81);
        org.joda.time.DateTimeField dateTimeField83 = julianChronology20.weekyearOfCentury();
        org.joda.time.DateTime dateTime84 = dateTime5.toDateTime((org.joda.time.Chronology) julianChronology20);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = julianChronology20.getDateTimeMillis(178, 22790534, 39600052, 26444414);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22790534 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1380 + "'", int45 == 1380);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) ' ');
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.hourOfDay();
        int[] intArray28 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime24, 1645514164504L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        java.lang.String str38 = dateTimeFieldType36.toString();
        int int39 = localDateTime24.get(dateTimeFieldType36);
        java.lang.String str40 = dateTimeFieldType36.getName();
        java.lang.String str41 = dateTimeFieldType36.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 9, 22564504]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "minuteOfDay" + "'", str38, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1380 + "'", int39 == 1380);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minuteOfDay" + "'", str41, "minuteOfDay");
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1985-11-22T06:17:44.278-01:04");
        mutableDateTime1.addDays(26443970);
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.secondOfDay();
        boolean boolean31 = property23.equals((java.lang.Object) property30);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        int int38 = localDateTime35.getYearOfCentury();
        long long40 = julianChronology16.set((org.joda.time.ReadablePartial) localDateTime35, 1645514169523L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(22964167, 83836339, 1376, 22624927, 26446196, 0, (org.joda.time.Chronology) julianChronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22624927 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69 + "'", int38 == 69);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1312797283202074L + "'", long40 == 1312797283202074L);
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        long long26 = dateTimeZone22.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.secondOfDay();
        org.joda.time.Instant instant29 = gJChronology27.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.Instant instant32 = gJChronology30.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.secondOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(21852061483L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology30.era();
        org.joda.time.DurationField durationField37 = gJChronology30.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = durationField37.getMillis(1677050245101L, 1677050211703L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1677050245101 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime11.withDayOfMonth(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology10.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.halfdayOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        long long28 = dateTimeZone24.nextTransition((long) (short) 0);
        int int30 = dateTimeZone24.getStandardOffset(36070100L);
        java.lang.String str32 = dateTimeZone24.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey(100L);
        long long44 = dateTimeZone40.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField46 = gJChronology45.days();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property50.addWrapFieldToCopy((int) '#');
        int[] intArray53 = localDateTime52.getValues();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusDays(0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withHourOfDay(0);
        int int58 = localDateTime57.getDayOfWeek();
        long long60 = gJChronology45.set((org.joda.time.ReadablePartial) localDateTime57, (long) 625);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology45.dayOfWeek();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = mutableDateTime66.getZone();
        java.lang.String str72 = dateTimeZone70.getNameKey(100L);
        long long74 = dateTimeZone70.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.weekyear();
        java.lang.String str77 = gJChronology75.toString();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now();
        boolean boolean82 = dateTimeZone80.isLocalDateTimeGap(localDateTime81);
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80);
        org.joda.time.Chronology chronology84 = gJChronology75.withZone(dateTimeZone80);
        org.joda.time.Chronology chronology85 = gJChronology45.withZone(dateTimeZone80);
        long long87 = dateTimeZone24.getMillisKeepLocal(dateTimeZone80, 1677050239948L);
        org.joda.time.Chronology chronology88 = julianChronology10.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField89 = julianChronology10.centuryOfEra();
        int int90 = dateTimeField89.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3600000) + "'", int30 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-82799913L) + "'", long60 == (-82799913L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GJChronology[-01:00]" + "'", str77, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(gJChronology83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1677050239948L + "'", long87 == 1677050239948L);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = gJChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.clockhourOfDay();
        java.lang.String str5 = gJChronology0.toString();
        org.joda.time.DurationField durationField6 = gJChronology0.months();
        org.joda.time.DurationField durationField7 = gJChronology0.months();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[-01:00]" + "'", str5, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = julianChronology10.getDateTimeMillis(0L, 3270, 808, 0, (-608));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3270 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        mutableDateTime2.addYears((int) 'x');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        int int12 = mutableDateTime9.getMinuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readablePeriod21);
        int int23 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime22);
        org.joda.time.DateTime dateTime28 = dateTime22.plusMillis(6);
        org.joda.time.DateTime dateTime30 = dateTime22.minusYears((-6));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        long long43 = dateTimeZone37.convertUTCToLocal((long) 2022);
        long long45 = dateTimeZone37.previousTransition(1645514152918L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = dateTime22.withZone(dateTimeZone37);
        mutableDateTime2.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology55.dayOfMonth();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime60.getZone();
        java.lang.String str66 = dateTimeZone64.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology68 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone64, (int) (short) 1);
        org.joda.time.DurationField durationField69 = julianChronology68.weeks();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology68.weekOfWeekyear();
        org.joda.time.DurationField durationField71 = julianChronology68.seconds();
        int int72 = julianChronology68.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology68.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology68.millisOfDay();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(1646551030706L);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusMonths(22705733);
        java.util.Locale locale81 = new java.util.Locale("fr", "weeks");
        java.lang.String str82 = dateTimeField74.getAsShortText((org.joda.time.ReadablePartial) localDateTime76, locale81);
        java.lang.String str83 = dateTimeField56.getAsText(52L, locale81);
        java.lang.String str84 = dateTimeZone37.getName(1645514483005L, locale81);
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1380 + "'", int12 == 1380);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3597978L) + "'", long43 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514152918L + "'", long45 == 1645514152918L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(julianChronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_WEEKS");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "22630706" + "'", str82, "22630706");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "18" + "'", str83, "18");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-01:00" + "'", str84, "-01:00");
        org.junit.Assert.assertNotNull(gJChronology85);
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfMinute();
        org.joda.time.Chronology chronology19 = julianChronology10.withUTC();
        org.joda.time.Chronology chronology20 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology9.getZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime7.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1677050148089L, chronology1);
        org.joda.time.LocalTime localTime3 = dateTime2.toLocalTime();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfSecond();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(53);
        org.joda.time.DateTime dateTime22 = dateTime18.withWeekyear(53);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime22.withEarlierOffsetAtOverlap();
        int int25 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getDisplayVariant(locale25);
        java.lang.String str28 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.centuryOfEra();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str46 = dateTimeFieldType45.toString();
        int int47 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime19.property(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime19.hourOfDay();
        int int50 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property51 = localDateTime19.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "82800056" + "'", str28, "82800056");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "yearOfCentury" + "'", str46, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusWeeks(22693);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(42984);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime79.setDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology83);
        java.lang.String str85 = mutableDateTime84.toString();
        mutableDateTime84.setDate((long) (short) 100);
        int int88 = mutableDateTime84.getMinuteOfHour();
        int int89 = mutableDateTime84.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str91 = dateTimeFieldType90.getName();
        boolean boolean92 = mutableDateTime84.isSupported(dateTimeFieldType90);
        org.joda.time.MutableDateTime.Property property93 = mutableDateTime79.property(dateTimeFieldType90);
        mutableDateTime79.addMinutes(22693);
        mutableDateTime79.addHours(314);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str85, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "millisOfDay" + "'", str91, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) localDateTime20, (long) '4');
        org.joda.time.Chronology chronology23 = chronology15.withUTC();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) '4');
        int[] intArray38 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, 0L);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, locale39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundHalfFloor();
        mutableDateTime45.setSecondOfDay(8);
        org.joda.time.DateTime dateTime48 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology13.getZone();
        org.joda.time.Chronology chronology26 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology13.getZone();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfFloor();
        int int3 = mutableDateTime2.getRoundingMode();
        org.joda.time.DateTimeField dateTimeField4 = mutableDateTime2.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(dateTimeField4);
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(1677050149186L, dateTimeZone8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds(26441439);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.era();
        org.joda.time.DurationField durationField15 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology11.getZone();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("weekyear");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.lang.String str3 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DurationField durationField2 = gJChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.yearOfCentury();
        boolean boolean4 = dateTimeField3.isLenient();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime10.add(readablePeriod12, 9);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime10.copy();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime10.add(readableDuration16, 43569);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime10.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime10.copy();
        mutableDateTime20.setDate((long) 22603);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.years();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withHourOfDay(9);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) localDateTime44, (long) '4');
        org.joda.time.DurationField durationField47 = chronology39.hours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.DurationField durationField61 = chronology53.hours();
        int int62 = durationField47.compareTo(durationField61);
        long long65 = durationField47.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType66 = durationField47.getType();
        boolean boolean67 = localDateTime33.isSupported(durationFieldType66);
        int int68 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray70 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime33, 1645517828517L);
        org.joda.time.DurationField durationField71 = julianChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 9, 26228517]");
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(10800001L);
        int int2 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) '4');
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        int[] intArray31 = chronology16.get((org.joda.time.ReadablePartial) localDateTime27, 0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        int int37 = mutableDateTime34.getMinuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        int int48 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readablePeriod49);
        org.joda.time.DateTime dateTime51 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.plus(readableDuration52);
        org.joda.time.DateTime dateTime54 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L);
        int int57 = localDateTime56.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime56.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime56.minusMonths((int) (byte) 1);
        boolean boolean71 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.Chronology chronology72 = localDateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.millisOfSecond();
        int int75 = dateTimeField73.getLeapAmount((-49233290059747647L));
        int int76 = mutableDateTime1.get(dateTimeField73);
        long long78 = dateTimeField73.roundHalfFloor(1645513935671L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7200 + "'", int2 == 7200);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1380 + "'", int37 == 1380);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645513935671L + "'", long78 == 1645513935671L);
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.secondOfDay();
        boolean boolean25 = property17.equals((java.lang.Object) property24);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        boolean boolean35 = gJChronology11.equals((java.lang.Object) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology11.getZone();
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone36);
        long long40 = dateTimeZone36.nextTransition(1677455999880L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1677455999880L + "'", long40 == 1677455999880L);
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime25.setMonthOfYear((int) (byte) 1);
        mutableDateTime25.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime25.yearOfCentury();
        int int39 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime25.monthOfYear();
        org.joda.time.DateTime dateTime41 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addDays(22504027);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime25.add(readablePeriod44, 22316026);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime50.getZone();
        java.lang.String str56 = dateTimeZone54.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54, (int) (short) 1);
        org.joda.time.DurationField durationField59 = julianChronology58.weeks();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology58.weekOfWeekyear();
        org.joda.time.DurationField durationField61 = julianChronology58.seconds();
        org.joda.time.DurationField durationField62 = julianChronology58.millis();
        org.joda.time.DurationField durationField63 = julianChronology58.hours();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology58.secondOfDay();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 734, (org.joda.time.Chronology) julianChronology58);
        org.joda.time.DateTimeField dateTimeField66 = julianChronology58.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology58.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setRounding(dateTimeField67, 269);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 269");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1380 + "'", int39 == 1380);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Chronology chronology16 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeField17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology19 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField20 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.dayOfWeek();
        org.joda.time.DurationField durationField22 = julianChronology10.years();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.era();
        int int20 = dateTimeField19.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.toMutableDateTimeISO();
        int int43 = property29.getDifference((org.joda.time.ReadableInstant) mutableDateTime41);
        int int44 = property29.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-2022) + "'", int43 == (-2022));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, 1677050316777L, 83993907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 83993907");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48, (int) (short) 1);
        org.joda.time.DurationField durationField53 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology52.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = julianChronology52.withUTC();
        org.joda.time.DurationField durationField56 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology52);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology52.monthOfYear();
        int int60 = dateTimeField59.getMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        int int4 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalTime localTime5 = localDateTime2.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localDateTime2.getField(22795);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22795");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(10800001L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        int int17 = localDateTime12.indexOf(dateTimeFieldType15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) localDateTime28, (long) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType15.getField(chronology23);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey(100L);
        long long43 = dateTimeZone39.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.secondOfDay();
        int int46 = gJChronology44.getMinimumDaysInFirstWeek();
        boolean boolean47 = dateTimeFieldType15.isSupported((org.joda.time.Chronology) gJChronology44);
        org.joda.time.DurationField durationField48 = gJChronology44.weekyears();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology44.clockhourOfHalfday();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfCentury();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readablePeriod59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusDays((int) ' ');
        org.joda.time.DateTime dateTime66 = dateTime62.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime69 = dateTime62.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long70 = dateTime62.getMillis();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        mutableDateTime73.setZone(dateTimeZone74);
        org.joda.time.Chronology chronology76 = mutableDateTime73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = mutableDateTime73.getZone();
        java.lang.String str79 = dateTimeZone77.getNameKey(100L);
        long long81 = dateTimeZone77.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((java.lang.Object) long70, dateTimeZone77);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime85 = dateTime83.plus((long) 'x');
        org.joda.time.DateTime dateTime87 = dateTime83.plusMonths(435);
        org.joda.time.DateTime dateTime89 = dateTime83.withWeekOfWeekyear(1);
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Chronology chronology91 = gJChronology44.withZone(dateTimeZone77);
        mutableDateTime1.setZone(dateTimeZone77);
        int int93 = mutableDateTime1.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 385 + "'", int16 == 385);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514707354L + "'", long70 == 1645514707354L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(gJChronology90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 19 + "'", int93 == 19);
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        java.lang.String str9 = gJChronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[-01:00]" + "'", str9, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        int int13 = mutableDateTime12.getEra();
        mutableDateTime12.setMillisOfSecond((int) '#');
        mutableDateTime12.setSecondOfDay(625);
        org.joda.time.Chronology chronology18 = mutableDateTime12.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.DateTime dateTime30 = dateTime27.withCenturyOfEra((int) 'u');
        org.joda.time.DateTime dateTime32 = dateTime27.minusWeeks(394);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime27.minus(readablePeriod33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime27.minus(readableDuration35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        int int42 = mutableDateTime39.getMinuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readablePeriod51);
        int int53 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime52.getWeekyear();
        org.joda.time.DateTime.Property property55 = dateTime52.millisOfSecond();
        org.joda.time.DateTime.Property property56 = dateTime52.era();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime52.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime52.plus(1646637578041L);
        boolean boolean60 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        long long65 = dateTimeZone62.convertLocalToUTC(1677050418403L, false);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime27.toMutableDateTime(dateTimeZone62);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1380 + "'", int42 == 1380);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1677054018403L + "'", long65 == 1677054018403L);
        org.junit.Assert.assertNotNull(mutableDateTime66);
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        java.util.Locale locale1 = new java.util.Locale("eng");
        java.lang.String str2 = locale1.getScript();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.getISO3Language();
        java.lang.String str8 = locale4.getExtension('x');
        java.lang.String str9 = locale4.getISO3Country();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale11.getDisplayVariant(locale13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale20.getExtension('a');
        int int23 = property19.getMaximumShortTextLength(locale20);
        java.lang.String str24 = locale20.getISO3Country();
        java.lang.String str25 = locale13.getDisplayVariant(locale20);
        java.util.Locale.setDefault(category3, locale13);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category3, locale27);
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str36 = nameProvider29.getName(locale33, "English (Canada)", "Greenwich Mean Time");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider29);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider29);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45, (int) (short) 1);
        org.joda.time.DurationField durationField50 = julianChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology49.halfdayOfDay();
        org.joda.time.DurationField durationField52 = julianChronology49.minutes();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology49.dayOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int57 = localDateTime55.get(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusHours(600);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime62.getZone();
        java.lang.String str68 = dateTimeZone66.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone66, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology70);
        org.joda.time.DateTimeField dateTimeField72 = julianChronology70.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology70.millisOfDay();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology70.minuteOfDay();
        org.joda.time.DurationField durationField75 = julianChronology70.days();
        org.joda.time.DurationField durationField76 = julianChronology70.seconds();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology70.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(100L);
        int int81 = localDateTime80.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.withPeriodAdded(readablePeriod84, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean88 = localDateTime80.isSupported(dateTimeFieldType87);
        java.util.Locale locale91 = new java.util.Locale("IT");
        java.lang.String str92 = dateTimeField78.getAsShortText((org.joda.time.ReadablePartial) localDateTime80, 19, locale91);
        java.lang.String str93 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime59, locale91);
        java.lang.String str96 = nameProvider29.getShortName(locale91, "33072992", "56");
        java.util.Locale.setDefault(category3, locale91);
        java.lang.String str98 = locale1.getDisplayLanguage(locale91);
        java.lang.String str99 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English" + "'", str5, "English");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertEquals(locale33.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 385 + "'", int57 == 385);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(julianChronology70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals(locale91.toString(), "it");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "19" + "'", str92, "19");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "78" + "'", str93, "78");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Inglese" + "'", str98, "Inglese");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DurationField durationField15 = julianChronology10.weeks();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DurationField durationField17 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.clockhourOfDay();
        boolean boolean21 = dateTimeField20.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str16, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) ' ');
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears(26444007);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusMillis(22797);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) 26159301);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("era");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getDisplayCountry();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = dateTimeZone1.getName(1645514434704L, locale13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(julianChronology8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "era");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "era");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime53 = property52.roundHalfEvenCopy();
        boolean boolean54 = dateTime53.isAfterNow();
        org.joda.time.DateTime dateTime56 = dateTime53.minusMinutes(22694228);
        int int57 = dateTime53.getYearOfCentury();
        int int58 = dateTime53.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.clockhourOfHalfday();
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str23 = dateTimeField17.getAsShortText((int) 'a', locale22);
        java.lang.String str24 = dateTimeZone1.getName((long) (short) 1, locale22);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str27 = dateTimeZone1.getName(1645516403075L);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "97" + "'", str23, "97");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.120" + "'", str24, "+00:00:00.120");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.120" + "'", str27, "+00:00:00.120");
        org.junit.Assert.assertNotNull(gJChronology28);
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZone(dateTimeZone8);
        int int10 = dateTimeFormatter9.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 436);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology23.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey(100L);
        org.joda.time.Chronology chronology34 = julianChronology23.withZone(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter9.withChronology((org.joda.time.Chronology) julianChronology23);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = julianChronology23.getDateTimeMillis(2533, (int) (short) 1, 22556026, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22556026 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1645514155044L, dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(20110100L, dateTimeZone3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) '4', chronology12);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.millisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        long long28 = dateTimeZone24.nextTransition((long) (short) 0);
        int int30 = dateTimeZone24.getStandardOffset(36070100L);
        org.joda.time.DateTime dateTime31 = mutableDateTime16.toDateTime(dateTimeZone24);
        mutableDateTime5.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology43.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = julianChronology43.getZone();
        org.joda.time.DurationField durationField49 = julianChronology43.hours();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology43);
        mutableDateTime5.setTime((org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setHourOfDay(22947418);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22947418 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3600000) + "'", int30 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.Instant instant16 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) 'x');
        org.joda.time.DateTime dateTime21 = dateTime17.plusMonths(435);
        boolean boolean22 = gJChronology11.equals((java.lang.Object) dateTime21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 3044);
        org.joda.time.DateTime dateTime27 = dateTime21.plusDays(22967);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        mutableDateTime2.addWeekyears(353);
        int int47 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.roundHalfEven();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfEra();
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2323 + "'", int47 == 2323);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        int int19 = dateTime15.getWeekOfWeekyear();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DurationField durationField35 = julianChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.hourOfDay();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) (byte) 10, locale38);
        java.util.Locale.Builder builder40 = builder20.setLocale(locale38);
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getExtension('u');
        java.lang.String str46 = locale38.getDisplayLanguage(locale42);
        java.util.Calendar calendar47 = dateTime15.toCalendar(locale38);
        java.util.Locale locale48 = locale38.stripExtensions();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.secondOfMinute();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale55.getDisplayVariant(locale57);
        int int60 = property54.getMaximumShortTextLength(locale55);
        boolean boolean61 = locale55.hasExtensions();
        java.util.Locale locale63 = new java.util.Locale("fr");
        java.lang.String str64 = locale63.getScript();
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale65.getDisplayVariant(locale67);
        java.lang.String str70 = locale63.getDisplayScript(locale67);
        java.lang.String str71 = locale55.getDisplayName(locale67);
        java.lang.String str72 = locale48.getDisplayLanguage(locale55);
        java.lang.Object obj73 = locale55.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23" + "'", str39, "23");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514707700,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=25,SECOND=7,MILLISECOND=700,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "");
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        int int25 = mutableDateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        int int36 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readablePeriod37);
        long long39 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime40 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property19.roundHalfEvenCopy();
        java.lang.String str42 = property19.getAsShortText();
        long long43 = property19.remainder();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1380 + "'", int25 == 1380);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 21852061414L + "'", long39 == 21852061414L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2074L + "'", long43 == 2074L);
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long12 = dateTimeZone10.previousTransition(1645514173601L);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.secondOfDay();
        boolean boolean26 = property18.equals((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int30 = localDateTime28.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.DurationField durationField42 = julianChronology41.weeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.Chronology chronology52 = julianChronology41.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology41.hourOfDay();
        org.joda.time.DurationField durationField55 = julianChronology41.minutes();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType29.getField((org.joda.time.Chronology) julianChronology41);
        org.joda.time.DateTimeField dateTimeField57 = julianChronology41.weekOfWeekyear();
        boolean boolean58 = localDateTime14.equals((java.lang.Object) julianChronology41);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology41.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T22:59:59.999-01:00" + "'", str7, "1970-01-01T22:59:59.999-01:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514173601L + "'", long12 == 1645514173601L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfDay();
        mutableDateTime6.addDays(82560001);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.minuteOfDay();
        java.lang.String str11 = property10.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[minuteOfDay]" + "'", str11, "Property[minuteOfDay]");
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        int[] intArray18 = gJChronology11.get((org.joda.time.ReadablePartial) localDateTime15, (long) 161);
        org.joda.time.Instant instant19 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.year();
        org.joda.time.DurationField durationField21 = gJChronology11.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 82800161]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withDurationAdded(readableDuration9, 20);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int25 = localDateTime23.get(dateTimeFieldType24);
        int int26 = localDateTime21.indexOf(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType24.getDurationType();
        int int28 = localDateTime5.get(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(100L);
        long long41 = dateTimeZone37.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.weekyear();
        org.joda.time.DurationField durationField44 = gJChronology42.years();
        org.joda.time.DurationField durationField45 = gJChronology42.minutes();
        org.joda.time.Chronology chronology46 = gJChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType24.getField((org.joda.time.Chronology) gJChronology42);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology42.dayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 385 + "'", int25 == 385);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("1969-12-18T23:03:37.087");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-12-18t23:03:37.087");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.secondOfMinute();
        boolean boolean7 = strSet1.remove((java.lang.Object) property6);
        java.lang.String[] strArray10 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        boolean boolean28 = strSet11.contains((java.lang.Object) julianChronology23);
        boolean boolean30 = strSet11.add("eng");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = julianChronology41.getZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        boolean boolean47 = strSet11.equals((java.lang.Object) localDateTime46);
        boolean boolean48 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor49 = strSet11.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Canada");
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean6 = strSet4.isEmpty();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.secondOfMinute();
        boolean boolean17 = strSet11.remove((java.lang.Object) property16);
        boolean boolean18 = strSet9.addAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean19 = strSet4.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet11);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime21.yearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology35);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology35.millisOfDay();
        long long40 = dateTimeField38.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField38.getType();
        int int42 = dateTime21.get(dateTimeFieldType41);
        int int43 = dateTime12.get(dateTimeFieldType41);
        int int44 = dateTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 23L + "'", long40 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23107879 + "'", int42 == 23107879);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23107879 + "'", int43 == 23107879);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23107879 + "'", int44 == 23107879);
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        int int5 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks(23);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(100L);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        int int16 = localDateTime14.size();
        int int17 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        java.util.Date date18 = localDateTime14.toDate();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Jan 07 23:00:00 GMT+00:00 1970");
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getExtension('x');
        java.lang.String str14 = locale9.getISO3Country();
        java.util.Locale.Builder builder15 = builder5.setLocale(locale9);
        java.util.Locale.Builder builder17 = builder5.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale.Builder builder21 = builder17.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder17.addUnicodeLocaleAttribute("13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 13 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.DateTimeZone dateTimeZone33 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology10.monthOfYear();
        org.joda.time.DurationField durationField35 = dateTimeField34.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.minuteOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        int int21 = property19.get();
        java.lang.String str22 = property19.getAsShortText();
        org.joda.time.Interval interval23 = property19.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1380 + "'", int21 == 1380);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1380" + "'", str22, "1380");
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DurationField durationField22 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology15.halfdayOfDay();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale.setDefault(locale28);
        java.lang.String str31 = dateTimeField26.getAsText(600720100L, locale28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PM" + "'", str31, "PM");
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        long long31 = dateTimeZone13.getMillisKeepLocal(dateTimeZone28, (long) 'a');
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1645514162333L, dateTimeZone28);
        java.util.Date date33 = localDateTime32.toDate();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.fromDateFields(date33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromDateFields(date33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str4, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 240097L + "'", long31 == 240097L);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 06:12:02 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        long long22 = julianChronology10.getDateTimeMillis((long) (byte) 0, (int) (short) 10, 6, 15, (int) '#');
        org.joda.time.DurationField durationField23 = julianChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-46424965L) + "'", long22 == (-46424965L));
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(0);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) 'x');
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths(435);
        org.joda.time.DateTime dateTime21 = dateTime15.withWeekOfWeekyear(1);
        long long22 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime23 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime25 = property14.addToCopy((int) 'x');
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology15.seconds();
        int int19 = julianChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.dayOfMonth();
        org.joda.time.DurationField durationField22 = julianChronology15.weekyears();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology15.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(22776305, 0, 26428, 22674513, 22948772, (org.joda.time.Chronology) julianChronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22674513 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.year();
        java.lang.String str25 = dateTimeField24.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[year]" + "'", str25, "DateTimeField[year]");
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.minusYears(7);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.addWrapFieldToCopy(669);
        org.joda.time.DateTime dateTime23 = dateTime15.withFields((org.joda.time.ReadablePartial) localDateTime22);
        boolean boolean24 = dateTime15.isAfterNow();
        int int25 = dateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DurationField durationField22 = julianChronology15.months();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology15.halfdayOfDay();
        org.joda.time.DurationField durationField24 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology15.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        java.lang.String str29 = mutableDateTime28.toString();
        mutableDateTime28.setDate((long) (short) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears(31);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L);
        int int46 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.Chronology chronology56 = localDateTime54.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.Chronology chronology65 = chronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) '4', chronology63);
        int int68 = mutableDateTime67.getCenturyOfEra();
        mutableDateTime67.addWeekyears(7);
        mutableDateTime67.addWeekyears(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime67.property(dateTimeFieldType73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime54.property(dateTimeFieldType73);
        int int76 = localDateTime41.get(dateTimeFieldType73);
        int[] intArray78 = julianChronology15.get((org.joda.time.ReadablePartial) localDateTime41, 1645514592361L);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str29, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 19 + "'", int68 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2022, 2, 9, 22992361]");
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int49 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.minusYears(86399);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundHalfCeilingCopy();
        int int57 = localDateTime56.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfDay(60);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusSeconds(19);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readablePeriod63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYear(23);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(100L);
        int int70 = localDateTime69.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfDay();
        org.joda.time.LocalDateTime localDateTime78 = property76.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime69.withFields((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime69.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime69.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime69.getFieldType(0);
        int int86 = localDateTime66.get(dateTimeFieldType85);
        int int87 = localDateTime51.indexOf(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 82800100 + "'", int49 == 82800100);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTime.Property property30 = dateTime28.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMillis(26159301);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minusWeeks(19);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds(1663);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.setRegion("IT");
        java.util.Locale locale40 = new java.util.Locale("fr");
        java.util.Locale.Builder builder41 = builder36.setLocale(locale40);
        java.util.Locale.Builder builder44 = builder41.setExtension('a', "52");
        java.util.Locale.Builder builder45 = builder41.clear();
        java.util.Locale.Builder builder46 = builder45.clearExtensions();
        java.util.Locale.Builder builder48 = builder45.setVariant("22317888");
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale.Builder builder52 = builder48.setLocale(locale49);
        java.lang.String str53 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime32, 2922789, locale49);
        int[] intArray54 = localDateTime32.getValues();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 385 + "'", int26 == 385);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English" + "'", str50, "English");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2922789" + "'", str53, "2922789");
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 22, 22208235]");
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property16.setCopy(4);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.DateTime dateTime22 = dateTime18.minusSeconds((int) 'x');
        int int23 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime18.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) (short) 1, 8);
        org.joda.time.DurationField durationField19 = julianChronology11.days();
        org.joda.time.DurationField durationField20 = julianChronology11.seconds();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, (org.joda.time.Chronology) julianChronology11);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = julianChronology11.getDateTimeMillis(22685127, 53, 26441439, 48, 238, 31535889, 953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.era();
        org.joda.time.Chronology chronology47 = gJChronology41.withUTC();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 385 + "'", int13 == 385);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) 26159301);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        timeZone7.setRawOffset(365);
        timeZone7.setID("8");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.lang.String str13 = timeZone12.getID();
        int int15 = timeZone12.getOffset(0L);
        boolean boolean16 = timeZone12.observesDaylightTime();
        timeZone12.setID("English");
        boolean boolean19 = timeZone7.hasSameRules(timeZone12);
        int int20 = timeZone12.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[Etc/UTC]" + "'", str13, "GJChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.year();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = nameProvider0.getName(locale1, "-0001-01-01T00:00:00.056", "UTC");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime24.getFieldTypes();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale28.getDisplayVariant(locale30);
        java.lang.String str33 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale28);
        java.lang.String str34 = locale28.getDisplayCountry();
        java.lang.String str37 = nameProvider0.getName(locale28, "", "und");
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str43 = locale39.getExtension('x');
        java.lang.String str44 = locale39.getISO3Country();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale46.getDisplayVariant(locale48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale55.getExtension('a');
        int int58 = property54.getMaximumShortTextLength(locale55);
        java.lang.String str59 = locale55.getISO3Country();
        java.lang.String str60 = locale48.getDisplayVariant(locale55);
        java.util.Locale.setDefault(category38, locale48);
        java.util.Locale locale62 = java.util.Locale.getDefault(category38);
        java.util.Locale locale63 = java.util.Locale.getDefault(category38);
        java.lang.String str64 = locale28.getDisplayVariant(locale63);
        java.lang.String str65 = locale28.getScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "82800056" + "'", str33, "82800056");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1646551296558L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        long long14 = dateTimeZone8.convertUTCToLocal((long) 2022);
        java.lang.String str16 = dateTimeZone8.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        int int31 = localDateTime26.indexOf(dateTimeFieldType29);
        java.lang.String str32 = localDateTime26.toString();
        int int33 = localDateTime26.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime26.getFields();
        boolean boolean35 = dateTimeZone8.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime36 = dateTime1.withZoneRetainFields(dateTimeZone8);
        long long39 = dateTimeZone8.adjustOffset((long) 26184569, false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3597978L) + "'", long14 == (-3597978L));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 385 + "'", int30 == 385);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str32, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26184569L + "'", long39 == 26184569L);
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.DurationField durationField34 = julianChronology33.weeks();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology45);
        long long48 = julianChronology33.set((org.joda.time.ReadablePartial) localDateTime46, (long) 100);
        org.joda.time.DurationField durationField49 = julianChronology33.years();
        org.joda.time.DurationField durationField50 = julianChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology33.weekOfWeekyear();
        org.joda.time.DateTime dateTime53 = dateTime22.toDateTime((org.joda.time.Chronology) julianChronology33);
        boolean boolean54 = dateTime22.isAfterNow();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514708362L + "'", long48 == 1645514708362L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.weekyearOfCentury();
        java.lang.String str13 = dateTimeField11.getAsShortText((long) 97);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "70" + "'", str13, "70");
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField dateTimeField7 = localDateTime1.getField((int) (byte) 1);
        java.lang.String str8 = dateTimeField7.getName();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.getISO3Language();
        java.lang.String str15 = locale11.getExtension('x');
        java.lang.String str16 = locale11.getISO3Country();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale18.getDisplayVariant(locale20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getExtension('a');
        int int30 = property26.getMaximumShortTextLength(locale27);
        java.lang.String str31 = locale27.getISO3Country();
        java.lang.String str32 = locale20.getDisplayVariant(locale27);
        java.util.Locale.setDefault(category10, locale20);
        java.util.Locale locale34 = java.util.Locale.getDefault(category10);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setRegion("IT");
        java.util.Locale locale39 = new java.util.Locale("fr");
        java.util.Locale.Builder builder40 = builder35.setLocale(locale39);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = dateTimeFormatter43.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withOffsetParsed();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter43.withLocale(locale46);
        java.util.Locale.Builder builder48 = builder40.setLocale(locale46);
        java.lang.String str49 = locale46.getDisplayScript();
        java.lang.String str50 = locale34.getDisplayVariant(locale46);
        java.lang.String str51 = dateTimeField7.getAsText(1645514685456L, locale46);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(dateTimePrinter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e8c\u6708" + "'", str51, "\u4e8c\u6708");
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology17.add(readablePeriod18, 1645514170103L, 259);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology17.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514170103L + "'", long21 == 1645514170103L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        java.lang.String[] strArray15 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        int int18 = strSet16.size();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet16.stream();
        boolean boolean20 = strSet4.containsAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.Spliterator<java.lang.String> strSpliterator21 = strSet16.spliterator();
        boolean boolean22 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray23 = strSet1.toArray();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet1.parallelStream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(strStream24);
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = gJChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology0.era();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = gJChronology0.add(readablePeriod6, 1645514304011L, 82800100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.DurationField durationField21 = julianChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = julianChronology20.seconds();
        int int24 = julianChronology20.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField25 = julianChronology20.weekyears();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = julianChronology20.add(readablePeriod26, (long) 3, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone30 = julianChronology20.getZone();
        org.joda.time.Chronology chronology31 = gJChronology0.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514304011L + "'", long9 == 1645514304011L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime.Property property69 = localDateTime21.era();
        int int70 = localDateTime21.size();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime21.plus(readableDuration71);
        int int73 = localDateTime21.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        long long32 = dateTimeZone20.getMillisKeepLocal(dateTimeZone28, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        long long38 = dateTimeZone20.getMillisKeepLocal(dateTimeZone35, (long) 'a');
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 10800);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withDefaultYear(540);
        boolean boolean45 = dateTimeFormatter44.isPrinter();
        org.joda.time.Chronology chronology46 = dateTimeFormatter44.getChronology();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime49.getZone();
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField58 = julianChronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology57.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology57.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        long long64 = julianChronology57.add(readablePeriod61, (long) (short) 1, 8);
        org.joda.time.DurationField durationField65 = julianChronology57.days();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology57.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter44.withChronology((org.joda.time.Chronology) julianChronology57);
        org.joda.time.DurationField durationField68 = julianChronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology57.minuteOfDay();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str11, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 240097L + "'", long38 == 240097L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(chronology46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(julianChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = property52.setCopy((int) (short) 100);
        org.joda.time.DateTime dateTime56 = property52.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        org.joda.time.DateTime dateTime58 = property52.roundFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int63 = localDateTime61.get(dateTimeFieldType62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = mutableDateTime66.getZone();
        java.lang.String str72 = dateTimeZone70.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70, (int) (short) 1);
        long long76 = dateTimeZone70.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant77);
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType62.getField((org.joda.time.Chronology) gJChronology78);
        int int80 = dateTime58.get(dateTimeFieldType62);
        org.joda.time.DateTime dateTime81 = dateTime58.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = dateTime81.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 385 + "'", int63 == 385);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(julianChronology74);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-3597978L) + "'", long76 == (-3597978L));
        org.junit.Assert.assertNotNull(gJChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 385 + "'", int80 == 385);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.dayOfMonth();
        java.lang.String str48 = gJChronology41.toString();
        org.joda.time.DurationField durationField49 = gJChronology41.days();
        org.joda.time.DurationField durationField50 = gJChronology41.minutes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 385 + "'", int13 == 385);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GJChronology[-01:00]" + "'", str48, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTime dateTime13 = property11.getDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.secondOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        int int35 = mutableDateTime23.getYearOfCentury();
        mutableDateTime23.addWeekyears((int) 'x');
        mutableDateTime23.addDays(1);
        mutableDateTime23.add((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime23.property(dateTimeFieldType42);
        mutableDateTime16.set(dateTimeFieldType42, 5);
        boolean boolean46 = dateTime13.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime16.weekyear();
        boolean boolean49 = mutableDateTime16.isAfter(1677050474571L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str24, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69 + "'", int35 == 69);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        long long22 = durationField20.getValueAsLong((long) 26397219);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        int int4 = mutableDateTime2.getHourOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology15.seconds();
        int int19 = julianChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology15.millisOfDay();
        long long22 = dateTimeField20.roundHalfFloor(0L);
        org.joda.time.DurationField durationField23 = dateTimeField20.getDurationField();
        org.joda.time.DurationField durationField24 = dateTimeField20.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfCeilingCopy();
        java.lang.String str31 = property28.getAsText();
        java.util.Locale locale32 = java.util.Locale.UK;
        int int33 = property28.getMaximumTextLength(locale32);
        java.lang.String str34 = locale32.getISO3Country();
        java.lang.String str35 = locale32.getLanguage();
        int int36 = dateTimeField20.getMaximumTextLength(locale32);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setRegion("IT");
        java.util.Locale locale41 = new java.util.Locale("fr");
        java.util.Locale.Builder builder42 = builder37.setLocale(locale41);
        java.util.Locale.Builder builder45 = builder42.setExtension('a', "52");
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = builder45.build();
        java.lang.String str48 = locale32.getDisplayVariant(locale47);
        java.util.Set<java.lang.Character> charSet49 = locale32.getExtensionKeys();
        java.util.Calendar calendar50 = mutableDateTime2.toCalendar(locale32);
        java.lang.String str51 = locale32.getScript();
        java.util.Set<java.lang.String> strSet52 = locale32.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet52.parallelStream();
        boolean boolean55 = strSet52.contains((java.lang.Object) 1645514202639L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "82800052" + "'", str31, "82800052");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GBR" + "'", str34, "GBR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en" + "'", str35, "en");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DurationField durationField14 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DurationField durationField16 = julianChronology10.years();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.era();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(100L);
        int int34 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTime dateTime44 = dateTime29.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plus(readablePeriod51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int58 = localDateTime56.get(dateTimeFieldType57);
        int int59 = localDateTime54.indexOf(dateTimeFieldType57);
        java.lang.String str60 = localDateTime54.toString();
        int int61 = localDateTime54.size();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.plusWeeks(12);
        java.lang.String str64 = localDateTime63.toString();
        int int65 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withWeekyear(43570);
        int int68 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        int int69 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField71 = localDateTime63.getField(26397219);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26397219");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 385 + "'", int58 == 385);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str60, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0000-03-24T23:00:00.056" + "'", str64, "0000-03-24T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology15.getZone();
        long long24 = dateTimeZone22.previousTransition((long) 9);
        java.lang.String str26 = dateTimeZone22.getShortName(9L);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
        org.joda.time.Chronology chronology29 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone31);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime20 = property18.withMinimumValue();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(19410);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        boolean boolean16 = mutableDateTime15.isEqualNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        int int45 = mutableDateTime42.getMinuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        int int56 = mutableDateTime42.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.plus(readablePeriod57);
        org.joda.time.DateTime dateTime60 = dateTime55.plusYears(1);
        org.joda.time.DateTime dateTime63 = dateTime55.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime64 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime65 = dateTime30.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.plusMinutes((-638));
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property70 = dateTime65.property(dateTimeFieldType69);
        mutableDateTime15.set(dateTimeFieldType69, 26171);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime15.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1380 + "'", int45 == 1380);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645514157380L, dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.Chronology chronology25 = gJChronology14.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        boolean boolean30 = dateTimeZone28.isLocalDateTimeGap(localDateTime29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology32 = gJChronology14.withZone(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 9, dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra(26428332);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26428332 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        java.lang.String str5 = mutableDateTime4.toString();
        mutableDateTime4.setDate((long) (short) 100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        long long26 = dateTimeZone14.getMillisKeepLocal(dateTimeZone22, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        long long32 = dateTimeZone14.getMillisKeepLocal(dateTimeZone29, (long) 'a');
        mutableDateTime0.setZone(dateTimeZone14);
        mutableDateTime0.setDayOfMonth(3);
        org.joda.time.Chronology chronology36 = mutableDateTime0.getChronology();
        mutableDateTime0.setWeekyear(82560001);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime0.getZone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology50);
        org.joda.time.DateTimeField dateTimeField52 = julianChronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology50.year();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology50.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.set(dateTimeFieldType58, 449);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 449 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str5, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 240097L + "'", long32 == 240097L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(julianChronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.weekyear();
        org.joda.time.DurationField durationField14 = gJChronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = gJChronology12.minutes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str35 = locale31.getExtension('x');
        java.lang.String str36 = locale31.getISO3Country();
        java.lang.String str37 = dateTimeZone25.getShortName((long) 1, locale31);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((-3308085895496L), dateTimeZone25);
        org.joda.time.Chronology chronology39 = gJChronology12.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(12129422312L, chronology39);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.centuryOfEra();
        long long16 = property15.remainder();
        org.joda.time.DateTime dateTime18 = property15.addWrapFieldToCopy(22698381);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withPeriodAdded(readablePeriod19, 22952);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1510248891171L) + "'", long16 == (-1510248891171L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str22 = dateTimeFieldType21.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray50 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int51 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray50);
        int[] intArray53 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) localDateTime19, 0, intArray50, 20);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime19.withDurationAdded(readableDuration54, 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime19.minusYears(15);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime19.minusMillis((int) (byte) 0);
        int int61 = localDateTime60.getMillisOfSecond();
        int int62 = localDateTime60.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.era();
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology16.minuteOfDay();
        long long34 = julianChronology16.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        boolean boolean35 = property3.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime36 = property3.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = localDateTime36.getFieldType(64955);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 64955");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-46729900L) + "'", long34 == (-46729900L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(0);
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology26.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey(100L);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.minuteOfDay();
        long long44 = julianChronology26.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology26.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 377, (org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology26.centuryOfEra();
        mutableDateTime14.setRounding(dateTimeField48);
        int int51 = dateTimeField48.getLeapAmount((long) 112);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-46729900L) + "'", long44 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        java.util.Locale locale2 = new java.util.Locale("52", "minuteOfHour");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) ' ');
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        boolean boolean13 = strSet3.remove((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMillis(1974);
        org.junit.Assert.assertEquals(locale2.toString(), "52_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean23 = dateTimeZone21.isStandardOffset(1677050149186L);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = dateTimeZone21.getShortName((long) 10, locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean29 = julianChronology10.equals((java.lang.Object) dateTimeFormatter28);
        org.joda.time.DurationField durationField30 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology10.dayOfWeek();
        org.joda.time.DurationField durationField33 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        org.joda.time.DurationField durationField41 = chronology33.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime25.toMutableDateTime(chronology33);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar44 = mutableDateTime42.toCalendar(locale43);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromCalendarFields(calendar44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks(2077);
        int int48 = localDateTime47.getHourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514708959,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=25,SECOND=8,MILLISECOND=959,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        boolean boolean10 = dateTimeField7.isLeap((long) (byte) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (short) -1);
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = localDateTime14.getField(0);
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology29.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        int int39 = localDateTime38.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str41 = dateTimeFieldType40.toString();
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        int int51 = dateTimeField50.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        int[] intArray69 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int70 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) localDateTime63, intArray69);
        int[] intArray72 = dateTimeField33.addWrapField((org.joda.time.ReadablePartial) localDateTime38, 0, intArray69, 20);
        int int73 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime14, intArray69);
        int int74 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime14.withYear(976);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minuteOfHour" + "'", str41, "minuteOfHour");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 99 + "'", int51 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.secondOfMinute();
        boolean boolean7 = strSet1.remove((java.lang.Object) property6);
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet1.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet1.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertNotNull(strSpliterator9);
        org.junit.Assert.assertNotNull(strSpliterator10);
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        long long26 = dateTimeZone22.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.weekyear();
        java.lang.String str29 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.hourOfDay();
        org.joda.time.Instant instant32 = gJChronology27.getGregorianCutover();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        java.lang.String str44 = dateTimeZone40.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone40);
        org.joda.time.Chronology chronology47 = gJChronology27.withZone(dateTimeZone40);
        boolean boolean48 = julianChronology10.equals((java.lang.Object) chronology47);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology10.era();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfYear();
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime52.secondOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime69.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        mutableDateTime73.setZone(dateTimeZone74);
        org.joda.time.Chronology chronology76 = mutableDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(100L);
        int int81 = localDateTime80.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.withPeriodAdded(readablePeriod84, (int) (short) 100);
        long long88 = chronology76.set((org.joda.time.ReadablePartial) localDateTime80, (long) (short) 0);
        org.joda.time.DateTime dateTime89 = dateTime69.withFields((org.joda.time.ReadablePartial) localDateTime80);
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = julianChronology10.equals((java.lang.Object) dateTime89);
        // The following exception was thrown during execution in test generation
        try {
            long long97 = julianChronology10.getDateTimeMillis((long) 22789079, 495, 22705733, 2024, 22628628);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 495 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[-01:00]" + "'", str29, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:00" + "'", str44, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.DurationField durationField43 = julianChronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.secondOfMinute();
        boolean boolean62 = julianChronology42.equals((java.lang.Object) chronology52);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey(100L);
        long long73 = dateTimeZone69.nextTransition((long) (short) 0);
        int int75 = dateTimeZone69.getStandardOffset(36070100L);
        java.lang.String str77 = dateTimeZone69.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.Chronology chronology79 = chronology52.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime80 = dateTime29.withChronology(chronology52);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.DateTime dateTime82 = dateTime29.plus(readablePeriod81);
        int int83 = dateTime29.getYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3600000) + "'", int75 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-01:00" + "'", str77, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2069 + "'", int83 == 2069);
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DurationField durationField16 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.dayOfWeek();
        org.joda.time.DurationField durationField2 = julianChronology0.days();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime(dateTimeZone18);
        boolean boolean20 = julianChronology0.equals((java.lang.Object) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.plusMinutes(374);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property23.setCopy(22947418);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22947418 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.years();
        org.joda.time.DurationField durationField14 = gJChronology11.minutes();
        org.joda.time.Chronology chronology15 = gJChronology11.withUTC();
        java.lang.String str16 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[-01:00]" + "'", str16, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant0.withDurationAdded(readableDuration7, 292272992);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField43 = julianChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology26.yearOfEra();
        org.joda.time.DurationField durationField45 = julianChronology26.weeks();
        org.joda.time.DurationField durationField46 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology26.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        boolean boolean17 = durationField16.isSupported();
        boolean boolean18 = durationField16.isPrecise();
        long long20 = durationField16.getMillis(82800000);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 82800000000L + "'", long20 == 82800000000L);
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        long long42 = chronology35.set((org.joda.time.ReadablePartial) localDateTime40, (long) '4');
        org.joda.time.DateTimeField dateTimeField43 = chronology35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType27.getField(chronology35);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey(100L);
        long long55 = dateTimeZone51.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.secondOfDay();
        int int58 = gJChronology56.getMinimumDaysInFirstWeek();
        boolean boolean59 = dateTimeFieldType27.isSupported((org.joda.time.Chronology) gJChronology56);
        java.lang.String str60 = dateTimeFieldType27.toString();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType27.getDurationType();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime64.getZone();
        java.lang.String str70 = dateTimeZone68.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology72);
        org.joda.time.DateTimeField dateTimeField74 = julianChronology72.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology72.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology72.year();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology72.dayOfMonth();
        org.joda.time.Chronology chronology79 = julianChronology72.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType27.getField(chronology79);
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType27.getDurationType();
        int int82 = localDateTime14.indexOf(dateTimeFieldType27);
        org.joda.time.Instant instant84 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant84.plus(readableDuration85);
        org.joda.time.Instant instant88 = instant84.plus((long) 20);
        org.joda.time.Instant instant90 = instant88.minus(0L);
        org.joda.time.Instant instant92 = instant88.plus(0L);
        org.joda.time.DateTime dateTime93 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) instant88);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385 + "'", int28 == 385);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(gJChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "minuteOfDay" + "'", str60, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(julianChronology72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        int int7 = dateTimeField6.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(100L);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime18);
        int[] intArray25 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int26 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19, intArray25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.plusHours(0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.minus(readablePeriod29);
        int int31 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean35 = dateTimeZone33.isStandardOffset(1677050149186L);
        int int37 = dateTimeZone33.getOffset((long) 82560001);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        java.util.Date date41 = dateTime40.toDate();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 01:00:00 GMT+00:00 1969");
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DurationField durationField19 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.hourOfHalfday();
        long long24 = dateTimeField21.add((long) 3270, 1645514401273L);
        java.lang.String str25 = dateTimeField21.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5923851844582803270L + "'", long24 == 5923851844582803270L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hourOfHalfday" + "'", str25, "hourOfHalfday");
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.millis();
        org.joda.time.DurationField durationField20 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4', chronology13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        long long29 = dateTimeZone25.nextTransition((long) (short) 0);
        int int31 = dateTimeZone25.getStandardOffset(36070100L);
        org.joda.time.DateTime dateTime32 = mutableDateTime17.toDateTime(dateTimeZone25);
        int int33 = dateTime32.getWeekyear();
        int int34 = dateTime32.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.withPeriodAdded(readablePeriod35, 97);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear(22679);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46, (int) (short) 1);
        org.joda.time.DurationField durationField51 = julianChronology50.weeks();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = julianChronology50.seconds();
        int int54 = julianChronology50.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology50.yearOfCentury();
        org.joda.time.DurationField durationField56 = julianChronology50.hours();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology50.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime39.toDateTime((org.joda.time.Chronology) julianChronology50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(215, 54, 26414201, 426, 904, (-18718), 15, (org.joda.time.Chronology) julianChronology50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 426 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 365 + "'", int34 == 365);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(julianChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(100L);
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime52);
        int int54 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.property(dateTimeFieldType55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime64.getZone();
        org.joda.time.DateTime dateTime66 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime68 = dateTime64.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime70 = dateTime64.plusDays(1380);
        int int71 = dateTime70.getMonthOfYear();
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTimeISO();
        boolean boolean73 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology15.weekyear();
        int int25 = dateTimeField24.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readablePeriod32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int39 = localDateTime37.get(dateTimeFieldType38);
        int int40 = localDateTime35.indexOf(dateTimeFieldType38);
        java.lang.String str41 = localDateTime35.toString();
        int int42 = localDateTime35.size();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.plusWeeks(12);
        java.lang.String str45 = localDateTime44.toString();
        int int46 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(100L);
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = property55.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime48.minusMonths((int) (byte) 1);
        int int63 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.ReadablePartial readablePartial64 = null;
        int int65 = dateTimeField24.getMaximumValue(readablePartial64);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292269055) + "'", int25 == (-292269055));
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 385 + "'", int39 == 385);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str41, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0000-03-24T23:00:00.056" + "'", str45, "0000-03-24T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292269054) + "'", int46 == (-292269054));
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292272992 + "'", int63 == 292272992);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292272992 + "'", int65 == 292272992);
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = julianChronology10.get(readablePeriod16, 1677050272137L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField13 = julianChronology11.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int int48 = localDateTime21.getYearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        long long61 = chronology54.set((org.joda.time.ReadablePartial) localDateTime59, (long) '4');
        org.joda.time.Chronology chronology62 = chronology54.withUTC();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone72);
        long long75 = chronology68.set((org.joda.time.ReadablePartial) localDateTime73, (long) '4');
        int[] intArray77 = chronology62.get((org.joda.time.ReadablePartial) localDateTime73, 0L);
        julianChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology11.hourOfDay();
        org.joda.time.DurationField durationField80 = julianChronology11.months();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology11.era();
        org.joda.time.Chronology chronology83 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology11.yearOfEra();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(1645514210205L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField86 = julianChronology11.years();
        boolean boolean87 = durationField86.isSupported();
        long long90 = durationField86.subtract(954240000L, 22317380);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-704282950133760000L) + "'", long90 == (-704282950133760000L));
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        java.lang.String str14 = dateTimeZone6.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime24.getFields();
        boolean boolean33 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property42.addWrapFieldToCopy((int) '#');
        int[] intArray45 = localDateTime44.getValues();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusDays(0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMillisOfSecond(60);
        boolean boolean51 = localDateTime47.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.withYearOfEra(344);
        boolean boolean57 = gJChronology35.equals((java.lang.Object) localDateTime47);
        int int58 = localDateTime47.getDayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385 + "'", int28 == 385);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str30, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 365 + "'", int58 == 365);
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(540);
        int int18 = localDateTime13.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withSecondOfMinute(23);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear(441);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusHours(10800);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType2.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationField durationField20 = gJChronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 385 + "'", int3 == 385);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3597978L) + "'", long16 == (-3597978L));
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField21 = julianChronology10.centuries();
        org.joda.time.DurationField durationField22 = julianChronology10.halfdays();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = localDateTime28.toDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withHourOfDay(9);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusYears(15);
        long long37 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime28, 1677046325946L);
        int int38 = localDateTime28.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1123200056L + "'", long37 == 1123200056L);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology15.getZone();
        long long24 = dateTimeZone22.previousTransition((long) 9);
        java.lang.String str26 = dateTimeZone22.getShortName(9L);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        java.util.TimeZone.setDefault(timeZone27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        org.joda.time.DateTime dateTime45 = dateTime37.toDateTime(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 3043);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.dayOfYear();
        mutableDateTime51.setDate((org.joda.time.ReadableInstant) mutableDateTime57);
        mutableDateTime51.setMonthOfYear((int) (byte) 1);
        mutableDateTime51.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime51.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime51.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        mutableDateTime71.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime71.minuteOfHour();
        boolean boolean78 = mutableDateTime51.isAfter((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        mutableDateTime81.setZone(dateTimeZone82);
        org.joda.time.Chronology chronology84 = mutableDateTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = mutableDateTime81.getZone();
        java.lang.String str87 = dateTimeZone85.getNameKey((long) 10);
        java.lang.String str89 = dateTimeZone85.getName((long) 3);
        mutableDateTime51.setZone(dateTimeZone85);
        boolean boolean92 = dateTimeZone85.isStandardOffset(2022L);
        java.lang.String str93 = dateTimeZone85.toString();
        org.joda.time.DateTime dateTime94 = localDateTime48.toDateTime(dateTimeZone85);
        java.util.Date date95 = localDateTime48.toDate();
        boolean boolean96 = timeZone27.inDaylightTime(date95);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
// flaky:         org.junit.Assert.assertNull(str87);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-01:00" + "'", str89, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "-01:00" + "'", str93, "-01:00");
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(date95);
// flaky:         org.junit.Assert.assertEquals(date95.toString(), "Tue Feb 22 06:25:09 GMT-01:00 2022");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        boolean boolean13 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime0.getRoundingField();
        org.joda.time.Chronology chronology15 = mutableDateTime0.getChronology();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.minuteOfHour();
        long long20 = dateTimeField18.roundFloor(65750400000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 65750400000L + "'", long20 == 65750400000L);
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L);
        int int28 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        int int37 = mutableDateTime34.getMinuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        int int48 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readablePeriod49);
        org.joda.time.DateTime dateTime52 = dateTime47.plusYears(1);
        org.joda.time.DateTime dateTime55 = dateTime47.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        int int57 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime30.plusMonths(70);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, (int) '#', locale61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime30.plusMonths(1969);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfWeek();
        int int66 = localDateTime64.getCenturyOfEra();
        java.util.Date date67 = localDateTime64.toDate();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1380 + "'", int37 == 1380);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "35" + "'", str62, "35");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 21 + "'", int66 == 21);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Sun Feb 07 23:00:00 GMT-01:00 2134");
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = julianChronology10.getDateTimeMillis(2000, 26215889, 86399362, 6, 22683048, 26, 66204494);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22683048 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long15 = dateTimeZone6.convertLocalToUTC((long) 15, true);
        java.util.TimeZone timeZone16 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean18 = timeZone16.observesDaylightTime();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600015L + "'", long15 == 3600015L);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.secondOfDay();
        boolean boolean25 = property17.equals((java.lang.Object) property24);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        boolean boolean35 = gJChronology11.equals((java.lang.Object) localDateTime31);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology11.monthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis(26159301);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusWeeks(19);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(22704251);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths(84044271);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 385 + "'", int3 == 385);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = gJChronology1.centuries();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 26399230, (org.joda.time.Chronology) gJChronology1);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology6 = gJChronology1.withUTC();
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        int int5 = dateTimeZone1.getOffset((long) 82560001);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds(22654609);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.minus(readableDuration11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime8.withDayOfMonth(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime2.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        mutableDateTime22.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.minuteOfHour();
        boolean boolean29 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) 3);
        mutableDateTime2.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime2.getZone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology53);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = julianChronology53.getZone();
        mutableDateTime2.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime2.year();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(1645514157380L, dateTimeZone68);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.weekyear();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology72.getZone();
        org.joda.time.DurationField durationField75 = gJChronology72.years();
        org.joda.time.DateTimeZone dateTimeZone76 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.minuteOfHour();
        org.joda.time.DurationField durationField78 = gJChronology72.days();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology72);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.weekyear();
        boolean boolean81 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime79);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded(readableDuration41, 1970);
        org.joda.time.DateTime dateTime45 = dateTime37.minusMonths(435);
        org.joda.time.DateTime.Property property46 = dateTime37.dayOfMonth();
        int int47 = property46.getLeapAmount();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(1645514448630L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.dayOfYear();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str7 = nameProvider0.getName(locale4, "English (Canada)", "Greenwich Mean Time");
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str15 = nameProvider8.getName(locale12, "English (Canada)", "Greenwich Mean Time");
        java.lang.String str17 = locale12.getUnicodeLocaleType("PM");
        java.lang.String str20 = nameProvider0.getName(locale12, "millisOfSecond", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) ' ');
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = property36.getAsText(locale38);
        java.lang.String str43 = nameProvider0.getName(locale38, "1969-12-31T23:00:00.100", "2058-05-22T06:14:57.539-01:04");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        int int49 = mutableDateTime46.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.yearOfCentury();
        mutableDateTime46.setSecondOfDay(436);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.util.Calendar calendar55 = mutableDateTime46.toCalendar(locale53);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.lang.String str58 = locale53.getDisplayVariant(locale56);
        java.lang.String str61 = nameProvider0.getName(locale56, "18", "2069-12-31T22:56:00.100-01:04");
        java.lang.String str62 = locale56.getLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertEquals(locale12.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u82f1\u6587" + "'", str39, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertNull(str43);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1380 + "'", int49 == 1380);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-82363999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=7,SECOND=16,MILLISECOND=1,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.centuryOfEra();
        org.joda.time.Chronology chronology15 = julianChronology10.withUTC();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.hourOfHalfday();
        int int18 = dateTimeField17.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str16, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645517810205L);
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField15.getMillis(1645514647445L, (long) 356);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        org.joda.time.Chronology chronology28 = julianChronology17.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology17.minuteOfDay();
        long long35 = julianChronology17.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getExtension('x');
        java.lang.String str53 = locale48.getISO3Country();
        java.lang.String str54 = dateTimeZone42.getShortName((long) 1, locale48);
        org.joda.time.Chronology chronology55 = julianChronology17.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime58.getZone();
        java.lang.String str64 = dateTimeZone62.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays((int) (short) 10);
        long long73 = julianChronology17.set((org.joda.time.ReadablePartial) localDateTime71, (long) 457087);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        org.joda.time.DateTimeZone dateTimeZone75 = julianChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology17.clockhourOfDay();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-46729900L) + "'", long35 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(julianChronology66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1646983509898L + "'", long73 == 1646983509898L);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DurationField durationField15 = julianChronology10.millis();
        org.joda.time.DurationField durationField16 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = julianChronology17.seconds();
        org.joda.time.DurationField durationField21 = julianChronology17.millis();
        org.joda.time.DurationField durationField22 = julianChronology17.hours();
        org.joda.time.DurationField durationField23 = julianChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(6960, 47, 3, 22837867, 0, 22757, (int) 'x', (org.joda.time.Chronology) julianChronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22837867 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        long long27 = dateTimeField25.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField25.getType();
        int int29 = dateTime8.get(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int43 = localDateTime41.get(dateTimeFieldType42);
        int int44 = localDateTime39.indexOf(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localDateTime55, (long) '4');
        org.joda.time.DateTimeField dateTimeField58 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType42.getField(chronology50);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime62.getZone();
        java.lang.String str68 = dateTimeZone66.getNameKey(100L);
        long long70 = dateTimeZone66.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.secondOfDay();
        int int73 = gJChronology71.getMinimumDaysInFirstWeek();
        boolean boolean74 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DurationField durationField75 = gJChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology71.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType28.getField((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology71.getZone();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology71.year();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology71.minuteOfHour();
        org.joda.time.DurationField durationField82 = gJChronology71.days();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology71.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology71.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 23L + "'", long27 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23109942 + "'", int29 == 23109942);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 385 + "'", int43 == 385);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(gJChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.secondOfDay();
        org.joda.time.Instant instant13 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Chronology chronology17 = gJChronology11.withZone(dateTimeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        timeZone18.setRawOffset(289);
        int int22 = timeZone18.getOffset(1677050507746L);
        int int23 = timeZone18.getRawOffset();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 289 + "'", int22 == 289);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 289 + "'", int23 == 289);
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str18 = locale14.getExtension('x');
        java.lang.String str19 = locale14.getISO3Country();
        java.lang.String str20 = dateTimeZone8.getShortName((long) 1, locale14);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((-3308085895496L), dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(1645514366154L, dateTimeZone8);
        org.joda.time.DateTime.Property property24 = dateTime23.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = julianChronology1.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology1);
        org.joda.time.DurationField durationField4 = julianChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology1.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) localDateTime16, (long) '4');
        org.joda.time.Chronology chronology19 = chronology11.withUTC();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone29);
        long long32 = chronology25.set((org.joda.time.ReadablePartial) localDateTime30, (long) '4');
        int[] intArray34 = chronology19.get((org.joda.time.ReadablePartial) localDateTime30, 0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime54 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readableDuration55);
        org.joda.time.DateTime dateTime57 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(100L);
        int int60 = localDateTime59.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property66.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime59.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime59.minusMonths((int) (byte) 1);
        boolean boolean74 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        int int76 = localDateTime75.getDayOfMonth();
        int int77 = localDateTime75.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.plusMinutes((-608));
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        mutableDateTime82.setZone(dateTimeZone83);
        org.joda.time.Chronology chronology85 = mutableDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfCentury();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.DateTime dateTime89 = dateTime87.minus(readablePeriod88);
        org.joda.time.DateTime dateTime91 = dateTime89.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime93 = dateTime91.minusHours(0);
        org.joda.time.DateTime.Property property94 = dateTime91.centuryOfEra();
        org.joda.time.DateTime.Property property95 = dateTime91.hourOfDay();
        org.joda.time.DateTime dateTime96 = localDateTime79.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime73.withFields((org.joda.time.ReadablePartial) localDateTime79);
        boolean boolean98 = julianChronology1.equals((java.lang.Object) localDateTime73);
        org.junit.Assert.assertNotNull(julianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay(60);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(19);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(23);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        int int32 = mutableDateTime29.getMinuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        int int43 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.DateTime dateTime47 = dateTime44.withCenturyOfEra((int) 'u');
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfWeek();
        boolean boolean49 = property16.equals((java.lang.Object) dateTime44);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1380 + "'", int32 == 1380);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("Italia");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.lang.Object obj10 = locale9.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "");
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        mutableDateTime23.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime23.setZone(dateTimeZone39);
        boolean boolean41 = strSet3.equals((java.lang.Object) mutableDateTime23);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet3.spliterator();
        boolean boolean44 = strSet3.add("1970-01-01T00:00:00.000+00:00:00.120");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Locale locale56 = new java.util.Locale("fr");
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale48, locale50, locale52, locale53, locale56, locale57, locale58 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList60);
        java.lang.String[] strArray73 = new java.lang.String[] { "70", "UTC", "English", "minuteOfDay", "JulianChronology[Etc/UTC,mdfw=1]", "35", "1970-01-01T00:00:00.001Z", "2022-02-22T07:15:58.038Z", "1900-01-08T00:00:00.100", "2022-02-22T07:15:56.026Z" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strSet74.spliterator();
        java.lang.String str77 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet74);
        java.util.stream.Stream<java.lang.String> strStream78 = strSet74.stream();
        boolean boolean80 = strSet74.add("176");
        boolean boolean81 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet74);
        boolean boolean83 = strSet3.add("2022-02-09T06:16:46.573-01:00");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "IT" + "'", str49, "IT");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.centuryOfEra();
        org.joda.time.DurationField durationField15 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        java.lang.String str22 = mutableDateTime21.toString();
        mutableDateTime21.setDate((long) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, (long) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime15.toDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTimeISO();
        int int46 = mutableDateTime45.getMonthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str22, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField12 = gJChronology11.days();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addWrapFieldToCopy((int) '#');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusDays(0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        long long34 = chronology27.set((org.joda.time.ReadablePartial) localDateTime32, (long) '4');
        org.joda.time.DurationField durationField35 = chronology27.hours();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.DurationField durationField49 = chronology41.hours();
        int int50 = durationField35.compareTo(durationField49);
        long long53 = durationField49.getValueAsLong((long) 4, 1645514152918L);
        int int55 = durationField49.getValue((long) 12);
        org.joda.time.DurationFieldType durationFieldType56 = durationField49.getType();
        boolean boolean57 = localDateTime18.isSupported(durationFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime18.withMillisOfDay(0);
        int int60 = localDateTime18.size();
        org.joda.time.LocalDateTime.Property property61 = localDateTime18.era();
        boolean boolean62 = gJChronology11.equals((java.lang.Object) property61);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField64 = dateTimeField63.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNull(durationField64);
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime0.plusMonths(435);
        org.joda.time.DateTime dateTime6 = dateTime0.withWeekOfWeekyear(1);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = property7.setCopy(86399999);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(0L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        int int5 = dateTimeZone2.getOffset((-39600000L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3840000) + "'", int5 == (-3840000));
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addWrapFieldToCopy(456319);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.secondOfDay();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant31 = instant28.withMillis(1645514220833L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant35 = instant33.plus(60687987577860L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        int int10 = mutableDateTime9.getYearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.secondOfDay();
        mutableDateTime9.setYear(22666694);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        java.lang.String str18 = mutableDateTime17.toString();
        mutableDateTime17.setDate((long) (short) 100);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone27);
        int int29 = mutableDateTime17.getYearOfCentury();
        mutableDateTime17.addWeekyears((int) 'x');
        mutableDateTime17.addDays(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) localDateTime44, (long) '4');
        org.joda.time.DurationField durationField47 = chronology39.hours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.DurationField durationField61 = chronology53.hours();
        int int62 = durationField47.compareTo(durationField61);
        long long65 = durationField47.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType66 = durationField47.getType();
        mutableDateTime17.add(durationFieldType66, 4);
        mutableDateTime9.add(durationFieldType66, 356);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime9.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str18, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.secondOfDay();
        boolean boolean25 = property17.equals((java.lang.Object) property24);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        int int32 = localDateTime29.getYearOfCentury();
        long long34 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime29, 1645514169523L);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology10.hourOfHalfday();
        java.lang.String str36 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69 + "'", int32 == 69);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1312797283202074L + "'", long34 == 1312797283202074L);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str36, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField17 = julianChronology10.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        int int14 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withMillisOfDay(437);
        int int18 = localDateTime17.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDayOfWeek(22775009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22775009 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 372 + "'", int14 == 372);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = julianChronology26.getZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet2 = provider1.getAvailableIDs();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.lang.String[] strArray16 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        int int19 = strSet17.size();
        java.util.stream.Stream<java.lang.String> strStream20 = strSet17.stream();
        boolean boolean21 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet17.spliterator();
        boolean boolean23 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet17);
        boolean boolean24 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet2);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet2.spliterator();
        strSet2.clear();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet2.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(provider1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strSpliterator27);
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 3, (int) 'u');
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.DurationField durationField32 = julianChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.weekOfWeekyear();
        org.joda.time.Chronology chronology34 = julianChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = julianChronology31.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.Chronology chronology38 = julianChronology10.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology23.millisOfDay();
        long long28 = dateTimeField26.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField26.getType();
        int int30 = dateTime9.get(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        int int45 = localDateTime40.indexOf(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        org.joda.time.DateTimeField dateTimeField59 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType43.getField(chronology51);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey(100L);
        long long71 = dateTimeZone67.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.secondOfDay();
        int int74 = gJChronology72.getMinimumDaysInFirstWeek();
        boolean boolean75 = dateTimeFieldType43.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DurationField durationField76 = gJChronology72.weekyears();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType29.getField((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology72.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology72.centuryOfEra();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(1677050185323L, (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTimeField dateTimeField82 = gJChronology72.hourOfHalfday();
        long long86 = gJChronology72.add(1645514306952L, 1934L, 630);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 23L + "'", long28 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23110432 + "'", int30 == 23110432);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 385 + "'", int44 == 385);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645515525372L + "'", long86 == 1645515525372L);
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField18 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) (byte) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        int int35 = mutableDateTime23.getYearOfCentury();
        mutableDateTime23.addWeekyears((int) 'x');
        mutableDateTime23.addDays(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        org.joda.time.DurationField durationField53 = chronology45.hours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) localDateTime64, (long) '4');
        org.joda.time.DurationField durationField67 = chronology59.hours();
        int int68 = durationField53.compareTo(durationField67);
        long long71 = durationField53.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType72 = durationField53.getType();
        mutableDateTime23.add(durationFieldType72, 4);
        mutableDateTime2.add(durationFieldType72, 4);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1645514154556L);
        boolean boolean79 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Instant instant80 = instant78.toInstant();
        org.joda.time.DateTime dateTime81 = instant80.toDateTime();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str24, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69 + "'", int35 == 69);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(259200001L, (org.joda.time.Chronology) julianChronology11);
        mutableDateTime18.setWeekyear((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime18.getRoundingField();
        org.joda.time.ReadableInstant readableInstant22 = null;
        mutableDateTime18.setDate(readableInstant22);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(dateTimeField21);
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        int int9 = localDateTime7.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.halfdays();
        java.lang.String str23 = julianChronology10.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey(100L);
        long long34 = dateTimeZone30.nextTransition((long) (short) 0);
        long long36 = dateTimeZone30.previousTransition((long) 100);
        org.joda.time.Chronology chronology37 = julianChronology10.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = chronology37.add(readablePeriod39, 1645514559208L, 662);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str23, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514559208L + "'", long42 == 1645514559208L);
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(22317380);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DurationField durationField14 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        java.lang.String str17 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str17, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str8 = nameProvider0.getName(locale4, "26188322", "it-IT");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setRegion("IT");
        java.util.Locale locale13 = new java.util.Locale("fr");
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.lang.String str19 = nameProvider0.getName(locale13, "GJChronology[Etc/UTC]", "3269-12-31T23:00:00.056");
        java.lang.String str20 = locale13.getLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "French" + "'", str16, "French");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) 35);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology24.dayOfYear();
        org.joda.time.DurationField durationField26 = julianChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology24.year();
        org.joda.time.DurationField durationField29 = julianChronology24.millis();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((-31536054L), (org.joda.time.Chronology) julianChronology24);
        boolean boolean31 = dateTimeZone6.equals((java.lang.Object) julianChronology24);
        int int33 = dateTimeZone6.getOffset((-51L));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3600000) + "'", int33 == (-3600000));
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        int int25 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime24.plusYears(1);
        org.joda.time.DateTime dateTime32 = dateTime24.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int34 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField40 = localDateTime36.getField(353);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 353");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1380 + "'", int14 == 1380);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DurationField durationField28 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.secondOfMinute();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) chronology20);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) julianChronology10);
        java.lang.Object obj32 = mutableDateTime31.clone();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.yearOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "2022-02-09T06:25:10.646-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "2022-02-09T06:25:10.646-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "2022-02-09T06:25:10.646-01:00");
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology10.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str5 = locale1.getExtension('x');
        java.lang.String str6 = locale1.getISO3Country();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale8.getDisplayVariant(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale17.getExtension('a');
        int int20 = property16.getMaximumShortTextLength(locale17);
        java.lang.String str21 = locale17.getISO3Country();
        java.lang.String str22 = locale10.getDisplayVariant(locale17);
        java.util.Locale.setDefault(category0, locale10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfCentury();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(0L);
        int int41 = property38.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property38.addToCopy(465847);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = locale44.stripExtensions();
        java.lang.String str47 = property38.getAsText(locale44);
        java.util.Locale.setDefault(category0, locale44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology59.centuryOfEra();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTime dateTime64 = dateTime62.plusSeconds((int) '#');
        long long65 = dateTime62.getMillis();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = locale67.getDisplayLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = dateTime62.toString("\u82f1\u6587\u52a0\u62ff\u5927)", locale67);
        java.util.Locale.setDefault(category0, locale67);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English" + "'", str2, "English");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "22" + "'", str47, "22");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514710675L + "'", long65 == 1645514710675L);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English" + "'", str68, "English");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str70, "\u82f1\u6587\u52a0\u62ff\u5927)");
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField23 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.set((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        mutableDateTime35.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime35.secondOfDay();
        java.util.Locale locale46 = new java.util.Locale("IT");
        int int47 = property44.getMaximumShortTextLength(locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = property32.getAsText(locale46);
        org.joda.time.DurationField durationField50 = property32.getRangeDurationField();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime53.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = julianChronology61.dayOfYear();
        org.joda.time.DurationField durationField63 = julianChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology61.yearOfEra();
        org.joda.time.DurationField durationField65 = julianChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology61.minuteOfHour();
        org.joda.time.DurationField durationField67 = julianChronology61.minutes();
        int int68 = durationField50.compareTo(durationField67);
        boolean boolean69 = julianChronology10.equals((java.lang.Object) durationField50);
        java.lang.String str70 = durationField50.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "days" + "'", str70, "days");
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(22701);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22701 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050710728L + "'", long21 == 1677050710728L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
    }
}

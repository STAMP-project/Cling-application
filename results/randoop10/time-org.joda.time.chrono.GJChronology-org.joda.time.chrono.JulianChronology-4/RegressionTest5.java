import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.weekyearOfCentury();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField18.getAsText(27261992, locale20);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "27261992" + "'", str21, "27261992");
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withPeriodAdded(readablePeriod38, (int) (short) 100);
        long long42 = chronology30.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime23.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.millisOfDay();
        org.joda.time.DateTime dateTime47 = property46.roundCeilingCopy();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis(26197359);
        boolean boolean50 = gJChronology11.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime49.weekyear();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTime49.toString("millisOfDay", locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399999, dateTimeZone2);
        java.lang.String str7 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField30 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology10.dayOfYear();
        long long35 = dateTimeField32.add((long) 54, 22682720);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514363877L + "'", long25 == 1645514363877L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1959787008000054L + "'", long35 == 1959787008000054L);
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale.Builder builder4 = builder0.setRegion("en");
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setLanguage("2022-02-09T06:18:29.821");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-09T06:18:29.821 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int21 = localDateTime19.get(dateTimeFieldType20);
        int int22 = localDateTime17.indexOf(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) localDateTime33, (long) '4');
        org.joda.time.DateTimeField dateTimeField36 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType20.getField(chronology28);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey(100L);
        long long48 = dateTimeZone44.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.secondOfDay();
        int int51 = gJChronology49.getMinimumDaysInFirstWeek();
        boolean boolean52 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology49);
        org.joda.time.DurationField durationField53 = gJChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology49.minuteOfDay();
        boolean boolean56 = localDateTime1.equals((java.lang.Object) gJChronology49);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime1.minusMillis(22694228);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime1.plusHours(263);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime64.getZone();
        java.lang.String str70 = dateTimeZone68.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField73 = julianChronology72.dayOfYear();
        org.joda.time.DurationField durationField74 = julianChronology72.minutes();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology72.yearOfEra();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology72.year();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology72.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology72.weekyearOfCentury();
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str80 = locale79.getISO3Language();
        int int81 = dateTimeField78.getMaximumTextLength(locale79);
        java.util.Locale.setDefault(locale79);
        boolean boolean83 = locale79.hasExtensions();
        java.lang.String str84 = locale79.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = localDateTime60.toString("-0001-01-01T00:00:00.056", locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 379 + "'", int21 == 379);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(julianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "zho" + "'", str80, "zho");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh" + "'", str84, "zh");
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology18 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.add(1893456000087L, 1646982992742L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1646982992742 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.DurationField durationField64 = julianChronology10.eras();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = dateTime65.toString("0540-02-23T06:18:53.383");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        int int17 = dateTimeField15.getMinimumValue(2720L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime11.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime11.withDayOfYear(2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514364068L + "'", long19 == 1645514364068L);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        int[] intArray18 = gJChronology11.get((org.joda.time.ReadablePartial) localDateTime15, (long) 161);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.millisOfDay();
        long long22 = dateTimeField19.add(21852061482L, 99);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 82800161]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 21852061581L + "'", long22 == 21852061581L);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.dayOfWeek();
        long long32 = dateTimeField30.roundFloor(1645514362854L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514364125L + "'", long25 == 1645514364125L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645491600000L + "'", long32 == 1645491600000L);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property14.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property14.setCopy("MILLISOFDAY");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"MILLISOFDAY\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.addMillis((int) '4');
        mutableDateTime2.add(1645514173852353L);
        mutableDateTime2.addMonths((int) (byte) 100);
        boolean boolean11 = mutableDateTime2.isAfter((long) 2069);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(1);
        int int8 = dateTimeFormatter7.getDefaultYear();
        boolean boolean9 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getExtension('x');
        java.lang.String str46 = locale41.getISO3Country();
        java.lang.String str47 = dateTimeZone35.getShortName((long) 1, locale41);
        org.joda.time.Chronology chronology48 = julianChronology10.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime.Property property50 = dateTime49.secondOfMinute();
        org.joda.time.DateTime dateTime52 = property50.addWrapFieldToCopy(26206466);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime52.withDate(2022, 22757, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22757 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u82f1\u6587" + "'", str42, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = julianChronology10.getDateTimeMillis(20393, 491, 625, 633, 31, 0, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 633 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("70");
        int int3 = timeZone1.getOffset((long) 292278993);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks((int) (short) -1);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((-1));
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime8.plusHours(2922730);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMillis(2000);
        java.util.Date date29 = localDateTime28.toDate();
        boolean boolean30 = timeZone1.inDaylightTime(date29);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Wed Aug 03 16:19:26 GMT-01:00 2355");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMonths(22716870);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.plusWeeks(3);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.plusDays(1970);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.centuryOfEra();
        org.joda.time.DurationField durationField31 = property30.getRangeDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getExtension('a');
        int int19 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.DurationField durationField61 = chronology53.seconds();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime45.toMutableDateTime(chronology53);
        int int63 = property15.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime64 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = property68.addWrapFieldToCopy((int) '#');
        int[] intArray71 = localDateTime70.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime64, intArray71);
        org.joda.time.DateTimeField dateTimeField73 = julianChronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField74 = julianChronology10.months();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1969, 12, 31, 82800087]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = property52.setCopy((int) (short) 100);
        org.joda.time.DateTime dateTime56 = property52.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        java.util.Locale locale59 = new java.util.Locale("fr");
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale61.getDisplayVariant(locale63);
        java.lang.String str66 = locale59.getDisplayScript(locale63);
        java.lang.String str67 = locale63.getDisplayCountry();
        int int68 = property52.getMaximumShortTextLength(locale63);
        org.joda.time.DateTime dateTime69 = property52.withMaximumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u7fa9\u5927\u5229" + "'", str67, "\u7fa9\u5927\u5229");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DurationField durationField28 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.secondOfMinute();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) chronology20);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(100L);
        long long41 = dateTimeZone37.nextTransition((long) (short) 0);
        int int43 = dateTimeZone37.getStandardOffset(36070100L);
        java.lang.String str45 = dateTimeZone37.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.Chronology chronology47 = chronology20.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.monthOfYear();
        int int50 = dateTimeField48.getMaximumValue(120000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3600000) + "'", int43 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.roundHalfEven();
        mutableDateTime31.setHourOfDay(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        mutableDateTime36.addYears((int) 'x');
        mutableDateTime36.addWeekyears(26176590);
        java.lang.String str43 = mutableDateTime36.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime53.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property58 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime59 = property58.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) dateTime59);
        int int63 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime36.copy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "26178679-12-27T23:00:00.001-01:00" + "'", str43, "26178679-12-27T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType2.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.Chronology chronology20 = gJChronology18.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 379 + "'", int3 == 379);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3597978L) + "'", long16 == (-3597978L));
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime29.year();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        org.joda.time.DateTime dateTime34 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds(437);
        int int37 = dateTime36.getDayOfYear();
        java.lang.String str39 = dateTime36.toString("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str39, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfDay();
        long long39 = chronology30.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.secondOfDay();
        boolean boolean51 = property43.equals((java.lang.Object) property50);
        org.joda.time.LocalDateTime localDateTime53 = property43.addToCopy((long) 2022);
        int[] intArray55 = chronology30.get((org.joda.time.ReadablePartial) localDateTime53, (long) (-1));
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withPeriodAdded(readablePeriod56, 4);
        int[] intArray60 = julianChronology11.get((org.joda.time.ReadablePartial) localDateTime58, 20110100L);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 457087, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readablePeriod62);
        int int64 = localDateTime63.getDayOfYear();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62689900L) + "'", long39 == (-62689900L));
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1969, 12, 31, 82799999]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1969, 12, 19, 16510100]");
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 352 + "'", int64 == 352);
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        java.lang.String str17 = durationField16.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hours" + "'", str17, "hours");
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DurationField durationField15 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = julianChronology10.getDateTimeMillis(1645514316175L, (-27425236), 22705733, (-1), 44280100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27425236 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withOffsetParsed();
        int int31 = dateTimeFormatter2.getDefaultYear();
        java.lang.Appendable appendable32 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) '4', chronology39);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plus(readablePeriod51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        int int60 = mutableDateTime57.getMinuteOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readablePeriod69);
        int int71 = mutableDateTime57.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = mutableDateTime43.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime76 = dateTime70.withDurationAdded(readableDuration74, 1970);
        org.joda.time.DateTime dateTime78 = dateTime76.plusYears((-18718));
        java.util.Date date79 = dateTime76.toDate();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable32, (org.joda.time.ReadableInstant) dateTime76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1380 + "'", int60 == 1380);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(date79);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Tue Feb 22 06:19:24 GMT-01:00 2022");
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.millisOfDay();
        org.joda.time.DurationField durationField29 = julianChronology25.centuries();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology25.dayOfWeek();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology25.millisOfDay();
        boolean boolean34 = gJChronology11.equals((java.lang.Object) julianChronology25);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology25.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = property8.getName();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfDay(22504027);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22504027 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minuteOfHour" + "'", str10, "minuteOfHour");
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean24 = dateTimeZone22.isStandardOffset(1677050149186L);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = dateTimeZone22.getShortName((long) 10, locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter20.withLocale(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withOffsetParsed();
        boolean boolean30 = dateTimeFormatter29.isParser();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.secondOfMinute();
        boolean boolean38 = strSet32.remove((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = property37.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = property37.withMaximumValue();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setRegion("IT");
        java.util.Locale locale45 = new java.util.Locale("fr");
        java.util.Locale.Builder builder46 = builder41.setLocale(locale45);
        java.util.Locale.Builder builder49 = builder46.setExtension('a', "52");
        java.util.Locale locale50 = builder49.build();
        int int51 = property37.getMaximumShortTextLength(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter29.withLocale(locale50);
        java.util.Locale locale53 = dateTimeFormatter52.getLocale();
        java.lang.String str54 = dateTimeField16.getAsText((long) (-53), locale53);
        java.lang.String str55 = dateTimeField16.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr__#a-52");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr__#a-52");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "18" + "'", str54, "18");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str55, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(625);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(2922789);
        boolean boolean15 = dateTimeFormatter12.isOffsetParsed();
        java.lang.Appendable appendable16 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillisOfDay(53);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 22657002);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMinutes(22657002);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(appendable16, (org.joda.time.ReadableInstant) dateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 159);
        int int37 = dateTimeFormatter36.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeFormatter36.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        mutableDateTime11.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '4');
        org.joda.time.Chronology chronology32 = chronology24.withUTC();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        int[] intArray47 = chronology32.get((org.joda.time.ReadablePartial) localDateTime43, 0L);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale48);
        boolean boolean50 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.withFieldAdded(durationFieldType52, (-638));
        org.joda.time.LocalDateTime localDateTime56 = localDateTime43.withCenturyOfEra(409);
        int int57 = localDateTime43.size();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        boolean boolean34 = dateTime19.equals((java.lang.Object) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        java.lang.String str13 = mutableDateTime12.toString();
        mutableDateTime12.setDate((long) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        long long34 = dateTimeZone22.getMillisKeepLocal(dateTimeZone30, (long) (byte) 10);
        java.util.TimeZone timeZone35 = dateTimeZone22.toTimeZone();
        long long37 = dateTimeZone22.previousTransition((long) (short) 100);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology49.dayOfYear();
        org.joda.time.DurationField durationField51 = julianChronology49.minutes();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology49.year();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology49.weekyearOfCentury();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = locale56.getISO3Language();
        int int58 = dateTimeField55.getMaximumTextLength(locale56);
        java.lang.String str59 = dateTimeZone22.getShortName(1677050096L, locale56);
        java.lang.String str60 = dateTimeZone8.getName(1646983042050L, locale56);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = julianChronology61.getDateTimeMillis((-638), 22751774, 1439, 30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22751774 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str13, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zho" + "'", str57, "zho");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-01:00" + "'", str59, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
        org.junit.Assert.assertNotNull(julianChronology61);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.year();
        int int25 = dateTimeField24.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292272992 + "'", int25 == 292272992);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.hourOfDay();
        java.lang.String str46 = gJChronology41.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GJChronology[-01:00]" + "'", str46, "GJChronology[-01:00]");
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField29 = julianChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(1645514207343L, dateTimeZone32);
        int[] intArray41 = new int[] { 22647, 43569, 8, 28, 19, 671 };
        int[] intArray43 = dateTimeField30.addWrapPartial((org.joda.time.ReadablePartial) localDateTime33, 543, intArray41, 0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology55);
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.millisOfDay();
        org.joda.time.DurationField durationField59 = julianChronology55.centuries();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology55.hourOfDay();
        org.joda.time.DurationField durationField61 = julianChronology55.years();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(100L);
        int int64 = localDateTime63.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.withPeriodAdded(readablePeriod67, (int) (short) 100);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone79);
        long long82 = chronology75.set((org.joda.time.ReadablePartial) localDateTime80, (long) '4');
        org.joda.time.DurationField durationField83 = chronology75.hours();
        org.joda.time.DateTimeField dateTimeField84 = chronology75.secondOfMinute();
        boolean boolean85 = localDateTime63.equals((java.lang.Object) dateTimeField84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime63.minusYears(26159301);
        int[] intArray89 = julianChronology55.get((org.joda.time.ReadablePartial) localDateTime63, (long) 436);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localDateTime33, 296, intArray89, 22698381);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[22647, 43569, 8, 28, 19, 671]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[22647, 43569, 8, 28, 19, 671]");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 52L + "'", long82 == 52L);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1969, 12, 18, 82800436]");
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = julianChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = julianChronology17.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology34.clockhourOfHalfday();
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str43 = dateTimeField37.getAsShortText((int) 'a', locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter6.withLocale(locale42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withChronology(chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withDefaultYear(437);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter46.withPivotYear((java.lang.Integer) 7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter46.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime53 = dateTimeFormatter51.parseLocalTime("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.DurationField durationField64 = julianChronology10.weeks();
        org.joda.time.DurationField durationField65 = julianChronology10.days();
        long long68 = durationField65.getMillis(65, 7097L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 5616000000L + "'", long68 == 5616000000L);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTime dateTime17 = dateTime0.minusDays(394);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        int int23 = mutableDateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        int int34 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.plus(readablePeriod35);
        org.joda.time.DateTime dateTime37 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L);
        int int46 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTime dateTime56 = dateTime41.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withField(dateTimeFieldType57, (int) (byte) 1);
        boolean boolean60 = dateTime37.isSupported(dateTimeFieldType57);
        int int61 = dateTime0.get(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1380 + "'", int23 == 1380);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.addMonths(22501797);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:00:00.052-01:00" + "'", str11, "1969-12-31T23:00:00.052-01:00");
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusHours(23);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusDays((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded(readableDuration8, 22489022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology21);
        long long27 = chronology21.add((long) 19410, 3622331L, 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 19410L + "'", long27 == 19410L);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DurationField durationField33 = property30.getLeapDurationField();
        boolean boolean34 = durationField33.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = julianChronology10.days();
        org.joda.time.DurationField durationField15 = julianChronology10.years();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = julianChronology10.get(readablePeriod16, 1646983042050L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology10.add(readablePeriod15, (long) (short) 100, (int) 'x');
        org.joda.time.DurationField durationField19 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.Chronology chronology14 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        boolean boolean16 = dateTimeField15.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.weekyears();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        mutableDateTime11.setChronology(chronology18);
        mutableDateTime11.setMillis(977875200000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime17.addMinutes(26159301);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.set((int) (byte) 1);
        int int27 = mutableDateTime26.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime26.copy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime44.withYearOfEra(2323);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime44);
        mutableDateTime17.setDate((org.joda.time.ReadableInstant) mutableDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setHourOfDay(22754183);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22754183 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = julianChronology10.add(readablePeriod30, 1645514177394L, 0);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology10.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = julianChronology10.getDateTimeMillis(1380, 26184569, 5, 2025, 19164, 22674088, 22673927);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514366136L + "'", long25 == 1645514366136L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514177394L + "'", long33 == 1645514177394L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean52 = dateTimeZone50.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone50);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = dateTimeZone50.getName(0L, locale55);
        java.lang.String str59 = dateTimeField47.getAsText(22657002, locale55);
        org.joda.time.DurationField durationField60 = dateTimeField47.getDurationField();
        long long62 = durationField60.getMillis((-292269055));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-01:00" + "'", str58, "-01:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "22657002" + "'", str59, "22657002");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1052168598000000L) + "'", long62 == (-1052168598000000L));
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DurationField durationField13 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.dayOfWeek();
        long long18 = dateTimeField15.add(31556952000L, 2022);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.secondOfDay();
        boolean boolean30 = property22.equals((java.lang.Object) property29);
        org.joda.time.LocalDateTime localDateTime32 = property22.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readablePeriod35);
        int int37 = localDateTime34.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.minuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        int int44 = mutableDateTime41.getMinuteOfDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readablePeriod53);
        int int55 = mutableDateTime41.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readablePeriod56);
        long long58 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime59 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = property38.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = property67.addWrapFieldToCopy((int) '#');
        int[] intArray70 = localDateTime69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localDateTime62, 1663, intArray70, 22699460);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1663");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 206257752000L + "'", long18 == 206257752000L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 69 + "'", int37 == 69);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1380 + "'", int44 == 1380);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 21852061420L + "'", long58 == 21852061420L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1969, 12, 31, 82800087]");
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology18 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekyear();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = julianChronology10.get(readablePartial20, (long) 66399365);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded(readableDuration41, 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((-18718));
        java.util.Date date46 = dateTime43.toDate();
        java.lang.String str47 = dateTime43.toString();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 06:19:26 GMT-01:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T06:19:26.318-01:00" + "'", str47, "2022-02-22T06:19:26.318-01:00");
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime2.getRoundingField();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.dayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 671);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withOffsetParsed();
        java.lang.StringBuffer stringBuffer35 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        java.lang.String str39 = mutableDateTime38.toString();
        mutableDateTime38.addMillis((int) '4');
        mutableDateTime38.add(1645514173852353L);
        mutableDateTime38.addMonths((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(stringBuffer35, (org.joda.time.ReadableInstant) mutableDateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514366600L + "'", long29 == 1645514366600L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str39, "1969-12-31T23:00:00.001-01:00");
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = property25.addToCopy(259200001L);
        org.joda.time.DateTime dateTime28 = property25.withMinimumValue();
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(100);
        org.joda.time.DateTime.Property property31 = dateTime28.millisOfDay();
        org.joda.time.DateTime.Property property32 = dateTime28.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal((long) 6);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(1645514155044L, dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(20110100L, dateTimeZone40);
        int int43 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime42.yearOfEra();
        boolean boolean45 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050366634L + "'", long21 == 1677050366634L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599994L) + "'", long36 == (-3599994L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3600000) + "'", int43 == (-3600000));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (long) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = gJChronology5.getDateTimeMillis((long) 378, 22748, 22700611, 0, 82560100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22748 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(gJChronology5);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) '4', chronology18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        int int39 = mutableDateTime36.getMinuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readablePeriod48);
        int int50 = mutableDateTime36.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = mutableDateTime22.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded(readableDuration53, 1970);
        org.joda.time.DateTime dateTime57 = dateTime49.minusMonths(435);
        org.joda.time.DateTime dateTime58 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime11.minusWeeks(2070);
        org.joda.time.Chronology chronology61 = localDateTime11.getChronology();
        int int62 = localDateTime11.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1380 + "'", int39 == 1380);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) localDateTime20, (long) '4');
        org.joda.time.Chronology chronology23 = chronology15.withUTC();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) '4');
        int[] intArray38 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, 0L);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, locale39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime34.plusMinutes(22694228);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withWeekyear(292272992);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minus(readablePeriod46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime2.setZone(dateTimeZone18);
        mutableDateTime2.setTime(1645514269247L);
        mutableDateTime2.setMillis(1677050228955L);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundCeiling();
        java.lang.String str26 = property24.getAsString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = locale18.getLanguage();
        java.lang.String str24 = locale18.toString();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "23" + "'", str19, "23");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("23");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime31 = dateTime27.minusWeeks(22498359);
        org.joda.time.DateTime dateTime33 = dateTime31.plus((long) 'x');
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime24.yearOfCentury();
        boolean boolean70 = property69.isLeap();
        org.joda.time.DurationField durationField71 = property69.getDurationField();
        org.joda.time.LocalDateTime localDateTime72 = property69.withMaximumValue();
        java.lang.String str73 = property69.getAsShortText();
        org.joda.time.LocalDateTime localDateTime75 = property69.addToCopy(22647);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "69" + "'", str73, "69");
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) 'u');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDateTime0.getValue(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(365, 259, 457375, 82800052, 82800001, 436);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800052 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getExtension('x');
        java.lang.String str5 = locale0.getISO3Country();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.millisOfDay();
        org.joda.time.DurationField durationField21 = julianChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeField22.getAsShortText((long) (byte) 10, locale24);
        java.util.Locale.Builder builder26 = builder6.setLocale(locale24);
        java.lang.String str27 = locale24.getVariant();
        java.lang.String str28 = locale0.getDisplayLanguage(locale24);
        java.util.Locale.setDefault(locale24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u82f1\u6587" + "'", str1, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23" + "'", str25, "23");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withHourOfDay(9);
        org.joda.time.DateTimeField dateTimeField29 = localDateTime22.getField(0);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 366, locale31);
        long long35 = dateTimeField16.getDifferenceAsLong(1645514313779L, 1645514156466L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "366" + "'", str32, "366");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        java.lang.String str22 = mutableDateTime21.toString();
        mutableDateTime21.setDate((long) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, (long) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime15.toDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.Chronology chronology60 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology52);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime45.property(dateTimeFieldType46);
        org.joda.time.MutableDateTime mutableDateTime64 = property62.addWrapField(1970);
        org.joda.time.MutableDateTime mutableDateTime65 = property62.roundHalfCeiling();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str22, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) localDateTime20, (long) '4');
        org.joda.time.Chronology chronology23 = chronology15.withUTC();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) '4');
        int[] intArray38 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, 0L);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, locale39);
        java.util.Locale.setDefault(locale39);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology53);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology53.millisOfDay();
        org.joda.time.DurationField durationField57 = julianChronology53.centuries();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology53.hourOfDay();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = dateTimeField58.getAsShortText((long) (byte) 10, locale60);
        java.util.Locale.Builder builder62 = builder42.setLocale(locale60);
        java.lang.String str63 = locale39.getDisplayScript(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        org.joda.time.Chronology chronology65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) str64, chronology65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "23" + "'", str61, "23");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology1.era();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1677050192045L, (org.joda.time.Chronology) gJChronology1);
        org.joda.time.DurationField durationField7 = gJChronology1.eras();
        java.lang.String str8 = gJChronology1.toString();
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[-01:00]" + "'", str8, "GJChronology[-01:00]");
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology44.dayOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime48.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey(100L);
        org.joda.time.Chronology chronology55 = julianChronology44.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology44.minuteOfDay();
        long long62 = julianChronology44.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology44.secondOfDay();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str67 = dateTimeField64.getAsShortText((-608), locale66);
        java.lang.String str68 = locale31.getDisplayLanguage(locale66);
        java.lang.String str69 = dateTimeZone24.getShortName(1645514279291L, locale31);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-46729900L) + "'", long62 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-608" + "'", str67, "-608");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u97d3\u6587" + "'", str68, "\u97d3\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-01:00" + "'", str69, "-01:00");
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder0.setRegion("100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder0.setVariant("2058-05-22T06:14:57.539-01:04");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2058-05-22T06:14:57.539-01:04 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "23" + "'", str19, "23");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology10.add(readablePeriod15, (long) (short) 100, (int) 'x');
        org.joda.time.DurationField durationField19 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = julianChronology10.add(readablePeriod22, (-1641599944L), 1645514184);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1641599944L) + "'", long25 == (-1641599944L));
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.minusMonths((int) (byte) 1);
        boolean boolean30 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusDays((int) ' ');
        boolean boolean43 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean44 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(1677050154549L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withEra(0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.getMutableDateTime();
        org.joda.time.DurationField durationField5 = property3.getRangeDurationField();
        java.lang.String str6 = property3.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(durationField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "31" + "'", str6, "31");
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay20 = dateTime19.toTimeOfDay();
        org.joda.time.DateTime.Property property21 = dateTime19.dayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale37 = new java.util.Locale("fr");
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale29, locale31, locale33, locale34, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList41);
        boolean boolean44 = dateTime23.equals((java.lang.Object) languageRangeList27);
        org.joda.time.DateTime dateTime46 = dateTime23.minus((long) 82800100);
        org.joda.time.DateTime dateTime48 = dateTime46.plusSeconds((int) (byte) 1);
        boolean boolean49 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.centuryOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "IT" + "'", str30, "IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear(35);
        boolean boolean17 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withDefaultYear(26156026);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(100L);
        int int39 = localDateTime38.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withPeriodAdded(readablePeriod42, (int) (short) 100);
        long long46 = chronology34.set((org.joda.time.ReadablePartial) localDateTime38, (long) (short) 0);
        org.joda.time.DateTime dateTime47 = dateTime27.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfCentury();
        org.joda.time.Chronology chronology58 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) '4', chronology56);
        int int61 = mutableDateTime60.getCenturyOfEra();
        boolean boolean62 = dateTime49.isBefore((org.joda.time.ReadableInstant) mutableDateTime60);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime60, "1985-11-22T07:16:24.776Z", 22757);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology30 = dateTimeFormatter2.getChronolgy();
        java.lang.Integer int31 = dateTimeFormatter2.getPivotYear();
        boolean boolean32 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) 'u');
        org.joda.time.DateTime dateTime35 = property30.withMinimumValue();
        org.joda.time.DateTime dateTime36 = property30.withMinimumValue();
        org.joda.time.DateTime dateTime37 = property30.roundHalfFloorCopy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        int int45 = dateTimeField44.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(100L);
        int int48 = localDateTime47.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int64 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57, intArray63);
        long long67 = dateTimeField44.add((long) (byte) -1, 0L);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("DateTimeField[halfdayOfDay]");
        java.lang.String str71 = dateTimeField44.getAsText((-27425236), locale70);
        java.lang.String str73 = locale70.getExtension('x');
        java.util.Set<java.lang.String> strSet74 = locale70.getUnicodeLocaleAttributes();
        int int75 = property30.getMaximumTextLength(locale70);
        java.lang.String str76 = locale70.getDisplayName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[3, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-27425236" + "'", str71, "-27425236");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        java.lang.String str15 = mutableDateTime14.toString();
        mutableDateTime14.setDate((long) (short) 100);
        int int18 = mutableDateTime14.getMinuteOfHour();
        int int19 = mutableDateTime14.getSecondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime14.getRoundingField();
        int int21 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str15, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfWeek();
        int int18 = dateTimeField17.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(1645514171263L, (org.joda.time.Chronology) gJChronology26);
        int[] intArray29 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime27, 10800001L);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField31 = julianChronology10.seconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1969, 12, 19, 7200001]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        int int11 = property5.getMaximumShortTextLength(locale6);
        boolean boolean12 = locale6.hasExtensions();
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale16.getDisplayVariant(locale18);
        java.lang.String str21 = locale14.getDisplayScript(locale18);
        java.lang.String str22 = locale6.getDisplayName(locale18);
        java.lang.String str23 = locale6.getCountry();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfDay();
        long long38 = chronology29.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.secondOfDay();
        boolean boolean50 = property42.equals((java.lang.Object) property49);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((long) 2022);
        int[] intArray54 = chronology29.get((org.joda.time.ReadablePartial) localDateTime52, (long) (-1));
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withPeriodAdded(readablePeriod55, 4);
        int[] intArray59 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime57, 20110100L);
        int int60 = localDateTime57.getMinuteOfHour();
        org.joda.time.DateTime dateTime61 = localDateTime57.toDateTime();
        org.joda.time.DateTime dateTime63 = dateTime61.minusMillis(2922789);
        org.joda.time.DateTime.Property property64 = dateTime61.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62689900L) + "'", long38 == (-62689900L));
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1969, 12, 31, 82799999]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1969, 12, 19, 16510100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        int int6 = property5.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.Object obj17 = null;
        boolean boolean18 = julianChronology11.equals(obj17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) '#');
        long long16 = dateTime13.getMillis();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getDisplayLanguage();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = dateTime13.toString("\u82f1\u6587\u52a0\u62ff\u5927)", locale18);
        java.lang.String str22 = locale18.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514368336L + "'", long16 == 1645514368336L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str21, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4" + "'", str22, "\uc601\uc5b4");
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.Instant instant21 = mutableDateTime2.toInstant();
        long long22 = instant21.getMillis();
        org.joda.time.Instant instant24 = instant21.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime25 = instant21.toMutableDateTime();
        org.joda.time.Instant instant27 = instant21.withMillis(1677050257950L);
        org.joda.time.Instant instant28 = instant21.toInstant();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61031145599999L) + "'", long22 == (-61031145599999L));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale9.getExtension('a');
        int int12 = property8.getMaximumShortTextLength(locale9);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        boolean boolean16 = locale13.hasExtensions();
        java.util.Locale.Builder builder17 = builder4.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setUnicodeLocaleKeyword("Property[dayOfMonth]", "2022-02-22T06:18:09.686-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Property[dayOfMonth] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        long long5 = property4.remainder();
        java.lang.String str6 = property4.getAsShortText();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1380" + "'", str6, "1380");
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime15.plusMonths((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime15.millisOfSecond();
        org.joda.time.DateTime dateTime28 = dateTime15.minusSeconds((-6));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime28.withTime(12, 953, 6, 26207);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 953 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        int int40 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        int int51 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readablePeriod52);
        org.joda.time.DateTime dateTime55 = dateTime50.plusYears(1);
        org.joda.time.DateTime dateTime58 = dateTime50.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime60 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int61 = localDateTime33.getMillisOfDay();
        long long63 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime33, (long) 6);
        org.joda.time.LocalDateTime.Property property64 = localDateTime33.dayOfWeek();
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = property64.setCopy("2022-02-22T06:18:29.999-01:00", locale66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:18:29.999-01:00\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1380 + "'", int40 == 1380);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 82800100 + "'", int61 == 82800100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1728000100L + "'", long63 == 1728000100L);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) (short) 1, 8);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(1645514255914L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        int int26 = mutableDateTime23.getMinuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        int int37 = mutableDateTime23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.plus(readablePeriod38);
        org.joda.time.DateTime dateTime41 = dateTime36.plusYears(1);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property46 = dateTime41.property(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime41.minusDays(82560001);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfSecond(378);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDate(82802025, 26171, 26184569);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26171 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1380 + "'", int26 == 1380);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1677050368579L + "'", long42 == 1677050368579L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        mutableDateTime2.addYears((int) 'x');
        mutableDateTime2.addWeekyears(26176590);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.year();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology19.hourOfHalfday();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology19);
        org.joda.time.Chronology chronology26 = julianChronology19.withUTC();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime2.toMutableDateTime(chronology26);
        java.lang.String str28 = mutableDateTime2.toString();
        mutableDateTime2.addHours(0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "26178679-12-27T23:00:00.001-01:00" + "'", str28, "26178679-12-27T23:00:00.001-01:00");
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JulianChronology[UTC]" + "'", str19, "JulianChronology[UTC]");
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        long long31 = dateTimeZone13.getMillisKeepLocal(dateTimeZone28, (long) 'a');
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1645514162333L, dateTimeZone28);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        boolean boolean36 = dateTimeZone28.equals((java.lang.Object) chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, 560);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 560");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str4, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 240097L + "'", long31 == 240097L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) 'a', 26171, 26206466, 1439, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.property(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100L);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withPeriodAdded(readablePeriod20, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean24 = localDateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime2.property(dateTimeFieldType23);
        java.util.Locale locale29 = new java.util.Locale("5", "Ora media di Greenwich");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = property25.set("33072992", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33072992 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals(locale29.toString(), "5_ORA MEDIA DI GREENWICH");
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.minuteOfDay();
        int int50 = dateTimeField47.getDifference(1645534800000L, 1645514160000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 344 + "'", int50 == 344);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded(readableDuration41, 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay((int) (short) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((long) (-608));
        boolean boolean49 = dateTime48.isEqualNow();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime25.setMonthOfYear((int) (byte) 1);
        mutableDateTime25.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime25.yearOfCentury();
        int int39 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime25.monthOfYear();
        org.joda.time.DateTime dateTime41 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime25.era();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime25.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1380 + "'", int39 == 1380);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter6.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = dateTimeFormatter6.parseLocalDateTime("English");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter6.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = dateTimeFormatter6.parseLocalDate("weekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        int int12 = dateTimeZone6.getOffsetFromLocal(23L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        int int19 = mutableDateTime16.getMinuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        int int30 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology42);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology42.era();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology42.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(1677050154549L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readablePeriod56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property62 = dateTime57.hourOfDay();
        int int63 = dateTime57.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = dateTime57.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay(23);
        boolean boolean67 = localDateTime47.isAfter((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.plus(readableDuration68);
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = locale72.getDisplayLanguage();
        java.lang.String str74 = locale72.getISO3Language();
        java.lang.String str76 = locale72.getExtension('x');
        java.lang.String str77 = locale72.getISO3Country();
        java.util.Locale.setDefault(category71, locale72);
        java.lang.String str79 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, 2922789, locale72);
        java.lang.String str80 = property31.getAsShortText(locale72);
        java.lang.String str81 = locale72.toLanguageTag();
        java.lang.String str82 = dateTimeZone6.getShortName((long) 21, locale72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = locale72.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1380 + "'", int19 == 1380);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 53 + "'", int63 == 53);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.FORMAT + "'", category71.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\uc601\uc5b4" + "'", str73, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "eng" + "'", str74, "eng");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2922789" + "'", str79, "2922789");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "53" + "'", str80, "53");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "en" + "'", str81, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-01:00" + "'", str82, "-01:00");
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        java.lang.Appendable appendable15 = null;
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant20 = instant17.toInstant();
        org.joda.time.Instant instant22 = instant20.minus(1645514275614L);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable15, (org.joda.time.ReadableInstant) instant20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusDays(26176590);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMillisOfSecond(43569);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43569 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "365" + "'", str4, "365");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = julianChronology55.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str69 = nameProvider62.getName(locale66, "English (Canada)", "Greenwich Mean Time");
        java.lang.String str70 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, (int) (short) 1, locale66);
        org.joda.time.LocalDateTime.Property property71 = localDateTime60.yearOfCentury();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        mutableDateTime74.setZone(dateTimeZone75);
        org.joda.time.Chronology chronology77 = mutableDateTime74.getChronology();
        mutableDateTime74.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime74.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime82 = property80.add(10800);
        org.joda.time.DateTime dateTime83 = localDateTime60.toDateTime((org.joda.time.ReadableInstant) mutableDateTime82);
        mutableDateTime82.setYear(22748);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertEquals(locale66.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(31, 36, 36, 31535889, 3044, 2134, 22676659);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31535889 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField17 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = gJChronology16.getDateTimeMillis(35, 54, 457087, 0, 66399365, 22666694, 82560055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66399365 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        boolean boolean4 = dateTime2.isBefore((long) 23);
        org.joda.time.DateTime dateTime6 = dateTime2.minusYears(43570);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4', chronology13);
        java.lang.String str18 = mutableDateTime17.toString();
        boolean boolean19 = dateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        int int20 = mutableDateTime17.getCenturyOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology31.dayOfYear();
        org.joda.time.DurationField durationField33 = julianChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.year();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology31.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) ' ');
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.hourOfDay();
        int[] intArray49 = julianChronology31.get((org.joda.time.ReadablePartial) localDateTime45, 1645514164504L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean58 = dateTime56.isSupported(dateTimeFieldType57);
        java.lang.String str59 = dateTimeFieldType57.toString();
        int int60 = localDateTime45.get(dateTimeFieldType57);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime17.property(dateTimeFieldType57);
        java.util.Locale locale64 = new java.util.Locale("eng");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime65 = property61.set("2022-02-22T06:18:28.897-01:00", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:18:28.897-01:00\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:00:00.052-01:00" + "'", str18, "1969-12-31T23:00:00.052-01:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2022, 2, 9, 22564504]");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "minuteOfDay" + "'", str59, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1380 + "'", int60 == 1380);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals(locale64.toString(), "eng");
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField23 = julianChronology10.hours();
        java.lang.String str24 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str24, "JulianChronology[-01:00,mdfw=1]");
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.year();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.lang.String str22 = dateTimeField17.getAsText(22650316, locale19);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22650316" + "'", str22, "22650316");
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) '4', chronology18);
        mutableDateTime22.setHourOfDay(0);
        int int25 = mutableDateTime22.getRoundingMode();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfYear();
        int int27 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setMillisOfSecond(69);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setMillisOfSecond((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3600000) + "'", int27 == (-3600000));
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(53);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekyear(53);
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime21 = property18.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property18.addToCopy(22751774);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        java.util.Locale locale33 = dateTimeFormatter32.getLocale();
        java.lang.StringBuffer stringBuffer34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.secondOfDay();
        boolean boolean46 = property38.equals((java.lang.Object) property45);
        org.joda.time.MutableDateTime mutableDateTime47 = property45.getMutableDateTime();
        mutableDateTime47.setYear(600);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter32.printTo(stringBuffer34, (org.joda.time.ReadableInstant) mutableDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514369505L + "'", long29 == 1645514369505L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645514207343L, dateTimeZone16);
        int[] intArray25 = new int[] { 22647, 43569, 8, 28, 19, 671 };
        int[] intArray27 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) localDateTime17, 543, intArray25, 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) (short) -1);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.DurationField durationField44 = julianChronology43.weeks();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.halfdayOfDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks((int) (short) -1);
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusYears(70);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) localDateTime63, (long) '4');
        org.joda.time.Chronology chronology66 = chronology58.withUTC();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        mutableDateTime69.setZone(dateTimeZone70);
        org.joda.time.Chronology chronology72 = mutableDateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfCentury();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology72);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone76);
        long long79 = chronology72.set((org.joda.time.ReadablePartial) localDateTime77, (long) '4');
        int[] intArray81 = chronology66.get((org.joda.time.ReadablePartial) localDateTime77, 0L);
        julianChronology43.validate((org.joda.time.ReadablePartial) localDateTime52, intArray81);
        int int83 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31, intArray81);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[22647, 43569, 8, 28, 19, 671]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[22647, 43569, 8, 28, 19, 671]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 52L + "'", long79 == 52L);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        java.lang.String str19 = property18.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        java.lang.String str16 = property15.getAsString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 625 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.minusMonths((int) (byte) 1);
        boolean boolean30 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusDays((int) ' ');
        boolean boolean43 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean44 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(1677050154549L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, 26159301);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays(82560001);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = localDateTime52.getField(259);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 259");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(292272992);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L);
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withPeriodAdded(readablePeriod32, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean36 = localDateTime28.isSupported(dateTimeFieldType35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, (-16400687), locale38);
        java.lang.String str41 = locale38.getVariant();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = dateTimeFormatter44.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatter44.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter44.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withPivotYear(16);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter49.withLocale(locale52);
        java.util.Locale locale54 = locale52.stripExtensions();
        java.lang.String str55 = locale38.getDisplayName(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = localDateTime7.toString("it-IT", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-16400687" + "'", str40, "-16400687");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(dateTimePrinter45);
        org.junit.Assert.assertNull(dateTimeParser46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.Chronology chronology23 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField24 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.millisOfSecond();
        long long27 = dateTimeField25.roundHalfFloor(1645514241851L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514241851L + "'", long27 == 1645514241851L);
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant6 = instant1.withDurationAdded(1677050154549L, 16);
        org.joda.time.Chronology chronology7 = instant1.getChronology();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        long long17 = dateTimeField15.roundHalfFloor(1728000100L);
        java.lang.String str19 = dateTimeField15.getAsShortText(2612969311557600000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 954000000L + "'", long17 == 954000000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "71" + "'", str19, "71");
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(540);
        int int18 = localDateTime13.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withSecondOfMinute(23);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear(441);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition(1645514218673L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getExtension('x');
        java.lang.String str29 = locale24.getISO3Country();
        java.lang.String str30 = dateTimeZone18.getShortName((long) 1, locale24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((-3308085895496L), dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone6, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514218673L + "'", long10 == 1645514218673L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-01:00" + "'", str30, "-01:00");
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = dateTime7.toString("0", locale25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale31.getExtension('a');
        int int34 = property30.getMaximumShortTextLength(locale31);
        java.lang.String str35 = locale31.getISO3Country();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.plus((long) 'x');
        int int39 = dateTime38.getCenturyOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology51);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology51.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology51.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property58.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime60.getFieldTypes();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.lang.String str68 = locale64.getDisplayVariant(locale66);
        java.lang.String str69 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, locale64);
        java.lang.String str70 = dateTime38.toString("52", locale64);
        java.lang.String str72 = locale64.getExtension('a');
        java.lang.String str73 = locale31.getDisplayScript(locale64);
        java.lang.String str74 = locale25.getDisplayLanguage(locale64);
        java.lang.String str75 = locale64.getVariant();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str11, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "82800056" + "'", str69, "82800056");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "52" + "'", str70, "52");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italian" + "'", str74, "Italian");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        int int12 = localDateTime11.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusYears(26207);
        int int15 = localDateTime11.getDayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.lang.String[] strArray13 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        int int16 = strSet14.size();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet14.stream();
        boolean boolean18 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Spliterator<java.lang.String> strSpliterator19 = strSet14.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet14.spliterator();
        java.lang.Object obj21 = null;
        boolean boolean22 = strSet14.equals(obj21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSpliterator19);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfDay();
        mutableDateTime2.setRounding(dateTimeField14);
        mutableDateTime2.addHours((int) (byte) 10);
        int int18 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime21.setMonthOfYear((int) (byte) 1);
        mutableDateTime21.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime21.yearOfCentury();
        int int35 = mutableDateTime21.getMinuteOfDay();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.addDays(292278993);
        long long39 = mutableDateTime21.getMillis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 540 + "'", int18 == 540);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 25252876137600001L + "'", long39 == 25252876137600001L);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone21);
        java.util.TimeZone timeZone27 = dateTimeZone21.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        java.lang.String str29 = timeZone27.getID();
        int int31 = timeZone27.getOffset(1970L);
        java.util.TimeZone.setDefault(timeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str4, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GMT-01:00" + "'", str29, "GMT-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) 'u');
        org.joda.time.DateTime dateTime35 = property30.withMinimumValue();
        org.joda.time.DurationField durationField36 = property30.getDurationField();
        int int39 = durationField36.getDifference(81626137200000L, 1690183034806L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2533 + "'", int39 == 2533);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime24.yearOfCentury();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        mutableDateTime73.setZone(dateTimeZone74);
        org.joda.time.Chronology chronology76 = mutableDateTime73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = mutableDateTime73.getZone();
        java.lang.String str79 = dateTimeZone77.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology81 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone77, (int) (short) 1);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology81);
        int int83 = property69.getDifference((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime85 = dateTime82.withDayOfYear((int) (byte) 100);
        org.joda.time.DateTime dateTime86 = dateTime85.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime91 = dateTime86.withTime(22638710, 22705, 26207, 44280100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22638710 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(julianChronology81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-53) + "'", int83 == (-53));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        org.joda.time.DateTimeField dateTimeField17 = localDateTime9.getField((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        mutableDateTime22.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        long long42 = chronology35.set((org.joda.time.ReadablePartial) localDateTime40, (long) '4');
        org.joda.time.Chronology chronology43 = chronology35.withUTC();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        long long56 = chronology49.set((org.joda.time.ReadablePartial) localDateTime54, (long) '4');
        int[] intArray58 = chronology43.get((org.joda.time.ReadablePartial) localDateTime54, 0L);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale59);
        java.util.Locale.setDefault(locale59);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology73 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology73);
        org.joda.time.DateTimeField dateTimeField75 = julianChronology73.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology73.millisOfDay();
        org.joda.time.DurationField durationField77 = julianChronology73.centuries();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology73.hourOfDay();
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = dateTimeField78.getAsShortText((long) (byte) 10, locale80);
        java.util.Locale.Builder builder82 = builder62.setLocale(locale80);
        java.lang.String str83 = locale59.getDisplayScript(locale80);
        int int84 = property19.getMaximumShortTextLength(locale80);
        java.lang.String str85 = property19.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str15, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(julianChronology73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "23" + "'", str81, "23");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Property[year]" + "'", str85, "Property[year]");
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DurationField durationField42 = julianChronology26.days();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey(100L);
        long long53 = dateTimeZone49.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.weekyear();
        java.lang.String str56 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.hourOfDay();
        org.joda.time.Instant instant59 = gJChronology54.getGregorianCutover();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey((long) 10);
        java.lang.String str71 = dateTimeZone67.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone67);
        org.joda.time.Chronology chronology74 = gJChronology54.withZone(dateTimeZone67);
        org.joda.time.DurationField durationField75 = gJChronology54.weeks();
        int int76 = durationField42.compareTo(durationField75);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GJChronology[-01:00]" + "'", str56, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        mutableDateTime2.addYears(15);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime2.property(dateTimeFieldType21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology40.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey(100L);
        org.joda.time.Chronology chronology51 = julianChronology40.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = julianChronology40.minuteOfDay();
        long long58 = julianChronology40.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology69 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65, (int) (short) 1);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale71.getDisplayLanguage();
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str75 = locale71.getExtension('x');
        java.lang.String str76 = locale71.getISO3Country();
        java.lang.String str77 = dateTimeZone65.getShortName((long) 1, locale71);
        org.joda.time.Chronology chronology78 = julianChronology40.withZone(dateTimeZone65);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        mutableDateTime81.setZone(dateTimeZone82);
        org.joda.time.Chronology chronology84 = mutableDateTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = mutableDateTime81.getZone();
        java.lang.String str87 = dateTimeZone85.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology89 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone85, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime90 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology89);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime94 = localDateTime92.plusDays((int) (short) 10);
        long long96 = julianChronology40.set((org.joda.time.ReadablePartial) localDateTime94, (long) 457087);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter29.withChronology((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeField dateTimeField98 = julianChronology40.halfdayOfDay();
        int int99 = mutableDateTime2.get(dateTimeField98);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-46729900L) + "'", long58 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(julianChronology69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc601\uc5b4" + "'", str72, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "eng" + "'", str73, "eng");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-01:00" + "'", str77, "-01:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
// flaky:         org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(julianChronology89);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1646983170651L + "'", long96 == 1646983170651L);
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertNotNull(dateTimeField98);
// flaky:         org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime13.minus(readableDuration49);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime54 = dateTime52.plus((long) 2025);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.era();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) dateTime54, (org.joda.time.Chronology) gJChronology55);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology13.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology13.getZone();
        org.joda.time.DurationField durationField27 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology13.millisOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        long long22 = dateTimeZone18.nextTransition((long) (short) 0);
        int int24 = dateTimeZone18.getStandardOffset(36070100L);
        org.joda.time.DateTime dateTime25 = mutableDateTime10.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        boolean boolean34 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(1645514157380L, dateTimeZone26);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.hourOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.Chronology chronology41 = gJChronology30.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology30.getZone();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-52), dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField15, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime2.property(dateTimeFieldType21);
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology35.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100L);
        int int56 = localDateTime55.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        int int65 = mutableDateTime62.getMinuteOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readablePeriod74);
        int int76 = mutableDateTime62.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.plus(readablePeriod77);
        org.joda.time.DateTime dateTime80 = dateTime75.plusYears(1);
        org.joda.time.DateTime dateTime83 = dateTime75.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime84 = localDateTime58.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime85 = dateTime50.withFields((org.joda.time.ReadablePartial) localDateTime58);
        int int86 = localDateTime58.getMillisOfDay();
        long long88 = julianChronology35.set((org.joda.time.ReadablePartial) localDateTime58, (long) 6);
        org.joda.time.DurationField durationField89 = julianChronology35.weeks();
        org.joda.time.DurationField durationField90 = julianChronology35.seconds();
        org.joda.time.DateTimeField dateTimeField91 = julianChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField92 = julianChronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField93 = julianChronology35.dayOfMonth();
        mutableDateTime24.setRounding(dateTimeField93);
        boolean boolean95 = dateTimeField93.isLenient();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1380 + "'", int65 == 1380);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 82800100 + "'", int86 == 82800100);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1728000100L + "'", long88 == 1728000100L);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.centuryOfEra();
        long long16 = property15.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property15.setCopy(22657758);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22657758 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1510249229080L) + "'", long16 == (-1510249229080L));
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime15.withEra(26181);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26181 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter32.getParser();
        boolean boolean34 = dateTimeFormatter32.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = dateTimeFormatter32.parseLocalDateTime("-1970-01-01T22:59:59.999-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514370979L + "'", long29 == 1645514370979L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeParser33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis(97);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) '4');
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        int[] intArray31 = chronology16.get((org.joda.time.ReadablePartial) localDateTime27, 0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        int int37 = mutableDateTime34.getMinuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        int int48 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readablePeriod49);
        org.joda.time.DateTime dateTime51 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.plus(readableDuration52);
        org.joda.time.DateTime dateTime54 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime27.minus(readableDuration55);
        int int57 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1380 + "'", int37 == 1380);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology10.add(readablePeriod15, (long) (short) 100, (int) 'x');
        org.joda.time.DurationField durationField19 = julianChronology10.halfdays();
        boolean boolean20 = durationField19.isPrecise();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = durationField19.add(1645514216000L, 1677050255730L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1677050255730 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("IT");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTime dateTime6 = mutableDateTime2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime20.getFieldTypes();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale24.getDisplayVariant(locale26);
        java.lang.String str29 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, locale24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology40.centuryOfEra();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str47 = dateTimeFieldType46.toString();
        int int48 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property49 = localDateTime20.property(dateTimeFieldType46);
        boolean boolean50 = gJChronology0.equals((java.lang.Object) localDateTime20);
        org.joda.time.DurationField durationField51 = gJChronology0.months();
        java.lang.Class<?> wildcardClass52 = gJChronology0.getClass();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "82800056" + "'", str29, "82800056");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "yearOfCentury" + "'", str47, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) ' ');
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        int int14 = localDateTime10.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter2.getZone();
        boolean boolean8 = dateTimeFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter2.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        mutableDateTime2.addYears(15);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.era();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("IT");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = property21.set("English (Canada)", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English (Canada)\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(10800001L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        java.lang.String str3 = property2.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[weekyear]" + "'", str3, "Property[weekyear]");
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1677050149186L);
        int int5 = dateTimeZone1.getOffset((long) 82560001);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property8.setCopy(352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 352 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.clockhourOfDay();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.lang.String str21 = timeZone20.getID();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.lang.String str23 = timeZone22.getID();
        int int25 = timeZone22.getOffset(0L);
        timeZone22.setID("2022-02-22T07:16:14.947Z");
        boolean boolean28 = timeZone20.hasSameRules(timeZone22);
        int int29 = timeZone20.getRawOffset();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) int29);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = julianChronology10.getDateTimeMillis(215, 22497718, 26223, (int) (byte) 0, 82560052, 22644, 22480557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82560052 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT-01:00" + "'", str21, "GMT-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT-01:00" + "'", str23, "GMT-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withWeekOfWeekyear(82800052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800052 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.getID();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.minusMonths((int) (byte) 1);
        boolean boolean30 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusDays((int) ' ');
        boolean boolean43 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean44 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(1677050154549L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, 26159301);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.withFieldAdded(durationFieldType53, (-52));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale.Builder builder10 = builder6.setLocale(locale9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) localDateTime21, (long) '4');
        org.joda.time.DurationField durationField24 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology16.hourOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        long long38 = chronology31.set((org.joda.time.ReadablePartial) localDateTime36, (long) '4');
        org.joda.time.Chronology chronology39 = chronology31.withUTC();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        int[] intArray54 = chronology39.get((org.joda.time.ReadablePartial) localDateTime50, 0L);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime50, (int) '#', locale56);
        java.lang.String str59 = locale56.getISO3Language();
        java.util.Locale.Builder builder60 = builder10.setLocale(locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder10.setLanguage("2022-02-22T07:17:09.326");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T07:17:09.326 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4" + "'", str57, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35" + "'", str58, "35");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "eng" + "'", str59, "eng");
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514371714L + "'", long25 == 1645514371714L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(10800001L);
        mutableDateTime1.add((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        long long5 = mutableDateTime1.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 303078994L + "'", long5 == 303078994L);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int3 = mutableDateTime0.get(dateTimeFieldType2);
        int int4 = mutableDateTime0.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfDay(457087);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457087 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) localDateTime33, (long) '4');
        org.joda.time.Chronology chronology36 = chronology28.withUTC();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) localDateTime47, (long) '4');
        int[] intArray51 = chronology36.get((org.joda.time.ReadablePartial) localDateTime47, 0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        int int57 = mutableDateTime54.getMinuteOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readablePeriod66);
        int int68 = mutableDateTime54.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.plus(readablePeriod69);
        org.joda.time.DateTime dateTime71 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.plus(readableDuration72);
        org.joda.time.DateTime dateTime74 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(100L);
        int int77 = localDateTime76.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.millisOfDay();
        org.joda.time.LocalDateTime localDateTime85 = property83.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime76.withFields((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime76.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime76.minusMonths((int) (byte) 1);
        boolean boolean91 = localDateTime47.isEqual((org.joda.time.ReadablePartial) localDateTime90);
        long long93 = julianChronology17.set((org.joda.time.ReadablePartial) localDateTime90, 1677050177601L);
        org.joda.time.DurationField durationField94 = julianChronology17.years();
        org.joda.time.DateTimeField dateTimeField95 = julianChronology17.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(22693, 513, 17198338, 3, 22705733, 513, 11, (org.joda.time.Chronology) julianChronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22705733 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1380 + "'", int57 == 1380);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1555199900L) + "'", long93 == (-1555199900L));
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.halfdays();
        long long25 = durationField22.getMillis(36375035L, 1677050289252L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1571401512000000L + "'", long25 == 1571401512000000L);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DurationField durationField13 = chronology5.hours();
        org.joda.time.DurationField durationField14 = chronology5.years();
        long long17 = durationField14.subtract(1677050154549L, 394L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-10756341845451L) + "'", long17 == (-10756341845451L));
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        long long19 = dateTimeZone13.convertUTCToLocal((long) 2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((-292269055), 22498359, 19164, 353, 722, 25, 30, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 353 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3597978L) + "'", long19 == (-3597978L));
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withPeriodAdded(readablePeriod3, 292272992);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMonths(100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.dayOfYear();
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        long long19 = dateTime15.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514372151L + "'", long19 == 1645514372151L);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.weekyearOfCentury();
        long long30 = julianChronology10.add((long) 19410, (long) 43570, 22635485);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = julianChronology10.getDateTimeMillis(1645514365661L, 2086, 22556026, (int) (byte) 0, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2086 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 986228100860L + "'", long30 == 986228100860L);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        int int23 = mutableDateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        int int34 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.DurationField durationField49 = chronology41.seconds();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime33.toMutableDateTime(chronology41);
        int int51 = property3.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime52 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property3.getFieldType();
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder55.setRegion("IT");
        java.util.Locale locale59 = new java.util.Locale("fr");
        java.util.Locale.Builder builder60 = builder55.setLocale(locale59);
        java.util.Locale.Builder builder63 = builder60.setExtension('a', "52");
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime68.getZone();
        java.lang.String str74 = dateTimeZone72.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology76 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology76.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology76.millisOfDay();
        org.joda.time.DurationField durationField80 = julianChronology76.centuries();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology76.hourOfDay();
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.lang.String str84 = dateTimeField81.getAsShortText((long) (byte) 10, locale83);
        java.util.Locale.Builder builder85 = builder65.setLocale(locale83);
        java.lang.String str86 = locale83.getVariant();
        java.lang.String str87 = locale83.getDisplayScript();
        java.lang.String str88 = locale64.getDisplayName(locale83);
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.lang.String str90 = locale89.getDisplayName();
        java.lang.String str91 = locale83.getDisplayVariant(locale89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime92 = property3.setCopy("2022-02-09T06:12:46.573-01:04", locale89);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-09T06:12:46.573-01:04\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1380 + "'", int23 == 1380);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr__#a-52");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(julianChronology76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "23" + "'", str84, "23");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "French" + "'", str88, "French");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\uc601\uc5b4" + "'", str90, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.toLanguageTag();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale0.getDisplayScript(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        int int21 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        int int32 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.plus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime31.plusYears(1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        int int42 = mutableDateTime39.getMinuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readablePeriod51);
        int int53 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime52.plus(readablePeriod54);
        org.joda.time.DateTime dateTime57 = dateTime52.plusYears(1);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime61 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.withPeriodAdded(readablePeriod62, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int66 = dateTime64.get(dateTimeFieldType65);
        boolean boolean67 = dateTime36.isSupported(dateTimeFieldType65);
        long long68 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1380 + "'", int21 == 1380);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1380 + "'", int42 == 1380);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1677050372434L + "'", long58 == 1677050372434L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53 + "'", int66 == 53);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-8760L) + "'", long68 == (-8760L));
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = nameProvider0.getName(locale1, "-0001-01-01T00:00:00.056", "UTC");
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale5.getDisplayVariant();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = nameProvider7.getName(locale8, "-0001-01-01T00:00:00.056", "UTC");
        java.lang.String str12 = locale5.getDisplayScript(locale8);
        java.lang.String str15 = nameProvider0.getName(locale5, "-01:00", "78");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) "-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-01:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getExtension('x');
        java.lang.String str46 = locale41.getISO3Country();
        java.lang.String str47 = dateTimeZone35.getShortName((long) 1, locale41);
        org.joda.time.Chronology chronology48 = julianChronology10.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone35);
        int int50 = dateTime49.getWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4" + "'", str42, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withTime(22759285, 26212427, (int) '4', (-30499236));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22759285 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = property25.addToCopy(259200001L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) ' ');
        org.joda.time.DateTime dateTime43 = dateTime39.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfMonth(1);
        int int46 = property25.getDifference((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property47 = dateTime39.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(100L);
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = property56.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime49.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime49.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(100L);
        int int69 = localDateTime68.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.withFields((org.joda.time.ReadablePartial) localDateTime71);
        int int73 = localDateTime63.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.property(dateTimeFieldType74);
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType74.getRangeDurationType();
        org.joda.time.DateTime dateTime78 = dateTime39.withFieldAdded(durationFieldType76, 17);
        org.joda.time.DateTime dateTime79 = dateTime78.withEarlierOffsetAtOverlap();
        boolean boolean81 = dateTime79.isBefore(1677050247956L);
        org.joda.time.DateTime dateTime83 = dateTime79.minusDays(0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050372703L + "'", long21 == 1677050372703L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 365 + "'", int46 == 365);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField23 = julianChronology10.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        int int8 = localDateTime5.getHourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.joda.time.DurationField durationField20 = julianChronology10.millis();
        org.joda.time.DurationField durationField21 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.centuryOfEra();
        java.lang.String str23 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str23, "JulianChronology[-01:00,mdfw=1]");
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-22T07:15:58.038Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:15:58.038Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusMinutes(9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute(17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str15, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        java.lang.String str45 = dateTimeFieldType12.toString();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType12.getDurationType();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime49.getZone();
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology57);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology57.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology57.year();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology57.dayOfMonth();
        org.joda.time.Chronology chronology64 = julianChronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType12.getField(chronology64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = chronology64.getDateTimeMillis(1645514310075L, (-3600000), 70, 11, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfDay" + "'", str45, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(julianChronology57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withLocale(locale20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        long long34 = dateTimeZone28.convertUTCToLocal((long) 2022);
        long long37 = dateTimeZone28.convertLocalToUTC((long) 15, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter17.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 0);
        java.lang.StringBuffer stringBuffer41 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer41, 1645514342240L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3597978L) + "'", long34 == (-3597978L));
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3600015L + "'", long37 == 3600015L);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime2.setYear(0);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 2022);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType2.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationField durationField20 = gJChronology18.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = gJChronology18.getDateTimeMillis(3992, 19164, 2058, 352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19164 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 379 + "'", int3 == 379);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3597978L) + "'", long16 == (-3597978L));
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.minusMonths((int) (byte) 1);
        boolean boolean30 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusDays((int) ' ');
        boolean boolean43 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean44 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(1677050154549L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusHours(22650316);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        int int25 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime24.plusYears(1);
        org.joda.time.DateTime dateTime32 = dateTime24.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int34 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime7.plusMonths(70);
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTime();
        long long39 = dateTime37.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1380 + "'", int14 == 1380);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 184636800100L + "'", long39 == 184636800100L);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long35 = dateTime27.getMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey(100L);
        long long46 = dateTimeZone42.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) long35, dateTimeZone42);
        org.joda.time.DateTime dateTime48 = localDateTime15.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        int int54 = mutableDateTime51.getMinuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readablePeriod63);
        int int65 = mutableDateTime51.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime64.plus((-61062681599999L));
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology69);
        java.lang.String str71 = mutableDateTime70.toString();
        mutableDateTime70.setDate((long) (short) 100);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology79 = mutableDateTime76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime76.getZone();
        mutableDateTime70.setZoneRetainFields(dateTimeZone80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology83);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        mutableDateTime84.setZone(dateTimeZone85);
        org.joda.time.Chronology chronology87 = mutableDateTime84.getChronology();
        org.joda.time.DateTimeZone dateTimeZone88 = mutableDateTime84.getZone();
        java.lang.String str90 = dateTimeZone88.getNameKey((long) 10);
        long long92 = dateTimeZone80.getMillisKeepLocal(dateTimeZone88, (long) (byte) 10);
        org.joda.time.DateTime dateTime93 = dateTime64.toDateTime(dateTimeZone88);
        long long95 = dateTimeZone42.getMillisKeepLocal(dateTimeZone88, 1645514236361L);
        long long98 = dateTimeZone42.convertLocalToUTC(365L, true);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514373177L + "'", long35 == 1645514373177L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1380 + "'", int54 == 1380);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str71, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
// flaky:         org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 10L + "'", long92 == 10L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1645514236361L + "'", long95 == 1645514236361L);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + 3600365L + "'", long98 == 3600365L);
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        mutableDateTime28.addDays(3043);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.setTime((int) (byte) -1, 2134, (-3600000), (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1380 + "'", int15 == 1380);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        int int19 = dateTime15.getWeekOfWeekyear();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DurationField durationField35 = julianChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.hourOfDay();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) (byte) 10, locale38);
        java.util.Locale.Builder builder40 = builder20.setLocale(locale38);
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getExtension('u');
        java.lang.String str46 = locale38.getDisplayLanguage(locale42);
        java.util.Calendar calendar47 = dateTime15.toCalendar(locale38);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.fromCalendarFields(calendar47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((-608));
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusSeconds(51);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = localDateTime50.getValue(2323);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2323");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23" + "'", str39, "23");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514373364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=19,SECOND=33,MILLISECOND=364,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readablePeriod24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int31 = localDateTime29.get(dateTimeFieldType30);
        int int32 = localDateTime27.indexOf(dateTimeFieldType30);
        java.lang.String str33 = localDateTime27.toString();
        int int34 = localDateTime27.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDateTime27.getFields();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime27.minusMinutes(9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime39.getFieldTypes();
        boolean boolean41 = julianChronology10.equals((java.lang.Object) localDateTime39);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 379 + "'", int31 == 379);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-0001-12-31T23:00:00.056" + "'", str33, "-0001-12-31T23:00:00.056");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = julianChronology10.get(readablePeriod26, 1645514362618L, 3840000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        int int6 = mutableDateTime2.getMinuteOfHour();
        int int7 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = mutableDateTime2.getRoundingField();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMonthOfYear(808);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 808 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = julianChronology10.add(readablePeriod30, 1645514177394L, 0);
        org.joda.time.DurationField durationField34 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514373527L + "'", long25 == 1645514373527L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514177394L + "'", long33 == 1645514177394L);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        mutableDateTime23.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime23.setZone(dateTimeZone39);
        boolean boolean41 = strSet3.equals((java.lang.Object) mutableDateTime23);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Calendar calendar44 = mutableDateTime23.toCalendar(locale42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfFloor();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-28857599999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=56,SECOND=0,MILLISECOND=1,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        long long19 = durationField16.subtract((long) 26181, 22667336);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-22667309819L) + "'", long19 == (-22667309819L));
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTime dateTime25 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (byte) 1);
        boolean boolean29 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(100L);
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withPeriodAdded(readablePeriod52, (int) (short) 100);
        long long56 = chronology44.set((org.joda.time.ReadablePartial) localDateTime48, (long) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime37.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.withDurationAdded(readableDuration58, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readableDuration61);
        boolean boolean63 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime5.plusMillis(292272992);
        org.joda.time.LocalDateTime.Property property66 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime.Property property67 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime5.plusYears(19410);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime5.withDate(808, 296, 589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 296 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.monthOfYear();
        org.joda.time.DurationField durationField32 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) '4', chronology36);
        int int41 = mutableDateTime40.getCenturyOfEra();
        boolean boolean42 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.hourOfDay();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.year();
        java.lang.Object obj45 = mutableDateTime40.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "1969-12-31T23:00:00.052-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1969-12-31T23:00:00.052-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1969-12-31T23:00:00.052-01:00");
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfDay();
        long long19 = dateTimeField17.roundCeiling((long) 26159301);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 26160000L + "'", long19 == 26160000L);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("70");
        int int3 = timeZone1.getOffset((long) 292278993);
        int int5 = timeZone1.getOffset((long) 364);
        java.util.TimeZone.setDefault(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long15 = dateTimeZone6.convertLocalToUTC((long) 15, true);
        java.util.TimeZone timeZone16 = dateTimeZone6.toTimeZone();
        timeZone16.setID("");
        java.util.Locale locale23 = new java.util.Locale("GMT", "2022-02-22T07:16:12.061");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = timeZone16.getDisplayName(false, 66, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 66");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600015L + "'", long15 == 3600015L);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals(locale23.toString(), "gmt_2022-02-22T07:16:12.061");
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.secondOfDay();
        boolean boolean17 = property9.equals((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int21 = localDateTime19.indexOf(dateTimeFieldType20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.DurationField durationField33 = julianChronology32.weeks();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.Chronology chronology43 = julianChronology32.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology32.hourOfDay();
        org.joda.time.DurationField durationField46 = julianChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType20.getField((org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology32.hourOfDay();
        org.joda.time.DurationField durationField49 = julianChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology32.yearOfEra();
        org.joda.time.DurationField durationField51 = julianChronology32.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(26181, 1970, 60, 22700611, (int) 'x', 65, (org.joda.time.Chronology) julianChronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22700611 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = julianChronology10.getDateTimeMillis(1677050247939L, 43570, 22496058, 31, 296);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43570 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        mutableDateTime2.addWeekyears(353);
        int int47 = mutableDateTime2.getYear();
        mutableDateTime2.addMonths(0);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2323 + "'", int47 == 2323);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22331, (int) (short) 1, 0, 22667336, 0, 352, 82560052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22667336 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        timeZone4.setID("GJChronology[Etc/UTC]");
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        int int10 = timeZone8.getOffset((long) 22);
        boolean boolean11 = timeZone4.hasSameRules(timeZone8);
        timeZone8.setRawOffset(99);
        boolean boolean14 = timeZone0.hasSameRules(timeZone8);
        timeZone8.setRawOffset(22679);
        timeZone8.setRawOffset(0);
        int int19 = timeZone8.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMinuteOfHour(292272992);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292272992 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        mutableDateTime7.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.Chronology chronology28 = chronology20.withUTC();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        long long41 = chronology34.set((org.joda.time.ReadablePartial) localDateTime39, (long) '4');
        int[] intArray43 = chronology28.get((org.joda.time.ReadablePartial) localDateTime39, 0L);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        org.joda.time.DurationField durationField59 = chronology51.hours();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone69);
        long long72 = chronology65.set((org.joda.time.ReadablePartial) localDateTime70, (long) '4');
        org.joda.time.DurationField durationField73 = chronology65.hours();
        int int74 = durationField59.compareTo(durationField73);
        long long77 = durationField59.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType78 = durationField59.getType();
        boolean boolean79 = localDateTime39.isSupported(durationFieldType78);
        boolean boolean80 = localDateTime3.isSupported(durationFieldType78);
        org.joda.time.LocalDateTime.Property property81 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property82 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy(22657002);
        org.joda.time.LocalDateTime localDateTime85 = property82.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 436);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withSecondOfMinute((int) '4');
        int int8 = localDateTime7.getDayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = julianChronology28.getZone();
        java.lang.Object obj34 = null;
        boolean boolean35 = julianChronology28.equals(obj34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 2000, (org.joda.time.Chronology) julianChronology28);
        int int37 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTimeISO();
        boolean boolean39 = dateTime38.isAfterNow();
        boolean boolean41 = dateTime38.isEqual(1646551063510L);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime.Property property39 = dateTime28.minuteOfHour();
        int int40 = dateTime28.getDayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime28.withCenturyOfEra(375);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.Instant instant3 = instant1.minus((long) 70);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant3.withDurationAdded(readableDuration4, 82800);
        long long7 = instant6.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514154486L + "'", long7 == 1645514154486L);
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        int int23 = mutableDateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        int int34 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.DurationField durationField49 = chronology41.seconds();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime33.toMutableDateTime(chronology41);
        int int51 = property3.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime53 = property3.addToCopy(1645514186399L);
        org.joda.time.DateTimeField dateTimeField54 = property3.getField();
        org.joda.time.LocalDateTime localDateTime55 = property3.getLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1380 + "'", int23 == 1380);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DateTimeField[halfdayOfDay]");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(1);
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.Chronology chronology9 = dateTimeFormatter7.getChronolgy();
        int int10 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter7.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime13 = dateTimeFormatter7.parseMutableDateTime("100");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(dateTimeParser11);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        long long6 = dateTimeZone2.adjustOffset((long) 1970, true);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setRegion("IT");
        java.util.Locale locale12 = new java.util.Locale("fr");
        java.util.Locale.Builder builder13 = builder8.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "52");
        java.util.Locale.Builder builder17 = builder13.clear();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        boolean boolean19 = localDateTime7.equals((java.lang.Object) builder18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder18.setScript("December");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: December [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1970L + "'", long6 == 1970L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(671, 3044, (int) (short) 100, 955, 22667336, 22682565, 22705);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime20.minusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime20.withPeriodAdded(readablePeriod26, 364);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050374486L + "'", long21 == 1677050374486L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getExtension('x');
        java.lang.String str46 = locale41.getISO3Country();
        java.lang.String str47 = dateTimeZone35.getShortName((long) 1, locale41);
        org.joda.time.Chronology chronology48 = julianChronology10.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField49 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology10.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4" + "'", str42, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime37.withDate(82560100, 26189286, 22495437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26189286 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DurationField durationField22 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology15.year();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekOfWeekyear();
        int int15 = dateTimeField12.getDifference(1645514288729L, (long) 2069);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2720 + "'", int15 == 2720);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(2058, (-608), 26189286, 560, 25, (int) (short) 0, 215);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 560 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.monthOfYear();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfDay();
        boolean boolean70 = property69.isLeap();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = julianChronology10.get(readablePeriod18, 1677050203013L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        long long47 = julianChronology25.set((org.joda.time.ReadablePartial) localDateTime36, 0L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.DurationField durationField61 = chronology53.hours();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        org.joda.time.DurationField durationField75 = chronology67.hours();
        int int76 = durationField61.compareTo(durationField75);
        long long79 = durationField61.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType80 = durationField61.getType();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime36.withFieldAdded(durationFieldType80, (int) '#');
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.monthOfYear();
        org.joda.time.LocalDateTime localDateTime84 = property83.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusHours(1645514184);
        int int87 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType89 = localDateTime86.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1123200056L + "'", long47 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 52L + "'", long79 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-292269054) + "'", int87 == (-292269054));
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology13.getZone();
        org.joda.time.DurationField durationField16 = gJChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.DurationField durationField18 = gJChronology13.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = gJChronology13.getDateTimeMillis(26176590, 22650, 217, 431);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22650 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PM");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.year();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology14.clockhourOfHalfday();
        boolean boolean21 = languageRange1.equals((java.lang.Object) dateTimeField20);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "pm" + "'", str2, "pm");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "pm" + "'", str3, "pm");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder8.build();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.era();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean29 = dateTimeZone27.isStandardOffset(1677050149186L);
        int int31 = dateTimeZone27.getOffset((long) 82560001);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.Chronology chronology33 = julianChronology22.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField34 = julianChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology22.year();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks((int) (short) -1);
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks((-1));
        int int55 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.Chronology chronology56 = localDateTime39.getChronology();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale57);
        java.lang.String str60 = locale10.getDisplayCountry(locale57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.year();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = julianChronology10.getDateTimeMillis(29, (-52), 292278993, 0, (-84125007), 344, 28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -84125007 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DurationField durationField14 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.Chronology chronology18 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey(100L);
        long long17 = dateTimeZone13.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.weekyear();
        java.lang.String str20 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.hourOfDay();
        org.joda.time.Instant instant23 = gJChronology18.getGregorianCutover();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        java.lang.String str35 = dateTimeZone31.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone31);
        org.joda.time.Chronology chronology38 = gJChronology18.withZone(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(26227009, 19045, 22757, 26171, (-292275054), 22751774, 0, dateTimeZone31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26171 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GJChronology[-01:00]" + "'", str20, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:00" + "'", str35, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DurationField durationField13 = julianChronology11.minutes();
        org.joda.time.DurationField durationField14 = julianChronology11.halfdays();
        org.joda.time.Chronology chronology15 = julianChronology11.withUTC();
        mutableDateTime0.setChronology((org.joda.time.Chronology) julianChronology11);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime0.monthOfYear();
        boolean boolean18 = property17.isLeap();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = julianChronology26.seconds();
        org.joda.time.DurationField durationField30 = julianChronology26.millis();
        org.joda.time.DurationField durationField31 = julianChronology26.hours();
        boolean boolean32 = julianChronology10.equals((java.lang.Object) durationField31);
        org.joda.time.DurationField durationField33 = julianChronology10.weekyears();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        java.lang.String str25 = mutableDateTime24.toString();
        mutableDateTime24.setDate((long) (short) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        mutableDateTime24.setZoneRetainFields(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        long long46 = dateTimeZone34.getMillisKeepLocal(dateTimeZone42, (long) (byte) 10);
        java.util.TimeZone timeZone47 = dateTimeZone34.toTimeZone();
        long long49 = dateTimeZone34.previousTransition((long) (short) 100);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime53.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = julianChronology61.dayOfYear();
        org.joda.time.DurationField durationField63 = julianChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology61.year();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology61.weekyearOfCentury();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str69 = locale68.getISO3Language();
        int int70 = dateTimeField67.getMaximumTextLength(locale68);
        java.lang.String str71 = dateTimeZone34.getShortName(1677050096L, locale68);
        java.lang.String str72 = dateTimeZone20.getName(1646983042050L, locale68);
        org.joda.time.chrono.JulianChronology julianChronology73 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        mutableDateTime77.setZone(dateTimeZone78);
        org.joda.time.Chronology chronology80 = mutableDateTime77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = mutableDateTime77.getZone();
        java.lang.String str83 = dateTimeZone81.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology85 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone81, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology85);
        org.joda.time.DateTimeField dateTimeField87 = julianChronology85.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology85.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology85.year();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology85);
        org.joda.time.DateTimeZone dateTimeZone91 = julianChronology85.getZone();
        long long93 = dateTimeZone20.getMillisKeepLocal(dateTimeZone91, 1645514331072L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str25, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zho" + "'", str69, "zho");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-01:00" + "'", str72, "-01:00");
        org.junit.Assert.assertNotNull(julianChronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
// flaky:         org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(julianChronology85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1645514331072L + "'", long93 == 1645514331072L);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.addWrapField((-18718));
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundHalfCeiling();
        java.lang.String str15 = property11.getAsText();
        java.lang.String str16 = property11.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2904092" + "'", str15, "2904092");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "centuryOfEra" + "'", str16, "centuryOfEra");
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = julianChronology11.get(readablePeriod16, (long) 66399365);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set(1645514265007L, 437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 437 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        long long16 = durationField13.add(1645514182563L, 353);
        long long18 = durationField13.getValueAsLong(52L);
        java.lang.String str19 = durationField13.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514535563L + "'", long16 == 1645514535563L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DurationField[seconds]" + "'", str19, "DurationField[seconds]");
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfMonth();
        mutableDateTime7.setYear(86399);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.minusMonths(3);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.minusHours(22666694);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = property37.getAsShortText(locale38);
        java.lang.Object obj42 = locale38.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "72" + "'", str41, "72");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "ja");
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = julianChronology10.getDateTimeMillis((int) (short) 1, (int) (short) 100, 808, 1380, 47, 22504027, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.weekyearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology31.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology31.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime19, (org.joda.time.Chronology) julianChronology31);
        int int40 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        int int46 = mutableDateTime43.getMinuteOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readablePeriod55);
        int int57 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) dateTime56);
        mutableDateTime43.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime43.add(readableDuration60);
        org.joda.time.Instant instant62 = mutableDateTime43.toInstant();
        mutableDateTime43.setDate(86399, 2, 10);
        int int67 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime39.era();
        org.joda.time.Instant instant70 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Instant instant71 = instant70.toInstant();
        org.joda.time.Instant instant73 = instant71.minus((long) 60);
        boolean boolean74 = mutableDateTime39.isAfter((org.joda.time.ReadableInstant) instant71);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str3, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1380 + "'", int46 == 1380);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime13.minus(readableDuration49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime13.withDayOfWeek(22697111);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22697111 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1380 + "'", int28 == 1380);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.lang.String[] strArray6 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15, (int) (short) 1);
        org.joda.time.DurationField durationField20 = julianChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology19.weekOfWeekyear();
        org.joda.time.Chronology chronology22 = julianChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.weekOfWeekyear();
        boolean boolean24 = strSet7.contains((java.lang.Object) julianChronology19);
        boolean boolean26 = strSet7.add("eng");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property41 = dateTime36.hourOfDay();
        org.joda.time.DateTime.Property property42 = dateTime36.yearOfEra();
        org.joda.time.DateTime.Property property43 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = property43.setCopy(4);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        boolean boolean48 = strSet7.remove((java.lang.Object) dateTime47);
        boolean boolean50 = strSet7.add("DurationField[years]");
        boolean boolean51 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.Set<java.lang.String> strSet52 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean53 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet52);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(julianChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField25 = gJChronology13.years();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfDay();
        mutableDateTime2.setRounding(dateTimeField14);
        mutableDateTime2.addHours((int) (byte) 10);
        int int18 = mutableDateTime2.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.secondOfMinute();
        int int20 = property19.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.weekOfWeekyear();
        long long17 = dateTimeField15.remainder((long) 56);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 255600056L + "'", long17 == 255600056L);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(722);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        mutableDateTime12.setWeekyear(2922730);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 22757);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        mutableDateTime23.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        mutableDateTime23.setZone(dateTimeZone39);
        boolean boolean41 = strSet3.equals((java.lang.Object) mutableDateTime23);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Calendar calendar44 = mutableDateTime23.toCalendar(locale42);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-28857599999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:04\",offset=-3840000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=56,SECOND=0,MILLISECOND=1,ZONE_OFFSET=-3840000,DST_OFFSET=0]");
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = localDateTime4.getField(22716870);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22716870");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField16 = julianChronology10.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = julianChronology10.getDateTimeMillis(1439, 22493226, 449, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22493226 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100L);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime16.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (short) 10);
        int[] intArray32 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime28, (long) 53);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime34.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime34.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime56);
        int int58 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.property(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getRangeDurationType();
        java.lang.String str62 = dateTimeFieldType59.toString();
        boolean boolean63 = localDateTime28.isSupported(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = localDateTime28.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1969, 12, 18, 82800053]");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "yearOfCentury" + "'", str62, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime20.plusYears(457087);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050375958L + "'", long21 == 1677050375958L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T06:17:47.617-01:00");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48, (int) (short) 1);
        org.joda.time.DurationField durationField53 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology52.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = julianChronology52.withUTC();
        org.joda.time.DurationField durationField56 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology52);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = julianChronology52.getDateTimeMillis(10800, 27261992, 22635485, 217, 10800, 0, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 217 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.Chronology chronology23 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField24 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField26 = dateTimeField25.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNull(durationField26);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        mutableDateTime11.setChronology(chronology18);
        int int21 = mutableDateTime11.getDayOfWeek();
        mutableDateTime11.addMinutes(216);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(604800099L, dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime17.getCenturyOfEra();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.dayOfWeek();
        org.joda.time.Chronology chronology31 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField32 = julianChronology10.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = julianChronology10.add(1645514288251L, 1677050370242L, 22694228);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1677050370242 * 22694228");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514376137L + "'", long25 == 1645514376137L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey(100L);
        long long30 = dateTimeZone26.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) long19, dateTimeZone26);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) 'x');
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths(435);
        org.joda.time.DateTime dateTime38 = dateTime32.withWeekOfWeekyear(1);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant40 = dateTime32.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime32.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514376166L + "'", long19 == 1645514376166L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(instant40);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = julianChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = julianChronology17.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology34.clockhourOfHalfday();
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str43 = dateTimeField37.getAsShortText((int) 'a', locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter6.withLocale(locale42);
        java.lang.StringBuffer stringBuffer45 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.Chronology chronology54 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) '4', chronology52);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.weekyear();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableDateTime56.add(readablePeriod58, 9);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime56.copy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter44.printTo(stringBuffer45, (org.joda.time.ReadableInstant) mutableDateTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = julianChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = julianChronology17.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        java.lang.Integer int24 = dateTimeFormatter23.getPivotYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundFloorCopy();
        int int71 = property69.getMinimumValueOverall();
        int int72 = property69.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1380 + "'", int34 == 1380);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean52 = dateTimeZone50.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone50);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = dateTimeZone50.getName(0L, locale55);
        java.lang.String str59 = dateTimeField47.getAsText(22657002, locale55);
        java.util.Locale locale60 = locale55.stripExtensions();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-01:00" + "'", str58, "-01:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "22657002" + "'", str59, "22657002");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey(100L);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.minuteOfDay();
        long long29 = julianChronology11.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology11.clockhourOfHalfday();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(100L);
        long long41 = dateTimeZone37.nextTransition((long) (short) 0);
        int int43 = dateTimeZone37.getStandardOffset(36070100L);
        java.lang.String str45 = dateTimeZone37.getName(10800001L);
        org.joda.time.Chronology chronology46 = julianChronology11.withZone(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(1677050192045L, dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withSecondOfMinute(26206466);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26206466 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-46729900L) + "'", long29 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3600000) + "'", int43 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale.Builder builder10 = builder6.setLocale(locale9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) localDateTime21, (long) '4');
        org.joda.time.DurationField durationField24 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology16.hourOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        long long38 = chronology31.set((org.joda.time.ReadablePartial) localDateTime36, (long) '4');
        org.joda.time.Chronology chronology39 = chronology31.withUTC();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        int[] intArray54 = chronology39.get((org.joda.time.ReadablePartial) localDateTime50, 0L);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime50, (int) '#', locale56);
        java.lang.String str59 = locale56.getISO3Language();
        java.util.Locale.Builder builder60 = builder10.setLocale(locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder63 = builder60.setExtension('a', "2022-02-22T06:18:23.058-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T06:18:23.058 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English" + "'", str57, "English");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35" + "'", str58, "35");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "eng" + "'", str59, "eng");
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = julianChronology10.get(readablePeriod19, 1645514207343L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime10.add(readablePeriod11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime10.add(readableDuration13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.era();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("IT");
        java.lang.String[] strArray4 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.Chronology chronology20 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.weekOfWeekyear();
        boolean boolean22 = strSet5.contains((java.lang.Object) julianChronology17);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology17.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology17.getZone();
        long long26 = dateTimeZone24.previousTransition((long) 9);
        java.lang.String str28 = dateTimeZone24.getShortName(9L);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.DurationField durationField42 = julianChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.weekOfWeekyear();
        org.joda.time.Chronology chronology44 = julianChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology41.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str48 = locale46.getExtension('a');
        int int49 = dateTimeField45.getMaximumTextLength(locale46);
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getDisplayName();
        java.lang.String str52 = locale50.getDisplayName();
        java.lang.String str53 = locale46.getDisplayName(locale50);
        java.lang.String str54 = dateTimeZone24.getName(1645514157888L, locale50);
        java.lang.String str55 = locale1.getDisplayScript(locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = locale1.getUnicodeLocaleType("2022-02-22T06:15:03.671-01:04");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T06:15:03.671-01:04");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English" + "'", str51, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English" + "'", str53, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(1677050154549L, (org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology12.getZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1678259756615L, dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology13.getZone();
        org.joda.time.DurationField durationField16 = gJChronology13.months();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = gJChronology13.getDateTimeMillis(26200334, (-3600000), 36, (-2022), 28, 296, 441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology13.getZone();
        org.joda.time.DurationField durationField16 = gJChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.DurationField durationField18 = gJChronology13.seconds();
        org.joda.time.DurationField durationField19 = gJChronology13.months();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMonths(19);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(1645514157380L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(0);
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime.Property property27 = dateTime23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.plus((long) 'x');
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded(1645514220833L, (-3600000));
        long long37 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean44 = dateTimeZone42.isStandardOffset(1677050149186L);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = dateTimeZone42.getShortName((long) 10, locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter40.withLocale(locale46);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.getISO3Language();
        java.lang.String str53 = locale49.getExtension('x');
        java.lang.String str54 = locale49.getISO3Country();
        java.lang.String str55 = locale49.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getDisplayVariant();
        java.lang.String str58 = locale49.getDisplayVariant(locale56);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale59.getDisplayLanguage(locale60);
        java.lang.String str63 = locale49.getDisplayScript(locale60);
        java.lang.String str64 = locale46.getDisplayCountry(locale60);
        java.lang.String str65 = property27.getAsShortText(locale46);
        org.joda.time.DateTime dateTime66 = property27.getDateTime();
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale67.getDisplayVariant(locale69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        java.lang.String str78 = locale76.getExtension('a');
        int int79 = property75.getMaximumShortTextLength(locale76);
        java.lang.String str80 = locale76.getISO3Country();
        java.lang.String str81 = locale69.getDisplayVariant(locale76);
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.lang.String str83 = locale82.getDisplayLanguage();
        java.lang.String str84 = locale82.getISO3Language();
        java.lang.String str86 = locale82.getExtension('x');
        java.lang.String str87 = locale76.getDisplayLanguage(locale82);
        int int88 = property27.getMaximumShortTextLength(locale82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime89 = property10.setCopy("\u82f1\u8a9e\u30ab\u30ca\u30c0)", locale82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (????)\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9794727504L + "'", long37 == 9794727504L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English" + "'", str50, "English");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanese" + "'", str62, "Japanese");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "8" + "'", str65, "8");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "English" + "'", str83, "English");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "eng" + "'", str84, "eng");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "English" + "'", str87, "English");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        int int23 = mutableDateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        int int34 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.DurationField durationField49 = chronology41.seconds();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime33.toMutableDateTime(chronology41);
        int int51 = property3.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime52 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime54 = property3.addWrapFieldToCopy(3);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusYears(22);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusYears(11);
        java.lang.String str61 = localDateTime58.toString();
        int int62 = localDateTime58.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime58.withDayOfYear(418);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 418 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1380 + "'", int23 == 1380);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1991-12-31T23:00:00.055" + "'", str61, "1991-12-31T23:00:00.055");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 82800055 + "'", int62 == 82800055);
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1677050148089L, chronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(82800052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology13.minuteOfDay();
        long long28 = dateTimeField25.addWrapField(1645514182331L, 53);
        long long30 = dateTimeField25.roundHalfEven(1645514331725L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645517362331L + "'", long28 == 1645517362331L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514340000L + "'", long30 == 1645514340000L);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfDay();
        mutableDateTime2.setRounding(dateTimeField14);
        mutableDateTime2.addHours((int) (byte) 10);
        int int18 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime21.setMonthOfYear((int) (byte) 1);
        mutableDateTime21.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime21.yearOfCentury();
        int int35 = mutableDateTime21.getMinuteOfDay();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.addDays(292278993);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime21.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 540 + "'", int18 == 540);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, (int) (short) 0);
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.Chronology chronology26 = julianChronology15.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.Chronology chronology36 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfDay();
        long long43 = chronology34.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime50.secondOfDay();
        boolean boolean55 = property47.equals((java.lang.Object) property54);
        org.joda.time.LocalDateTime localDateTime57 = property47.addToCopy((long) 2022);
        int[] intArray59 = chronology34.get((org.joda.time.ReadablePartial) localDateTime57, (long) (-1));
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.withPeriodAdded(readablePeriod60, 4);
        int[] intArray64 = julianChronology15.get((org.joda.time.ReadablePartial) localDateTime62, 20110100L);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.plusSeconds(100);
        org.joda.time.Chronology chronology67 = localDateTime62.getChronology();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        mutableDateTime70.setZone(dateTimeZone71);
        org.joda.time.Chronology chronology73 = mutableDateTime70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = mutableDateTime70.getZone();
        java.lang.String str76 = dateTimeZone74.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology78 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone74, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology78.dayOfYear();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology78.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.millisOfDay();
        org.joda.time.LocalDateTime localDateTime85 = property84.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime86 = property84.roundHalfCeilingCopy();
        java.util.Locale.Builder builder88 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder90 = builder88.setRegion("IT");
        java.util.Locale locale92 = new java.util.Locale("fr");
        java.util.Locale.Builder builder93 = builder88.setLocale(locale92);
        java.lang.String str94 = dateTimeField80.getAsShortText((org.joda.time.ReadablePartial) localDateTime86, 51, locale92);
        int[] intArray96 = chronology67.get((org.joda.time.ReadablePartial) localDateTime86, (long) 292278993);
        org.joda.time.DateTime dateTime97 = dateTime4.toDateTime(chronology67);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-62689900L) + "'", long43 == (-62689900L));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1969, 12, 31, 82799999]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1969, 12, 19, 16510100]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(julianChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals(locale92.toString(), "fr");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "51" + "'", str94, "51");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1970, 1, 4, 33078993]");
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getExtension('x');
        java.lang.String str14 = locale9.getISO3Country();
        java.util.Locale.Builder builder15 = builder5.setLocale(locale9);
        java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("hours");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder15.setUnicodeLocaleKeyword("26212427", "22767591");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 26212427 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean8 = dateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime6.minusDays(22770803);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.DurationField durationField43 = julianChronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.secondOfMinute();
        boolean boolean62 = julianChronology42.equals((java.lang.Object) chronology52);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey(100L);
        long long73 = dateTimeZone69.nextTransition((long) (short) 0);
        int int75 = dateTimeZone69.getStandardOffset(36070100L);
        java.lang.String str77 = dateTimeZone69.getName(10800001L);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.Chronology chronology79 = chronology52.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime80 = dateTime29.withChronology(chronology52);
        org.joda.time.DateTime dateTime82 = dateTime29.withYearOfEra(6);
        org.joda.time.DateTime.Property property83 = dateTime82.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3600000) + "'", int75 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-01:00" + "'", str77, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-01-08T07:17:01.385Z");
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTimeISO();
        mutableDateTime3.addWeeks(97);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        org.joda.time.Chronology chronology28 = julianChronology17.withZone(dateTimeZone25);
        long long32 = chronology28.add((long) 87, (-3599994L), 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(69, 43570, 0, 2533, 17, (int) 'a', 2922789, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2533 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-35999853L) + "'", long32 == (-35999853L));
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime.Property property38 = localDateTime24.centuryOfEra();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder40.setRegion("IT");
        java.util.Locale locale44 = new java.util.Locale("fr");
        java.util.Locale.Builder builder45 = builder40.setLocale(locale44);
        java.util.Locale.Builder builder48 = builder45.setExtension('a', "52");
        java.util.Locale locale49 = builder48.build();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime53.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology61);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology61.millisOfDay();
        org.joda.time.DurationField durationField65 = julianChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology61.hourOfDay();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = dateTimeField66.getAsShortText((long) (byte) 10, locale68);
        java.util.Locale.Builder builder70 = builder50.setLocale(locale68);
        java.lang.String str71 = locale68.getVariant();
        java.lang.String str72 = locale68.getDisplayScript();
        java.lang.String str73 = locale49.getDisplayName(locale68);
        java.lang.String str74 = locale39.getDisplayScript(locale49);
        int int75 = property38.getMaximumTextLength(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = property38.addToCopy(1645514171263L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164551417126300");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr__#a-52");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "23" + "'", str69, "23");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "French" + "'", str73, "French");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusDays((int) ' ');
        boolean boolean30 = localDateTime19.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.withMillisOfDay(35);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("seconds");
        java.lang.String str36 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 575, locale35);
        long long39 = dateTimeField17.addWrapField(1677050264010L, 22);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "seconds");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "575" + "'", str36, "575");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1677050264032L + "'", long39 == 1677050264032L);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology4 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        long long7 = dateTimeZone3.adjustOffset((long) 1970, true);
        int int9 = dateTimeZone3.getOffsetFromLocal(1645514158038L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1645514215659L, dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(julianChronology4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1970L + "'", long7 == 1970L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3840000) + "'", int9 == (-3840000));
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField15 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.Chronology chronology17 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField18 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime21 = property19.addToCopy(671);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfCeilingCopy();
        int int27 = localDateTime26.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str29 = dateTimeFieldType28.toString();
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        org.joda.time.DateTime dateTime35 = dateTime21.withFieldAdded(durationFieldType33, (-874));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minuteOfHour" + "'", str29, "minuteOfHour");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("GJChronology[Etc/UTC]");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("6");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        java.lang.String str27 = mutableDateTime26.toString();
        mutableDateTime26.setDate((long) (short) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime23.toDateTime(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.dayOfWeek();
        boolean boolean42 = dateTime12.equals((java.lang.Object) dateTimeField41);
        java.util.Locale locale46 = new java.util.Locale("yearOfCentury", "yearOfCentury");
        java.lang.String str47 = locale46.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = dateTimeField41.getAsShortText(26189286, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26189286");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str27, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(locale46.toString(), "yearofcentury_YEAROFCENTURY");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey(100L);
        long long19 = dateTimeZone15.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) localDateTime5, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(gJChronology20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.secondOfDay();
        org.joda.time.Instant instant13 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Chronology chronology17 = gJChronology11.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology11.hours();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        java.util.Locale locale2 = new java.util.Locale("-608", "26188322");
        org.junit.Assert.assertEquals(locale2.toString(), "-608_26188322");
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMillis((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime21.minuteOfHour();
        org.joda.time.DurationField durationField27 = property26.getLeapDurationField();
        org.joda.time.DateTime dateTime28 = property26.roundHalfFloorCopy();
        boolean boolean29 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.plusHours(20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        mutableDateTime11.setChronology(chronology18);
        int int21 = mutableDateTime11.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDate(2000, 435, 997);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 435 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        long long13 = dateTimeZone7.convertUTCToLocal((long) 2022);
        long long15 = dateTimeZone7.previousTransition(1645514152918L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 608, dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime17.getValue(66399365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 66399365");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3597978L) + "'", long13 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514152918L + "'", long15 == 1645514152918L);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy((int) 'x');
        org.joda.time.DateTime dateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology44);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology44.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = julianChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = julianChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology44.clockhourOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks((int) (short) -1);
        int int56 = localDateTime55.getYearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime59.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks((-1));
        int int71 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        long long73 = julianChronology44.set((org.joda.time.ReadablePartial) localDateTime70, 1645514184130L);
        org.joda.time.DateTime dateTime74 = dateTime33.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTime dateTime76 = dateTime74.minusHours(2323);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(julianChronology67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1646119177679L + "'", long73 == 1646119177679L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.Instant instant21 = mutableDateTime2.toInstant();
        long long22 = instant21.getMillis();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        boolean boolean32 = dateTimeZone29.isFixed();
        org.joda.time.DateTime dateTime33 = instant21.toDateTime(dateTimeZone29);
        org.joda.time.Instant instant35 = instant21.plus((long) (short) 1);
        boolean boolean36 = instant21.isAfterNow();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61031145599999L) + "'", long22 == (-61031145599999L));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DurationField durationField15 = julianChronology10.weeks();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DurationField durationField17 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.clockhourOfDay();
        int int21 = dateTimeField19.getMaximumValue((long) 22686569);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str16, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 24 + "'", int21 == 24);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology10.getZone();
        org.joda.time.DurationField durationField14 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(435);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        int int25 = mutableDateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        int int36 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readablePeriod37);
        long long39 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime41 = dateTime35.plusWeeks((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime41.withMonthOfYear(161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 161 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1380 + "'", int25 == 1380);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 21852061420L + "'", long39 == 21852061420L);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514154556L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.plus((long) 20);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant9 = instant7.minus(1645516354019L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField26 = julianChronology10.years();
        org.joda.time.DurationField durationField27 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.dayOfWeek();
        org.joda.time.Chronology chronology31 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField32 = julianChronology10.weekyears();
        long long35 = durationField32.subtract(0L, 26176590);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514377860L + "'", long25 == 1645514377860L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-826070356540800000L) + "'", long35 == (-826070356540800000L));
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withDefaultYear((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 409);
        java.io.Writer writer16 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey(100L);
        org.joda.time.Chronology chronology38 = julianChronology27.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(100L);
        int int45 = localDateTime44.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        int int54 = mutableDateTime51.getMinuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readablePeriod63);
        int int65 = mutableDateTime51.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.plus(readablePeriod66);
        org.joda.time.DateTime dateTime69 = dateTime64.plusYears(1);
        org.joda.time.DateTime dateTime72 = dateTime64.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime73 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        int int74 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime47.plusMonths(70);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.lang.String str79 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, (int) '#', locale78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime47.minusWeeks(10);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(writer16, (org.joda.time.ReadablePartial) localDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1380 + "'", int54 == 1380);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "35" + "'", str79, "35");
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded(readableDuration32, 22);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime31.getZone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42, (int) (short) 1);
        long long48 = dateTimeZone42.convertUTCToLocal((long) 2022);
        long long50 = dateTimeZone42.previousTransition(1645514152918L);
        java.lang.String str52 = dateTimeZone42.getNameKey(3600000L);
        java.lang.String str54 = dateTimeZone42.getNameKey((long) 31535889);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        long long57 = dateTimeZone35.getMillisKeepLocal(dateTimeZone42, 1645514273532L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, 26176590);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 26176590");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(julianChronology46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3597978L) + "'", long48 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514152918L + "'", long50 == 1645514152918L);
// flaky:         org.junit.Assert.assertNull(str52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514273532L + "'", long57 == 1645514273532L);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.joda.time.DurationField durationField20 = julianChronology10.millis();
        org.joda.time.DurationField durationField21 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.centuryOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property45 = dateTime40.hourOfDay();
        int int46 = dateTime40.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = dateTime40.toLocalDateTime();
        int int48 = localDateTime47.getMinuteOfHour();
        int int49 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.weekyear();
        long long52 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime47, 1677050277928L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 19 + "'", int48 == 19);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1646637578041L + "'", long52 == 1646637578041L);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.secondOfDay();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField30.set((long) 19, 22718322);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22718322 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey(100L);
        long long30 = dateTimeZone26.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) long19, dateTimeZone26);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) 'x');
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths(435);
        org.joda.time.DateTime dateTime38 = dateTime32.withWeekOfWeekyear(1);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514378078L + "'", long19 == 1645514378078L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 6);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L);
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withPeriodAdded(readablePeriod26, (int) (short) 100);
        long long30 = chronology18.set((org.joda.time.ReadablePartial) localDateTime22, (long) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime11.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.minus(readableDuration34);
        int int36 = dateTime31.getMonthOfYear();
        int int37 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property38 = dateTime31.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599994L) + "'", long3 == (-3599994L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField20 = julianChronology10.halfdays();
        long long22 = durationField20.getMillis(100);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4320000000L + "'", long22 == 4320000000L);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '4', chronology14);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded(readableDuration49, 1970);
        org.joda.time.DateTime dateTime53 = dateTime51.withMillisOfDay((int) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths(449);
        org.joda.time.DateTime dateTime56 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks(26215889);
        org.joda.time.DateTime dateTime61 = dateTime56.minusHours(51);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1380 + "'", int35 == 1380);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology10.add(readablePeriod17, 0L, 575);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime28.withTime(26206466, (-292269055), 86399, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26206466 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology18 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField15 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField16.set((long) 22638710, "0540-02-23T06:18:53.383");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0540-02-23T06:18:53.383\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        long long15 = dateTimeField13.roundHalfEven((long) 23);
        int int17 = dateTimeField13.get(1677050272899L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 23L + "'", long15 == 23L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22672899 + "'", int17 == 22672899);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        int int19 = mutableDateTime2.getYear();
        mutableDateTime2.addMinutes(26227009);
        int int22 = mutableDateTime2.getMinuteOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 229 + "'", int22 == 229);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.millisOfDay();
        java.lang.String str21 = dateTimeField19.getAsText(1645514157888L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) ' ');
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = dateTime35.toLocalDateTime();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.setRegion("IT");
        java.util.Locale locale43 = new java.util.Locale("fr");
        java.util.Locale.Builder builder44 = builder39.setLocale(locale43);
        java.util.Locale.Builder builder47 = builder44.setExtension('a', "52");
        java.util.Locale locale48 = builder47.build();
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime52.getZone();
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology60);
        org.joda.time.DateTimeField dateTimeField62 = julianChronology60.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.millisOfDay();
        org.joda.time.DurationField durationField64 = julianChronology60.centuries();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.hourOfDay();
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = dateTimeField65.getAsShortText((long) (byte) 10, locale67);
        java.util.Locale.Builder builder69 = builder49.setLocale(locale67);
        java.lang.String str70 = locale67.getVariant();
        java.lang.String str71 = locale67.getDisplayScript();
        java.lang.String str72 = locale48.getDisplayName(locale67);
        java.lang.String str73 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 100, locale48);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime37.minusHours(22705733);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDateTime75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22557888" + "'", str21, "22557888");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr__#a-52");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(julianChronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "23" + "'", str68, "23");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "French" + "'", str72, "French");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.secondOfDay();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.secondOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = julianChronology14.weeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        long long29 = julianChronology14.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DurationField durationField30 = julianChronology14.years();
        org.joda.time.DurationField durationField31 = julianChronology14.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter32.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter32.getPrinter();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfYear();
        mutableDateTime37.setDate((org.joda.time.ReadableInstant) mutableDateTime43);
        mutableDateTime37.setMonthOfYear((int) (byte) 1);
        mutableDateTime37.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime37.yearOfCentury();
        int int51 = mutableDateTime37.getMinuteOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readablePeriod60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime61.hourOfDay();
        org.joda.time.DateTime dateTime67 = property66.withMaximumValue();
        mutableDateTime37.setTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = mutableDateTime71.getZone();
        java.lang.String str77 = dateTimeZone75.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology79 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField80 = julianChronology79.dayOfYear();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology79.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone83 = julianChronology79.getZone();
        mutableDateTime37.setZone(dateTimeZone83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter32.withZone(dateTimeZone83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str89 = dateTimeZone88.getID();
        long long92 = dateTimeZone88.adjustOffset(100L, true);
        org.joda.time.chrono.GJChronology gJChronology93 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone88);
        org.joda.time.MutableDateTime mutableDateTime94 = new org.joda.time.MutableDateTime(1959787008000054L, (org.joda.time.Chronology) gJChronology93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = dateTimeFormatter86.print((org.joda.time.ReadableInstant) mutableDateTime94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514378631L + "'", long29 == 1645514378631L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeParser33);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1380 + "'", int51 == 1380);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(julianChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 100L + "'", long92 == 100L);
        org.junit.Assert.assertNotNull(gJChronology93);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime7.getZone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        int int22 = mutableDateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        int int33 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.plus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime32.plusYears(1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        int int43 = mutableDateTime40.getMinuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readablePeriod52);
        int int54 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.plus(readablePeriod55);
        org.joda.time.DateTime dateTime58 = dateTime53.plusYears(1);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime61 = dateTime58.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime62 = dateTime58.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime65 = dateTime62.withPeriodAdded(readablePeriod63, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int67 = dateTime65.get(dateTimeFieldType66);
        boolean boolean68 = dateTime37.isSupported(dateTimeFieldType66);
        org.joda.time.DateTime dateTime70 = dateTime7.withField(dateTimeFieldType66, 12);
        java.lang.String[] strArray73 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        mutableDateTime78.setZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime78.getZone();
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology86 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone82, (int) (short) 1);
        org.joda.time.DurationField durationField87 = julianChronology86.weeks();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology86.weekOfWeekyear();
        org.joda.time.Chronology chronology89 = julianChronology86.withUTC();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology86.weekOfWeekyear();
        boolean boolean91 = strSet74.contains((java.lang.Object) julianChronology86);
        org.joda.time.DateTimeField dateTimeField92 = julianChronology86.minuteOfHour();
        org.joda.time.DurationField durationField93 = julianChronology86.months();
        org.joda.time.DateTimeField dateTimeField94 = julianChronology86.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType66.getField((org.joda.time.Chronology) julianChronology86);
        long long97 = dateTimeField95.roundFloor((long) 86399);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514378651L + "'", long13 == 1645514378651L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1380 + "'", int22 == 1380);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1380 + "'", int43 == 1380);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1677050378651L + "'", long59 == 1677050378651L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 53 + "'", int67 == 53);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(julianChronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-82800000L) + "'", long97 == (-82800000L));
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(4);
        int int6 = localDateTime5.getMonthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        java.util.Date date13 = mutableDateTime11.toDate();
        boolean boolean14 = timeZone9.inDaylightTime(date13);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:19:38 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DurationField durationField14 = gJChronology11.years();
        java.lang.String str15 = gJChronology11.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology26);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.Chronology chronology47 = chronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.secondOfDay();
        long long54 = chronology45.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.secondOfDay();
        boolean boolean66 = property58.equals((java.lang.Object) property65);
        org.joda.time.LocalDateTime localDateTime68 = property58.addToCopy((long) 2022);
        int[] intArray70 = chronology45.get((org.joda.time.ReadablePartial) localDateTime68, (long) (-1));
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withPeriodAdded(readablePeriod71, 4);
        int[] intArray75 = julianChronology26.get((org.joda.time.ReadablePartial) localDateTime73, 20110100L);
        boolean boolean76 = gJChronology11.equals((java.lang.Object) 20110100L);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology11.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[-01:00]" + "'", str13, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[-01:00]" + "'", str15, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-62689900L) + "'", long54 == (-62689900L));
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1969, 12, 31, 82799999]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1969, 12, 19, 16510100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.secondOfDay();
        boolean boolean20 = dateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime23.year();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.centuryOfEra();
        org.joda.time.DurationField durationField44 = dateTimeField43.getRangeDurationField();
        boolean boolean46 = dateTimeField43.isLeap((long) (byte) 0);
        mutableDateTime23.setRounding(dateTimeField43);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime23.millisOfSecond();
        java.lang.String str49 = property48.getAsText();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        int int19 = dateTime15.getWeekOfWeekyear();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DurationField durationField35 = julianChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.hourOfDay();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) (byte) 10, locale38);
        java.util.Locale.Builder builder40 = builder20.setLocale(locale38);
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getExtension('u');
        java.lang.String str46 = locale38.getDisplayLanguage(locale42);
        java.util.Calendar calendar47 = dateTime15.toCalendar(locale38);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.fromCalendarFields(calendar47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((-608));
        java.lang.String str51 = localDateTime50.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23" + "'", str39, "23");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514378804,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=19,SECOND=38,MILLISECOND=804,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-01-27T22:19:38.804" + "'", str51, "2022-01-27T22:19:38.804");
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        org.joda.time.DurationField durationField26 = julianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology22.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = dateTimeField27.getAsShortText((long) (byte) 10, locale29);
        java.util.Locale.Builder builder31 = builder11.setLocale(locale29);
        java.lang.String str32 = locale29.getVariant();
        java.lang.String str33 = locale29.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter10.withLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = dateTimeFormatter10.parseLocalTime("GJChronology[-01:00,cutover=1970-01-01T00:00:00.100Z]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23" + "'", str30, "23");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.minuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.centuryOfEra();
        org.joda.time.DurationField durationField22 = dateTimeField21.getRangeDurationField();
        boolean boolean24 = dateTimeField21.isLeap((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) '4');
        org.joda.time.DurationField durationField44 = chronology36.hours();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localDateTime55, (long) '4');
        org.joda.time.DurationField durationField58 = chronology50.hours();
        int int59 = durationField44.compareTo(durationField58);
        long long62 = durationField44.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType63 = durationField44.getType();
        boolean boolean64 = localDateTime30.isSupported(durationFieldType63);
        int[] intArray69 = new int[] { (short) 0, 'u', '#', (byte) 100 };
        int int70 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime30.withYearOfCentury(0);
        int[] intArray74 = null;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale76.getCountry();
        java.lang.String str78 = locale76.getDisplayScript();
        java.util.Locale locale80 = new java.util.Locale("56");
        java.lang.String str81 = locale76.getDisplayCountry(locale80);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField13.set((org.joda.time.ReadablePartial) localDateTime72, (-292269054), intArray74, "83040097", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83040097 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 117, 35, 100]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2922789 + "'", int70 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals(locale80.toString(), "56");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey(100L);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology16.minuteOfDay();
        org.joda.time.Chronology chronology29 = julianChronology16.withUTC();
        org.joda.time.DurationField durationField30 = julianChronology16.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(22504261, (-2022), 2922730, (int) '#', 0, 15, (org.joda.time.Chronology) julianChronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(100L);
        int int30 = localDateTime29.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minusWeeks((int) '4');
        int int42 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        long long55 = chronology48.set((org.joda.time.ReadablePartial) localDateTime53, (long) '4');
        org.joda.time.DurationField durationField56 = chronology48.hours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone66);
        long long69 = chronology62.set((org.joda.time.ReadablePartial) localDateTime67, (long) '4');
        org.joda.time.DurationField durationField70 = chronology62.hours();
        int int71 = durationField56.compareTo(durationField70);
        long long74 = durationField70.getValueAsLong((long) 4, 1645514152918L);
        int int76 = durationField70.getValue((long) 12);
        org.joda.time.DurationFieldType durationFieldType77 = durationField70.getType();
        boolean boolean78 = localDateTime18.isSupported(durationFieldType77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime18.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(100L);
        int int83 = localDateTime82.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minus(readablePeriod86);
        boolean boolean88 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.LocalDateTime.Property property89 = localDateTime87.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime91 = localDateTime87.withDayOfYear(633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 633 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52L + "'", long69 == 52L);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfDay();
        int int19 = dateTimeField17.getMinimumValue((long) 22692425);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(100L);
        int int30 = localDateTime29.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minusWeeks((int) '4');
        int int42 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        long long55 = chronology48.set((org.joda.time.ReadablePartial) localDateTime53, (long) '4');
        org.joda.time.DurationField durationField56 = chronology48.hours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone66);
        long long69 = chronology62.set((org.joda.time.ReadablePartial) localDateTime67, (long) '4');
        org.joda.time.DurationField durationField70 = chronology62.hours();
        int int71 = durationField56.compareTo(durationField70);
        long long74 = durationField70.getValueAsLong((long) 4, 1645514152918L);
        int int76 = durationField70.getValue((long) 12);
        org.joda.time.DurationFieldType durationFieldType77 = durationField70.getType();
        boolean boolean78 = localDateTime18.isSupported(durationFieldType77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime18.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(100L);
        int int83 = localDateTime82.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minus(readablePeriod86);
        boolean boolean88 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime18.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime92 = localDateTime18.withDayOfYear(56);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52L + "'", long69 == 52L);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fra\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType12.getField(chronology20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey(100L);
        long long40 = dateTimeZone36.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.secondOfDay();
        int int43 = gJChronology41.getMinimumDaysInFirstWeek();
        boolean boolean44 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology41);
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        java.lang.String str46 = gJChronology41.toString();
        org.joda.time.DurationField durationField47 = gJChronology41.weeks();
        int int49 = durationField47.getValue(1645514216873L);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = durationField47.getMillis(1645514049706L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514049706 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 379 + "'", int13 == 379);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(instant45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GJChronology[-01:00]" + "'", str46, "GJChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2720 + "'", int49 == 2720);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DurationField durationField19 = julianChronology10.months();
        boolean boolean20 = durationField19.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22489022, 216, 1637133533, 51, 971, (int) (short) 10, 22775259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTime dateTime30 = dateTime28.minusSeconds(22705);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology41);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology41.era();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology41.yearOfEra();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L);
        int int57 = localDateTime56.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.DateTime dateTime67 = dateTime52.withFields((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withField(dateTimeFieldType68, (int) (byte) 1);
        int int71 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66);
        int int72 = localDateTime66.size();
        org.joda.time.DateTime dateTime73 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime66);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.halfdayOfDay();
        long long16 = dateTimeField14.roundHalfFloor(1645514313998L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645531200000L + "'", long16 == 1645531200000L);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DurationField durationField18 = julianChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = julianChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = julianChronology17.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) julianChronology17);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = julianChronology17.getDateTimeMillis(10, 53, 22504261, (-608));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -608 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = dateTimeFormatter2.parseLocalTime("352");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long35 = dateTime27.getMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey(100L);
        long long46 = dateTimeZone42.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) long35, dateTimeZone42);
        org.joda.time.DateTime dateTime48 = localDateTime15.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        int int54 = mutableDateTime51.getMinuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readablePeriod63);
        int int65 = mutableDateTime51.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime64.plus((-61062681599999L));
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology69);
        java.lang.String str71 = mutableDateTime70.toString();
        mutableDateTime70.setDate((long) (short) 100);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology79 = mutableDateTime76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime76.getZone();
        mutableDateTime70.setZoneRetainFields(dateTimeZone80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology83);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        mutableDateTime84.setZone(dateTimeZone85);
        org.joda.time.Chronology chronology87 = mutableDateTime84.getChronology();
        org.joda.time.DateTimeZone dateTimeZone88 = mutableDateTime84.getZone();
        java.lang.String str90 = dateTimeZone88.getNameKey((long) 10);
        long long92 = dateTimeZone80.getMillisKeepLocal(dateTimeZone88, (long) (byte) 10);
        org.joda.time.DateTime dateTime93 = dateTime64.toDateTime(dateTimeZone88);
        long long95 = dateTimeZone42.getMillisKeepLocal(dateTimeZone88, 1645514236361L);
        int int97 = dateTimeZone88.getStandardOffset(1645514299863L);
        boolean boolean98 = dateTimeZone88.isFixed();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514379489L + "'", long35 == 1645514379489L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1380 + "'", int54 == 1380);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str71, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
// flaky:         org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 10L + "'", long92 == 10L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1645514236361L + "'", long95 == 1645514236361L);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-3600000) + "'", int97 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology10.add(readablePeriod15, (long) (short) 100, (int) 'x');
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = julianChronology10.getDateTimeMillis(12, 192, 0, 22694228, 436, 35, 82560001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22694228 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DurationField durationField17 = julianChronology16.weeks();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.Chronology chronology27 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean32 = dateTimeZone30.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone30);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = dateTimeZone30.getName(0L, locale35);
        long long40 = dateTimeZone24.getMillisKeepLocal(dateTimeZone30, 1645514358217L);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:00" + "'", str38, "-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514358217L + "'", long40 == 1645514358217L);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645514207343L, dateTimeZone16);
        int[] intArray25 = new int[] { 22647, 43569, 8, 28, 19, 671 };
        int[] intArray27 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) localDateTime17, 543, intArray25, 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        java.lang.String str31 = mutableDateTime30.toString();
        mutableDateTime30.setDate((long) (short) 100);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long48 = dateTimeZone46.convertUTCToLocal((long) 6);
        boolean boolean50 = dateTimeZone46.isStandardOffset(3155760000000L);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime42.toMutableDateTime(dateTimeZone46);
        long long53 = dateTimeZone46.nextTransition(45L);
        org.joda.time.DateTime dateTime54 = localDateTime17.toDateTime(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = localDateTime17.getField(441);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 441");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[22647, 43569, 8, 28, 19, 671]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[22647, 43569, 8, 28, 19, 671]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31T23:00:00.001-01:00" + "'", str31, "1969-12-31T23:00:00.001-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3599994L) + "'", long48 == (-3599994L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 45L + "'", long53 == 45L);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfDay();
        java.util.Locale locale13 = new java.util.Locale("IT");
        int int14 = property11.getMaximumShortTextLength(locale13);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = property11.getAsShortText(locale15);
        org.joda.time.MutableDateTime mutableDateTime18 = property11.getMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(100L);
        int int38 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withPeriodAdded(readablePeriod41, (int) (short) 100);
        long long45 = chronology33.set((org.joda.time.ReadablePartial) localDateTime37, (long) (short) 0);
        org.joda.time.DateTime dateTime46 = dateTime26.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime52 = dateTime48.plus(1123200087L);
        org.joda.time.DateTime.Property property53 = dateTime48.secondOfDay();
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "82800" + "'", str17, "82800");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.secondOfMinute();
        long long25 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime20, (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = julianChronology10.getDateTimeMillis((-2022), 19, 100, 513);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1646637579632L + "'", long25 == 1646637579632L);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 19);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        java.util.TimeZone timeZone20 = dateTimeZone14.toTimeZone();
        boolean boolean21 = dateTimeZone14.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int42 = dateTime38.get(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTimeFormatter6.print((org.joda.time.ReadableInstant) dateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.dayOfMonth();
        int int20 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.DurationField durationField22 = julianChronology10.seconds();
        long long24 = durationField22.getValueAsLong(1677050316777L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1677050316L + "'", long24 == 1677050316L);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        strSet2.clear();
        java.util.Locale locale6 = new java.util.Locale("fr");
        boolean boolean7 = strSet2.equals((java.lang.Object) locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        org.joda.time.tz.Provider provider10 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone12 = provider10.getZone("eng");
        java.util.Set<java.lang.String> strSet13 = provider10.getAvailableIDs();
        int int14 = strSet13.size();
        boolean boolean15 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 575 + "'", int14 == 575);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant0.withDurationAdded(readableDuration7, 1900);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = durationField15.getValue(1645514224709L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.Chronology chronology79 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField80 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField82 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = julianChronology10.getDateTimeMillis(22716870, 120, 3600000, (-5599492), 26156026, 15, 465847);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5599492 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DurationField durationField19 = julianChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = julianChronology18.seconds();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = julianChronology18.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter7.withChronology((org.joda.time.Chronology) julianChronology18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology35.clockhourOfHalfday();
        java.util.Locale locale43 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str44 = dateTimeField38.getAsShortText((int) 'a', locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter7.withLocale(locale43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withChronology(chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter45.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.parse("37", dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTimeISO();
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, (int) (short) 0);
        org.joda.time.Instant instant8 = instant4.toInstant();
        org.joda.time.Instant instant10 = instant4.plus(68400000L);
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant12 = mutableDateTime3.toInstant();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = julianChronology10.getZone();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DurationField durationField20 = julianChronology10.minutes();
        java.lang.String str21 = durationField20.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minutes" + "'", str21, "minutes");
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekyear(26184569);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology36.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology36.dayOfYear();
        boolean boolean42 = dateTime25.equals((java.lang.Object) julianChronology36);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology53);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology53.minuteOfDay();
        org.joda.time.DurationField durationField58 = julianChronology53.days();
        org.joda.time.DurationField durationField59 = julianChronology53.seconds();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology53.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology53.dayOfMonth();
        int int63 = julianChronology53.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField64 = julianChronology53.months();
        org.joda.time.DurationField durationField65 = julianChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology53.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime25.toMutableDateTime((org.joda.time.Chronology) julianChronology53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime67.setSecondOfMinute(600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1380 + "'", int5 == 1380);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050379964L + "'", long21 == 1677050379964L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(julianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(6);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DurationField durationField28 = julianChronology27.weeks();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.Chronology chronology38 = julianChronology27.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology27.millisOfDay();
        long long41 = dateTimeField39.roundFloor(2022L);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        int int61 = mutableDateTime58.getMinuteOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readablePeriod70);
        int int72 = mutableDateTime58.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = localDateTime55.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology79 = mutableDateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfCentury();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology79);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone83);
        long long86 = chronology79.set((org.joda.time.ReadablePartial) localDateTime84, (long) '4');
        org.joda.time.DurationField durationField87 = chronology79.seconds();
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime71.toMutableDateTime(chronology79);
        java.util.Locale locale89 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar90 = mutableDateTime88.toCalendar(locale89);
        java.lang.String str91 = locale44.getDisplayCountry(locale89);
        java.lang.String str92 = dateTimeField39.getAsShortText(1728000100L, locale89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter16.withLocale(locale89);
        org.joda.time.Chronology chronology94 = dateTimeFormatter16.getChronolgy();
        java.util.Locale locale95 = dateTimeFormatter16.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = localDateTime7.toString(dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2022L + "'", long41 == 2022L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1380 + "'", int61 == 1380);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it");
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1645514379982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=19,SECOND=39,MILLISECOND=982,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Italia" + "'", str91, "Italia");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "82800100" + "'", str92, "82800100");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertNull(chronology94);
        org.junit.Assert.assertNull(locale95);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setRawOffset(26181);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone11);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMillis((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime25.minuteOfHour();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        org.joda.time.DateTime dateTime32 = property30.roundHalfFloorCopy();
        boolean boolean33 = dateTimeZone11.equals((java.lang.Object) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology44);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology44.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = julianChronology44.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) (byte) -1);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = dateTimeZone49.getShortName(1677050183994L, locale53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        long long58 = dateTimeZone11.getMillisKeepLocal(dateTimeZone49, 1646551063510L);
        java.util.Locale locale62 = new java.util.Locale("52", "minuteOfHour");
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = dateTimeZone11.getName(86400000L, locale62);
        java.lang.String str65 = timeZone1.getDisplayName(locale62);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1646551063510L + "'", long58 == 1646551063510L);
        org.junit.Assert.assertEquals(locale62.toString(), "52_MINUTEOFHOUR");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-01:00" + "'", str64, "-01:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Greenwich Mean Time" + "'", str65, "Greenwich Mean Time");
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.centuryOfEra();
        long long24 = dateTimeField22.remainder((-94279996226776L));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-122681839826776L) + "'", long24 == (-122681839826776L));
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime0.plusMonths(435);
        org.joda.time.DateTime dateTime6 = dateTime0.withWeekOfWeekyear(1);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = property7.setCopy(86399999);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology21.minuteOfDay();
        org.joda.time.DurationField durationField26 = julianChronology21.days();
        org.joda.time.DurationField durationField27 = julianChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology21.dayOfMonth();
        int int31 = julianChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField32 = julianChronology21.months();
        org.joda.time.DurationField durationField33 = julianChronology21.halfdays();
        java.lang.String str34 = julianChronology21.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey(100L);
        long long45 = dateTimeZone41.nextTransition((long) (short) 0);
        long long47 = dateTimeZone41.previousTransition((long) 100);
        org.joda.time.Chronology chronology48 = julianChronology21.withZone(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10, (org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology21.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JulianChronology[-01:00,mdfw=1]" + "'", str34, "JulianChronology[-01:00,mdfw=1]");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale locale9 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setUnicodeLocaleKeyword("+00:00", "22557888");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr__#a-52");
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26188322");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26188322");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) ' ');
        org.joda.time.DateTime dateTime32 = dateTime28.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime28.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long36 = dateTime28.getMillis();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime39.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey(100L);
        long long47 = dateTimeZone43.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) long36, dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) localDateTime16, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514380213L + "'", long36 == 1645514380213L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        java.lang.String str8 = property6.getAsShortText();
        org.joda.time.DurationField durationField9 = property6.getDurationField();
        org.joda.time.DateTime dateTime10 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfHalfday();
        org.joda.time.Instant instant3 = gJChronology0.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100L);
        int int7 = localDateTime6.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime6.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(100L);
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property47 = dateTime42.hourOfDay();
        int int48 = dateTime42.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = dateTime42.toLocalDateTime();
        boolean boolean50 = property32.equals((java.lang.Object) localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = property32.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime57 = property55.roundHalfCeilingCopy();
        java.lang.String str58 = property55.getAsText();
        java.util.Locale locale59 = java.util.Locale.UK;
        int int60 = property55.getMaximumTextLength(locale59);
        java.lang.String str61 = locale59.getISO3Country();
        java.lang.String str62 = property32.getAsShortText(locale59);
        int int63 = dateTimeField4.getMaximumTextLength(locale59);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "82800052" + "'", str58, "82800052");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GBR" + "'", str61, "GBR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "70" + "'", str62, "70");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property17 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.monthOfYear();
        long long7 = property6.remainder();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(100L);
        int int38 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime40);
        int int42 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.property(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType43.getRangeDurationType();
        boolean boolean46 = localDateTime13.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime13.withCenturyOfEra(296);
        int int49 = localDateTime48.getWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2674800052L + "'", long7 == 2674800052L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 29670 + "'", int49 == 29670);
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1646551063436L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8, (int) (short) 1);
        org.joda.time.DurationField durationField13 = julianChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = julianChronology12.seconds();
        int int16 = julianChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology12.yearOfCentury();
        mutableDateTime1.setChronology((org.joda.time.Chronology) julianChronology12);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getNameKey((long) 3043);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone15);
        java.lang.String str21 = dateTimeZone15.getNameKey((long) 979);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertNull(str18);
// flaky:         org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) '4', chronology11);
        mutableDateTime15.setHourOfDay(0);
        int int18 = mutableDateTime15.getRoundingMode();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfYear();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        boolean boolean24 = dateTimeFormatter23.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = mutableDateTime15.toString(dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DurationField durationField22 = julianChronology15.minutes();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology15);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.era();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = julianChronology10.getDateTimeMillis(1645516458998L, 22797, (-27425236), 394, 26220886);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22797 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        long long22 = durationField19.subtract((long) 70, 23L);
        long long23 = durationField19.getUnitMillis();
        long long26 = durationField19.getMillis(831743946000000L, 1645514242468L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-22930L) + "'", long22 == (-22930L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1000L + "'", long23 == 1000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 831743946000000000L + "'", long26 == 831743946000000000L);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime11.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime11.getZone();
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (-53));
        java.lang.String str25 = dateTimeZone21.getName(1677050299829L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514380545L + "'", long19 == 1645514380545L);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        long long6 = dateTimeZone2.adjustOffset((long) 1970, true);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setRegion("IT");
        java.util.Locale locale12 = new java.util.Locale("fr");
        java.util.Locale.Builder builder13 = builder8.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "52");
        java.util.Locale.Builder builder17 = builder13.clear();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        boolean boolean19 = localDateTime7.equals((java.lang.Object) builder18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder18.setLanguage("\uc77c\ubcf8\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(julianChronology3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1970L + "'", long6 == 1970L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(0);
        org.joda.time.DateTime dateTime16 = dateTime12.plusSeconds(435);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(22673927);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22673927 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long14 = dateTimeZone6.previousTransition(1645514152918L);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean22 = dateTimeZone20.isStandardOffset(1677050149186L);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeZone20.getShortName((long) 10, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter18.withLocale(locale24);
        java.lang.String str27 = dateTimeZone6.getName(1645514208799L, locale24);
        java.util.Locale locale31 = new java.util.Locale("5", "Ora media di Greenwich");
        java.lang.String str32 = dateTimeZone6.getName(63092952000L, locale31);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3597978L) + "'", long12 == (-3597978L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514152918L + "'", long14 == 1645514152918L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertEquals(locale31.toString(), "5_ORA MEDIA DI GREENWICH");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder6 = builder0.setLanguageTag("kor");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.addUnicodeLocaleAttribute("\ud504\ub791\uc2a4\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.secondOfDay();
        org.joda.time.DurationField durationField31 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology10.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46729900L) + "'", long28 == (-46729900L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) 0);
        int int13 = dateTimeZone7.getStandardOffset(36070100L);
        java.lang.String str15 = dateTimeZone7.getName(10800001L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1312797283202074L, dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale1.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek(26184569);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26184569 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2720", (double) 1677050375958L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.677050375958E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay(23);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMillis(26159301);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.weekyear();
        boolean boolean27 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.Chronology chronology35 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(100L);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusMillis((int) (short) 1);
        long long49 = chronology35.set((org.joda.time.ReadablePartial) localDateTime47, 1645514156466L);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = property50.addWrapFieldToCopy(16);
        org.joda.time.LocalDateTime localDateTime53 = property50.getLocalDateTime();
        boolean boolean54 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 379 + "'", int22 == 379);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 601200099L + "'", long49 == 601200099L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.DurationField durationField24 = julianChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) julianChronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime.Property property39 = dateTime28.minuteOfHour();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = locale41.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = property39.setCopy("\u82f1\u6587", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("436");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        int int16 = localDateTime11.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        org.joda.time.DateTimeField dateTimeField30 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType14.getField(chronology22);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey(100L);
        long long42 = dateTimeZone38.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.secondOfDay();
        int int45 = gJChronology43.getMinimumDaysInFirstWeek();
        boolean boolean46 = dateTimeFieldType14.isSupported((org.joda.time.Chronology) gJChronology43);
        java.lang.String str47 = dateTimeFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime.Property property49 = dateTime1.property(dateTimeFieldType14);
        int int50 = dateTime1.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 379 + "'", int15 == 379);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfDay" + "'", str47, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.secondOfMinute();
        boolean boolean10 = strSet4.remove((java.lang.Object) property9);
        boolean boolean11 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Iterator<java.lang.String> strItor12 = strSet4.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strItor12);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("UTC", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 3, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.weekOfWeekyear();
        long long25 = dateTimeField22.add(7097L, (long) 26171);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale30 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str33 = nameProvider26.getName(locale30, "English (Canada)", "Greenwich Mean Time");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = locale35.stripExtensions();
        java.lang.String str40 = nameProvider26.getName(locale37, "DurationField[years]", "-01:00");
        java.util.Locale locale42 = new java.util.Locale("dayOfMonth");
        java.lang.String str43 = locale37.getDisplayScript(locale42);
        int int44 = dateTimeField22.getMaximumShortTextLength(locale37);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 15828220807097L + "'", long25 == 15828220807097L);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertEquals(locale30.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals(locale42.toString(), "dayofmonth");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(1645514171263L, (org.joda.time.Chronology) gJChronology26);
        int[] intArray29 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime27, 10800001L);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusYears(26207);
        int int32 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = property33.setCopy("2022-02-22T06:14:55.025-01:04");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:14:55.025-01:04\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1969, 12, 19, 7200001]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime0.plusMonths(435);
        org.joda.time.DateTime dateTime6 = dateTime0.withWeekOfWeekyear(1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = dateTime6.toString("2022", locale8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("IT");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale8.getDisplayVariant(locale11);
        boolean boolean14 = locale11.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        long long81 = durationField79.getMillis(8L);
        // The following exception was thrown during execution in test generation
        try {
            long long84 = durationField79.getMillis(1654279962822L, 1645514157888L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1654279962822");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1380 + "'", int27 == 1380);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 21038400000L + "'", long81 == 21038400000L);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.adjustOffset(100L, true);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(1959787008000054L, (org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 19);
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        int int7 = dateTimeField6.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(100L);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime18);
        int[] intArray25 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int26 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19, intArray25);
        long long29 = dateTimeField6.add((long) (byte) -1, 0L);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("DateTimeField[halfdayOfDay]");
        java.lang.String str33 = dateTimeField6.getAsText((-27425236), locale32);
        long long35 = dateTimeField6.roundHalfCeiling((long) 22654609);
        java.util.Locale locale36 = null;
        int int37 = dateTimeField6.getMaximumTextLength(locale36);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-27425236" + "'", str33, "-27425236");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3600000L + "'", long35 == 3600000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DurationField durationField17 = julianChronology10.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = julianChronology10.getDateTimeMillis(159, 480, 2640, 59, 47, 26159301, 1645514184);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        int int25 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime24.plusYears(1);
        org.joda.time.DateTime dateTime32 = dateTime24.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear(8);
        org.joda.time.DateTime.Property property36 = dateTime33.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        int int38 = dateTimeField37.getMaximumValue();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1380 + "'", int14 == 1380);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.DurationField durationField19 = dateTimeField17.getRangeDurationField();
        long long21 = durationField19.getMillis(1677050228009L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100623013680540000L + "'", long21 == 100623013680540000L);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getScript();
        java.lang.String str3 = locale0.getScript();
        java.util.Locale.setDefault(locale0);
        java.lang.String str6 = locale0.getExtension('x');
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = nameProvider7.getName(locale8, "-0001-01-01T00:00:00.056", "UTC");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime31.getFieldTypes();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale35.getDisplayVariant(locale37);
        java.lang.String str40 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale35);
        java.lang.String str41 = locale35.getDisplayCountry();
        java.lang.String str44 = nameProvider7.getName(locale35, "", "und");
        java.lang.String str45 = locale0.getDisplayLanguage(locale35);
        boolean boolean46 = locale35.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "82800056" + "'", str40, "82800056");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField25 = gJChronology13.years();
        org.joda.time.DurationField durationField26 = gJChronology13.millis();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = gJChronology13.add(readablePeriod27, (long) 6, 26200334);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = gJChronology13.getDateTimeMillis(0, 22556026, 192, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22556026 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 6L + "'", long30 == 6L);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = julianChronology10.get(readablePeriod16, (long) 418);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.roundCeiling();
        mutableDateTime7.addHours(17198338);
        mutableDateTime7.addWeekyears(1439);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey(100L);
        org.joda.time.Chronology chronology25 = julianChronology14.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology14.minuteOfDay();
        long long32 = julianChronology14.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology14.secondOfDay();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = dateTimeField34.getAsShortText((-608), locale36);
        java.lang.String str38 = locale1.getDisplayLanguage(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale1.getUnicodeLocaleType("2022-02-22T06:15:06.081-01:04");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T06:15:06.081-01:04");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36069980L + "'", long32 == 36069980L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-608" + "'", str37, "-608");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u6587" + "'", str38, "\u82f1\u6587");
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = julianChronology10.getDateTimeMillis((int) 'a', 17, 26227009, 22759285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder0.setRegion("100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("1970-01-08T00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01-08T00:00:00.100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(671);
        org.joda.time.DateTime dateTime31 = property28.roundHalfFloorCopy();
        org.joda.time.DurationField durationField32 = property28.getLeapDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNull(durationField32);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField29.getType();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plus(readableDuration43);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime42, 99, locale46);
        org.joda.time.Chronology chronology48 = localDateTime42.getChronology();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 36069980L + "'", long28 == 36069980L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "99" + "'", str47, "99");
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField79 = julianChronology10.months();
        long long81 = durationField79.getMillis(8L);
        int int83 = durationField79.getValue(1645514162333L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 21038400000L + "'", long81 == 21038400000L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 625 + "'", int83 == 625);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTime();
        org.joda.time.TimeOfDay timeOfDay22 = dateTime21.toTimeOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48, (int) (short) 1);
        org.joda.time.DurationField durationField53 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology52.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = julianChronology52.withUTC();
        org.joda.time.DurationField durationField56 = julianChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType14.getField((org.joda.time.Chronology) julianChronology52);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology52.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long67 = julianChronology52.getDateTimeMillis(22647, 87, 35, 904, 457087, 22673927, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 904 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "52");
        java.util.Locale.Builder builder9 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514155044L);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant4 = instant2.minus((long) 60);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.era();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.clockhourOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey(100L);
        long long30 = dateTimeZone26.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1645514171263L, (org.joda.time.Chronology) gJChronology31);
        int[] intArray34 = julianChronology15.get((org.joda.time.ReadablePartial) localDateTime32, 10800001L);
        org.joda.time.DurationField durationField35 = julianChronology15.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) 60, (org.joda.time.Chronology) julianChronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1969, 12, 19, 10800121]");
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh_CN", (double) 1645514154556L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645514154556E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean23 = dateTimeZone21.isStandardOffset(1677050149186L);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = dateTimeZone21.getShortName((long) 10, locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean29 = julianChronology10.equals((java.lang.Object) dateTimeFormatter28);
        boolean boolean30 = dateTimeFormatter28.isParser();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeFormatter28.parseMillis("2022-02-22T06:18:13.415");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str22 = dateTimeFieldType21.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray50 = new int[] { 3, (byte) 10, 23, 4, 435 };
        int int51 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray50);
        int[] intArray53 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) localDateTime19, 0, intArray50, 20);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime19.withDurationAdded(readableDuration54, 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime19.minusYears(15);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime19.minusMillis((int) (byte) 0);
        java.lang.Object obj61 = null;
        boolean boolean62 = localDateTime60.equals(obj61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withYearOfCentury(22501797);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22501797 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 10, 23, 4, 435]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("GJChronology[Etc/UTC]");
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        int int6 = timeZone4.getOffset((long) 22);
        boolean boolean7 = timeZone0.hasSameRules(timeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'GJChronology[Etc/UTC]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField14 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField17 = julianChronology10.months();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = julianChronology10.get(readablePartial18, 1645514169594L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = julianChronology10.add(readablePeriod17, 1645514153739L, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = julianChronology10.getDateTimeMillis((long) 574, 29670, 2022, (-27425236), 22647);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29670 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514153739L + "'", long20 == 1645514153739L);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        mutableDateTime5.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) '4');
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) '4');
        int[] intArray41 = chronology26.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale42);
        int int44 = mutableDateTime2.get(dateTimeField12);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = julianChronology55.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str69 = nameProvider62.getName(locale66, "English (Canada)", "Greenwich Mean Time");
        java.lang.String str70 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, (int) (short) 1, locale66);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((java.lang.Object) str70);
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTimeISO();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        mutableDateTime75.setZone(dateTimeZone76);
        org.joda.time.Chronology chronology78 = mutableDateTime75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = mutableDateTime75.getZone();
        java.lang.String str81 = dateTimeZone79.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology83 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone79, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField84 = julianChronology83.dayOfYear();
        org.joda.time.DurationField durationField85 = julianChronology83.minutes();
        org.joda.time.DateTimeField dateTimeField86 = julianChronology83.yearOfEra();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology83.year();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology83.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology83.weekyearOfCentury();
        org.joda.time.Chronology chronology90 = julianChronology83.withUTC();
        org.joda.time.DateTimeField dateTimeField91 = julianChronology83.millisOfDay();
        long long93 = dateTimeField91.roundHalfEven(1677050162118L);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = dateTimeField91.getType();
        org.joda.time.DurationFieldType durationFieldType95 = dateTimeFieldType94.getDurationType();
        int int96 = mutableDateTime72.get(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertEquals(locale66.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(julianChronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1677050162118L + "'", long93 == 1677050162118L);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(durationFieldType95);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 120 + "'", int96 == 120);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = property52.setCopy((int) (short) 100);
        org.joda.time.DateTime dateTime55 = property52.roundHalfEvenCopy();
        org.joda.time.Interval interval56 = property52.toInterval();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = locale58.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = property52.setCopy("GMT-01:04", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT-01:04\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English" + "'", str59, "English");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        long long4 = dateTimeZone0.adjustOffset(100L, true);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(10800001L);
        mutableDateTime7.add((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.dayOfMonth();
        mutableDateTime7.addWeekyears(2069);
        int int14 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        java.lang.String str18 = mutableDateTime17.toString();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.minuteOfDay();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.secondOfDay();
        boolean boolean21 = dateTimeZone0.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.setDate((long) 192);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.121+00:00:00.120" + "'", str18, "1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DurationField durationField13 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.Chronology chronology28 = chronology20.withUTC();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        long long41 = chronology34.set((org.joda.time.ReadablePartial) localDateTime39, (long) '4');
        int[] intArray43 = chronology28.get((org.joda.time.ReadablePartial) localDateTime39, 0L);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime39, (int) '#', locale45);
        java.lang.String str48 = locale45.getISO3Language();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime55.getZone();
        java.lang.String str61 = dateTimeZone59.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField64 = julianChronology63.dayOfYear();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology63.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology63.clockhourOfHalfday();
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str72 = dateTimeField66.getAsShortText((int) 'a', locale71);
        java.lang.String str73 = dateTimeZone50.getName((long) (short) 1, locale71);
        java.lang.String str74 = locale45.getDisplayCountry(locale71);
        java.lang.Object obj75 = locale45.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English" + "'", str46, "English");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "35" + "'", str47, "35");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(julianChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "97" + "'", str72, "97");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.120" + "'", str73, "+00:00:00.120");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "en");
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        java.lang.String str5 = mutableDateTime4.toString();
        mutableDateTime4.setDate((long) (short) 100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        long long26 = dateTimeZone14.getMillisKeepLocal(dateTimeZone22, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        long long32 = dateTimeZone14.getMillisKeepLocal(dateTimeZone29, (long) 'a');
        mutableDateTime0.setZone(dateTimeZone14);
        mutableDateTime0.setDayOfMonth(3);
        java.util.Date date36 = mutableDateTime0.toDate();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime0.dayOfYear();
        mutableDateTime0.add(1677050231732L);
        int int40 = mutableDateTime0.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.121+00:00:00.120" + "'", str5, "1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3840217L + "'", long32 == 3840217L);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Feb 03 06:19:42 GMT-01:00 2022");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime6.add(readablePeriod10);
        mutableDateTime6.addWeekyears(17198338);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = julianChronology11.days();
        org.joda.time.DurationField durationField17 = julianChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L);
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withPeriodAdded(readablePeriod25, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean29 = localDateTime21.isSupported(dateTimeFieldType28);
        java.util.Locale locale32 = new java.util.Locale("IT");
        java.lang.String str33 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 19, locale32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean37 = dateTimeZone35.isStandardOffset(1677050149186L);
        org.joda.time.DateTime dateTime38 = localDateTime21.toDateTime(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(1677050192045L, dateTimeZone35);
        mutableDateTime39.addWeekyears(2000);
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime39.getRoundingField();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "19" + "'", str33, "19");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNull(dateTimeField42);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        boolean boolean5 = property3.isLeap();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property3.addToCopy((-231412082946010814L));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(78);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        java.lang.String str15 = mutableDateTime14.toString();
        mutableDateTime14.setDate((long) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        mutableDateTime14.setZoneRetainFields(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        mutableDateTime26.addMinutes((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property32.addWrapFieldToCopy((int) '#');
        int[] intArray35 = localDateTime34.getValues();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusDays(0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.secondOfDay();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(100L);
        int int47 = localDateTime46.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime46.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime46.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(100L);
        int int66 = localDateTime65.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime68);
        int int70 = localDateTime60.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.property(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getRangeDurationType();
        mutableDateTime40.add(durationFieldType73, 365);
        boolean boolean76 = localDateTime34.isSupported(durationFieldType73);
        mutableDateTime26.add(durationFieldType73, (-6));
        boolean boolean79 = localDateTime9.isSupported(durationFieldType73);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.121+00:00:00.120" + "'", str15, "1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 207]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfDay();
        org.joda.time.Chronology chronology79 = julianChronology10.withUTC();
        org.joda.time.DurationField durationField80 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField82 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology10.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long87 = dateTimeField84.set(1645514361786L, "0087-02-22T06:18:16.296-01:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0087-02-22T06:18:16.296-01:00\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        mutableDateTime23.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) '4');
        org.joda.time.Chronology chronology44 = chronology36.withUTC();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localDateTime55, (long) '4');
        int[] intArray59 = chronology44.get((org.joda.time.ReadablePartial) localDateTime55, 0L);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale60);
        int int62 = mutableDateTime20.get(dateTimeField30);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology73 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField74 = julianChronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology73.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology73.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone77 = julianChronology73.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.tz.NameProvider nameProvider80 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale84 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str87 = nameProvider80.getName(locale84, "English (Canada)", "Greenwich Mean Time");
        java.lang.String str88 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime78, (int) (short) 1, locale84);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = dateTimeField15.set(1645514343671L, "2022-02-22T06:17:26.699-01:00", locale84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:17:26.699-01:00\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(julianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(nameProvider80);
        org.junit.Assert.assertEquals(locale84.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.secondOfDay();
        boolean boolean20 = dateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime.Property property21 = dateTime7.hourOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        org.joda.time.DateTime dateTime29 = mutableDateTime24.toDateTime();
        int int30 = property21.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = property21.withMaximumValue();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology42.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime46.getZone();
        java.lang.String str52 = dateTimeZone50.getNameKey(100L);
        org.joda.time.Chronology chronology53 = julianChronology42.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField54 = julianChronology42.minuteOfDay();
        long long60 = julianChronology42.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology42.yearOfCentury();
        org.joda.time.DateTime dateTime63 = dateTime31.toDateTime((org.joda.time.Chronology) julianChronology42);
        int int64 = dateTime63.getEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 457087 + "'", int30 == 457087);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 36069980L + "'", long60 == 36069980L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) '4');
        org.joda.time.DurationField durationField37 = chronology29.seconds();
        org.joda.time.DurationFieldType durationFieldType38 = durationField37.getType();
        org.joda.time.DateTime dateTime40 = dateTime23.withFieldAdded(durationFieldType38, 953);
        org.joda.time.DateTime dateTime41 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1677050382527L + "'", long21 == 1677050382527L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setRegion("IT");
        java.util.Locale locale15 = new java.util.Locale("fr");
        java.util.Locale.Builder builder16 = builder11.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder16.setExtension('a', "52");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology32.millisOfDay();
        org.joda.time.DurationField durationField36 = julianChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology32.hourOfDay();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = dateTimeField37.getAsShortText((long) (byte) 10, locale39);
        java.util.Locale.Builder builder41 = builder21.setLocale(locale39);
        java.lang.String str42 = locale39.getVariant();
        java.lang.String str43 = locale39.getDisplayScript();
        java.lang.String str44 = locale20.getDisplayName(locale39);
        java.lang.String str45 = locale10.getDisplayScript(locale20);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime48.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology56 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology56);
        org.joda.time.DateTimeField dateTimeField58 = julianChronology56.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology56.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(100L);
        int int65 = localDateTime64.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withPeriodAdded(readablePeriod68, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean72 = localDateTime64.isSupported(dateTimeFieldType71);
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str76 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, (-16400687), locale74);
        java.lang.String str77 = locale20.getDisplayLanguage(locale74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime78 = property8.set("GMT-01:04", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT-01:04\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr__#a-52");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French" + "'", str44, "French");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(julianChronology56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-16400687" + "'", str76, "-16400687");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "French" + "'", str77, "French");
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addWrapFieldToCopy((int) '#');
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusDays(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond(60);
        boolean boolean29 = localDateTime25.equals((java.lang.Object) (byte) 100);
        int int30 = localDateTime25.getDayOfMonth();
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime25, 53L);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology10.dayOfMonth();
        int int35 = dateTimeField33.getMinimumValue((-1645514184197L));
        boolean boolean37 = dateTimeField33.isLeap((-2176329599948L));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 207]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200087L + "'", long32 == 1123200087L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        int int68 = localDateTime21.getEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime21.minusSeconds(2);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime21.withPeriodAdded(readablePeriod71, 263);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime21.withMinuteOfHour(82560055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82560055 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime.Property property29 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime9.plusMinutes(3043);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        long long27 = dateTimeField25.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField25.getType();
        int int29 = dateTime8.get(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int43 = localDateTime41.get(dateTimeFieldType42);
        int int44 = localDateTime39.indexOf(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localDateTime55, (long) '4');
        org.joda.time.DateTimeField dateTimeField58 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType42.getField(chronology50);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime62.getZone();
        java.lang.String str68 = dateTimeZone66.getNameKey(100L);
        long long70 = dateTimeZone66.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.secondOfDay();
        int int73 = gJChronology71.getMinimumDaysInFirstWeek();
        boolean boolean74 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DurationField durationField75 = gJChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology71.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType28.getField((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology71.getZone();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology71.year();
        org.joda.time.Instant instant81 = gJChronology71.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology71.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = gJChronology71.getDateTimeMillis(513, 495, 22647956, (int) (byte) 10, (-292275054), 11, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 23L + "'", long27 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26382830 + "'", int29 == 26382830);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 439 + "'", int43 == 439);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(gJChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        int int16 = localDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        java.lang.String str20 = mutableDateTime19.toString();
        mutableDateTime19.setDate((long) (short) 100);
        int int23 = mutableDateTime19.getMinuteOfHour();
        int int24 = mutableDateTime19.getSecondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime33.yearOfCentury();
        int int37 = property36.getMaximumValueOverall();
        org.joda.time.DateTime dateTime38 = property36.getDateTime();
        mutableDateTime19.setTime((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime dateTime41 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property42 = dateTime38.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.121+00:00:00.120" + "'", str20, "1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 26382899 + "'", int40 == 26382899);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(1);
        int int8 = dateTimeFormatter7.getDefaultYear();
        boolean boolean9 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear((int) '#');
        int int12 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.equals((java.lang.Object) 22638710);
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter7.withZone(dateTimeZone14);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField16 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField18 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = julianChronology10.get(readablePeriod22, 1645514169594L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        java.lang.String str9 = mutableDateTime8.toString();
        mutableDateTime8.addMillis((int) '4');
        int int12 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime8.copy();
        mutableDateTime8.addYears(215);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property19.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int29 = localDateTime27.get(dateTimeFieldType28);
        int int30 = localDateTime25.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) '4');
        org.joda.time.DateTimeField dateTimeField44 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType28.getField(chronology36);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime8.property(dateTimeFieldType28);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = mutableDateTime8.toString("2022-02-22T06:19:36.586-01:00", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.121+00:00:00.120" + "'", str9, "1970-01-01T00:00:00.121+00:00:00.120");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 439 + "'", int29 == 439);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DurationField durationField19 = julianChronology18.weeks();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 10);
        org.joda.time.Chronology chronology29 = julianChronology18.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology18.millisOfDay();
        long long32 = dateTimeField30.roundFloor(2022L);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plus(readablePeriod43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        int int52 = mutableDateTime49.getMinuteOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readablePeriod61);
        int int63 = mutableDateTime49.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        mutableDateTime67.setZone(dateTimeZone68);
        org.joda.time.Chronology chronology70 = mutableDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfCentury();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone74);
        long long77 = chronology70.set((org.joda.time.ReadablePartial) localDateTime75, (long) '4');
        org.joda.time.DurationField durationField78 = chronology70.seconds();
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime62.toMutableDateTime(chronology70);
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar81 = mutableDateTime79.toCalendar(locale80);
        java.lang.String str82 = locale35.getDisplayCountry(locale80);
        java.lang.String str83 = dateTimeField30.getAsShortText(1728000100L, locale80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter7.withLocale(locale80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter84.withDefaultYear(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.parse("\uc911\uad6d\uc5b4\uc911\uad6d)", dateTimeFormatter86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2022L + "'", long32 == 2022L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645514383064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.120,offset=120,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=43,MILLISECOND=184,ZONE_OFFSET=120,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Italia" + "'", str82, "Italia");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "220" + "'", str83, "220");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfFloor();
        mutableDateTime2.add((long) 3043);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.secondOfDay();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str12 = locale8.getExtension('x');
        java.lang.String str13 = locale8.getISO3Country();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale15.getDisplayVariant(locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale24.getExtension('a');
        int int27 = property23.getMaximumShortTextLength(locale24);
        java.lang.String str28 = locale24.getISO3Country();
        java.lang.String str29 = locale17.getDisplayVariant(locale24);
        java.util.Locale.setDefault(category7, locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = property5.set("1969-11-30T23:00:00.030", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-11-30T23:00:00.030\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(60);
        org.joda.time.DateTime dateTime10 = dateTime8.plusWeeks(457087);
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime dateTime13 = dateTime8.minusMonths(22667336);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime8.toGregorianCalendar();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Dec 31 23:00:00 GMT-01:00 6068");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(229, 97, 22757, (int) 'u', 26206466, 366, (org.joda.time.Chronology) julianChronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2070");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean5 = dateTimeZone3.isStandardOffset(1677050149186L);
        int int7 = dateTimeZone3.getOffset((long) 82560001);
        mutableDateTime1.setZoneRetainFields(dateTimeZone3);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L);
        int int28 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withPeriodAdded(readablePeriod31, (int) (short) 100);
        long long35 = chronology23.set((org.joda.time.ReadablePartial) localDateTime27, (long) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime16.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readablePeriod47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        int int56 = mutableDateTime53.getMinuteOfDay();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readablePeriod65);
        int int67 = mutableDateTime53.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = localDateTime50.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfCentury();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology74);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone78);
        long long81 = chronology74.set((org.joda.time.ReadablePartial) localDateTime79, (long) '4');
        org.joda.time.DurationField durationField82 = chronology74.seconds();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime66.toMutableDateTime(chronology74);
        org.joda.time.DurationField durationField84 = chronology74.centuries();
        org.joda.time.DateTime dateTime85 = dateTime40.toDateTime(chronology74);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime85);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(26220886);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26220886 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 52L + "'", long81 == 52L);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime29.year();
        org.joda.time.DateTime dateTime34 = dateTime29.minusHours(26197359);
        java.util.Locale locale36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = dateTime34.toString("Japanese", locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime29.year();
        org.joda.time.DateTime dateTime34 = property32.addWrapFieldToCopy(29670);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute(6);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime7.toYearMonthDay();
        org.joda.time.DateTime dateTime12 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(465847);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology15.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((int) (short) 10, 457375, 979, 2720, 22654609, (org.joda.time.Chronology) julianChronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField25 = gJChronology13.years();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = gJChronology13.getDateTimeMillis(2134, 465847, 7, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 465847 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime17.addMinutes(26159301);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime37 = dateTime31.withDayOfMonth(1);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean44 = dateTimeZone42.isStandardOffset(1677050149186L);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = dateTimeZone42.getShortName((long) 10, locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter40.withLocale(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withOffsetParsed();
        boolean boolean50 = dateTimeFormatter49.isParser();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.secondOfMinute();
        boolean boolean58 = strSet52.remove((java.lang.Object) property57);
        org.joda.time.LocalDateTime localDateTime59 = property57.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = property57.withMaximumValue();
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder61.setRegion("IT");
        java.util.Locale locale65 = new java.util.Locale("fr");
        java.util.Locale.Builder builder66 = builder61.setLocale(locale65);
        java.util.Locale.Builder builder69 = builder66.setExtension('a', "52");
        java.util.Locale locale70 = builder69.build();
        int int71 = property57.getMaximumShortTextLength(locale70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter49.withLocale(locale70);
        java.util.Calendar calendar73 = dateTime37.toCalendar(locale70);
        org.joda.time.DateTime dateTime75 = dateTime37.plusHours((int) (short) 100);
        boolean boolean76 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr__#a-52");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1643699983477,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.120,offset=120,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=43,MILLISECOND=597,ZONE_OFFSET=120,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField25 = gJChronology13.years();
        org.joda.time.DurationField durationField26 = gJChronology13.millis();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = gJChronology13.add(readablePeriod27, (long) 6, 26200334);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology13.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = dateTimeField31.getDifference((-49233290059747647L), 117L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -13675913905");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 6L + "'", long30 == 6L);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        int int25 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime24.plusYears(1);
        org.joda.time.DateTime dateTime32 = dateTime24.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int34 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime7.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime7.withMinuteOfHour((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        long long27 = dateTimeField25.roundHalfEven((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField25.getType();
        int int29 = dateTime8.get(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int43 = localDateTime41.get(dateTimeFieldType42);
        int int44 = localDateTime39.indexOf(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localDateTime55, (long) '4');
        org.joda.time.DateTimeField dateTimeField58 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType42.getField(chronology50);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology65 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime62.getZone();
        java.lang.String str68 = dateTimeZone66.getNameKey(100L);
        long long70 = dateTimeZone66.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.secondOfDay();
        int int73 = gJChronology71.getMinimumDaysInFirstWeek();
        boolean boolean74 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DurationField durationField75 = gJChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology71.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType28.getField((org.joda.time.Chronology) gJChronology71);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology71.getZone();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology71.year();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology71.minuteOfHour();
        org.joda.time.DurationField durationField82 = gJChronology71.days();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = gJChronology71.getDateTimeMillis(86399999, 22673294, 22777, 955, 22, 24, 289);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 23L + "'", long27 == 23L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26383832 + "'", int29 == 26383832);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 439 + "'", int43 == 439);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(gJChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale6, locale8, locale10, locale11, locale14, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList18);
        boolean boolean21 = dateTime0.equals((java.lang.Object) languageRangeList4);
        org.joda.time.DateTime dateTime23 = dateTime0.plusWeeks(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        mutableDateTime26.setDate((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime26.secondOfDay();
        boolean boolean36 = dateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime26.add(readableDuration37, 457087);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setMonthOfYear((-1737610));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1737610 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IT" + "'", str7, "IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale6, locale8, locale10, locale11, locale14, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList18);
        boolean boolean21 = dateTime0.equals((java.lang.Object) languageRangeList4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap22);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet26.spliterator();
        java.lang.String[] strArray37 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        int int40 = strSet38.size();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet38.stream();
        boolean boolean42 = strSet26.containsAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet38.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet38.spliterator();
        boolean boolean46 = strSet38.add("Italia");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getCountry();
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale58 = new java.util.Locale("fr");
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale50, locale52, locale54, locale55, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String[] strArray75 = new java.lang.String[] { "70", "UTC", "English", "minuteOfDay", "JulianChronology[Etc/UTC,mdfw=1]", "35", "1970-01-01T00:00:00.001Z", "2022-02-22T07:15:58.038Z", "1900-01-08T00:00:00.100", "2022-02-22T07:15:56.026Z" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strSet76.spliterator();
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet76);
        java.util.Collection<java.util.Locale> localeCollection80 = null;
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, localeCollection80, filteringMode81);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strSet38, filteringMode81);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IT" + "'", str7, "IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "IT" + "'", str51, "IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode81.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(strList83);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfFloor();
        mutableDateTime5.addDays((int) (short) 100);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.hourOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfSecond();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology10.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) localDateTime28, (long) '4');
        org.joda.time.Chronology chronology31 = chronology23.withUTC();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        long long44 = chronology37.set((org.joda.time.ReadablePartial) localDateTime42, (long) '4');
        int[] intArray46 = chronology31.get((org.joda.time.ReadablePartial) localDateTime42, 0L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        int int52 = mutableDateTime49.getMinuteOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readablePeriod61);
        int int63 = mutableDateTime49.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime62.plus(readablePeriod64);
        org.joda.time.DateTime dateTime66 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.plus(readableDuration67);
        org.joda.time.DateTime dateTime69 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime.Property property70 = dateTime68.millisOfDay();
        org.joda.time.DateTime dateTime72 = property70.setCopy((int) (short) 100);
        int int73 = dateTime72.getSecondOfDay();
        org.joda.time.DateTime dateTime74 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[+00:00:00.120,mdfw=1]" + "'", str16, "JulianChronology[+00:00:00.120,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        mutableDateTime11.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '4');
        org.joda.time.Chronology chronology32 = chronology24.withUTC();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        int[] intArray47 = chronology32.get((org.joda.time.ReadablePartial) localDateTime43, 0L);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale48);
        boolean boolean50 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.withFieldAdded(durationFieldType52, (-638));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType56 = localDateTime54.getFieldType(26220886);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26220886");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1582-10-15T00:00:00.000Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645514157380L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology13.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(100L);
        int int41 = localDateTime40.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMillis((int) (short) 1);
        long long48 = chronology34.set((org.joda.time.ReadablePartial) localDateTime46, 1645514156466L);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfCentury();
        boolean boolean50 = gJChronology13.equals((java.lang.Object) localDateTime46);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long56 = gJChronology13.getDateTimeMillis(1439, 3, 86399, 26383633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 604800219L + "'", long48 == 604800219L);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.secondOfMinute();
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        int int8 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMinutes(2022);
        int int11 = localDateTime10.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.secondOfMinute();
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        int int8 = localDateTime3.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withYear(9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(22677137);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(22697111);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        int int4 = dateTimeFormatter2.getDefaultYear();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField12 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        long long20 = durationField18.getValueAsLong(831743946000000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9626666L + "'", long20 == 9626666L);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded(readableDuration41, 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((-18718));
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime43.getZone();
        boolean boolean48 = dateTimeZone46.isStandardOffset((long) 26189286);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone46, 82802025);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 82802025");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology17.getZone();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.clockhourOfHalfday();
        org.joda.time.Instant instant25 = gJChronology23.getGregorianCutover();
        org.joda.time.DurationField durationField26 = gJChronology23.years();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(22768279, 22493226, 722, 26220886, 7, 216, 54, (org.joda.time.Chronology) gJChronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26220886 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1677050149186L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(10);
        java.lang.Appendable appendable15 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(100L);
        int int40 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withPeriodAdded(readablePeriod43, (int) (short) 100);
        long long47 = chronology35.set((org.joda.time.ReadablePartial) localDateTime39, (long) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMonths((int) (byte) 100);
        int int51 = property19.getDifference((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks((int) (short) -1);
        int int56 = localDateTime55.getYearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime59.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks((-1));
        int int71 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.plus(readablePeriod72);
        int int74 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTimeField dateTimeField76 = localDateTime70.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(appendable15, (org.joda.time.ReadablePartial) localDateTime70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3043 + "'", int51 == 3043);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(julianChronology67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) '4');
        org.joda.time.DurationField durationField28 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.secondOfMinute();
        boolean boolean30 = julianChronology10.equals((java.lang.Object) chronology20);
        org.joda.time.DurationField durationField31 = julianChronology10.days();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime34.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology42.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone46 = julianChronology42.getZone();
        long long49 = dateTimeZone46.convertLocalToUTC((-231412082949850814L), false);
        org.joda.time.Chronology chronology50 = julianChronology10.withZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, 1645514206632181L, (-84125007));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: -84125007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(julianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-231412082949850934L) + "'", long49 == (-231412082949850934L));
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime11.withDayOfMonth(1);
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(59181L, 22644);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology31.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYear(16);
        org.joda.time.DateTime dateTime39 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime36);
        int int40 = dateTime39.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 26384734 + "'", int40 == 26384734);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        int int16 = mutableDateTime2.getMinuteOfDay();
        mutableDateTime2.addWeekyears(671);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime2.add(readableDuration21, 22775538);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }
}
